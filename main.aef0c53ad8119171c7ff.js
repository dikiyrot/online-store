(()=>{var n={192:(n,t,e)=>{"use strict";e.d(t,{Z:()=>A});var r=e(15),o=e.n(r),i=e(645),a=e.n(i),s=e(64),l=a()(o());l.i(s.Z),l.push([n.id,".header__container{width:100%;min-height:70px;display:flex;justify-content:space-between;align-items:center}.header__logo{color:var(--color-orange);font-size:30px;font-weight:bold}.header__cart{display:flex;justify-content:space-between;align-items:center}.header__count{font-weight:bold;color:var(--color-orange)}.search{display:flex;align-items:center}.search__input{width:380px;height:40px;margin-right:30px;padding:0px 0px 0px 30px;border-radius:20px;border:1px solid #ffca94;color:var(--color-backgrounfd);font-size:18px;background-color:#ffca94}.main__goods{width:100%;height:100%;display:flex;flex-wrap:wrap;gap:30px;justify-content:center}.goods{background-color:#fff;display:flex;flex-direction:column;width:200px;height:350px;padding:15px;border-radius:10px;cursor:pointer}.goods p{margin-bottom:5px}.goods-name{font-weight:bold;text-align:center;margin:0 auto}.goods-btn{margin-top:10px;align-self:center}.goods-photo{margin:10px auto;max-width:100%}.goods-hide{display:none}.addCart{border:2px solid #994d00}.footer{min-height:30px;color:#ffca94}.footer__container{display:flex;justify-content:space-between;align-items:center}.footer__left a{color:#ffca94;text-decoration:none}.footer__right{height:45px;width:90px}.footer__right img{max-width:100%}.footer__right a{display:block;height:100%;width:100%}.main{background-color:#192f2d}.main__container{display:flex;justify-content:space-between}.main__filters{flex:1 1 400px;align-self:flex-start}.filters__sort{display:flex;align-items:center;padding-top:20px;padding-bottom:40px}.filters__select{margin-left:20px;text-align:center;padding:10px;border:0;border-radius:30px;font-weight:normal;font-size:12px;line-height:14px}.filters__option{color:#121c1e}.title{font-weight:normal;font-size:20px;line-height:22px}.filter__box{margin-bottom:30px;display:flex;align-items:center;gap:15px}.filter__button{padding:20px;background-color:#fff;border-radius:15px}.filter__color-black{background-color:#000}.filter__color-silver{background-color:#777}.filter__color-white{background-color:#fff}.active{background-color:rgba(0,0,0,.2)}.filter-range{min-width:350px}.filter-range__box{display:flex;justify-content:space-between}.filter-range__wrapper{padding:5px;color:#d16343 !important}.filter-range__input{padding:5px 10px;text-align:right;background-color:rgba(0,0,0,0) !important}.filter-range__input_left{text-align:left}.slider-screen{margin:30px 0}.slider-wrapper{padding:15px 30px}#slider{border-radius:25px}#slider-2{border-radius:25px}.noUi-handle{width:23px !important;height:23px !important;border-radius:50% !important}.noUi-handle::after,.noUi-handle::before{display:none !important}.noUi-target{height:12px !important}.noUi-base{height:12px !important}.noUi-connects{height:12px !important}.noUi-connect{background:#121c1e !important;height:12px}:root{--color-backgrounfd: #121c1e;--color-orange: #ffca94}*{padding:0px;margin:0px;border:0px;-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:border-box;box-sizing:border-box}:focus,:active{outline:none}a:focus,a:active{outline:none}aside,nav,footer,header,section{display:block}html,body{height:100%}input::-ms-clear{display:none}button{cursor:pointer}button::-moz-focus-inner{padding:0;border:0}a,a:visited{text-decoration:none}a:hover{text-decoration:none}ul li{list-style:none}img{vertical-align:top}h1,h2,h3,h4,h5,h6{font-weight:inherit;font-size:inherit}a{background-color:rgba(0,0,0,0)}button:focus{outline-style:none}button:active,button:hover,button:focus{outline:0;outline-offset:0}body{font-family:sans-serif;font-size:15px;font-weight:400;color:#545454;background-color:var(--color-backgrounfd)}.wrapper{min-height:100vh;display:flex;flex-direction:column}.main{flex:1 1 auto;display:flex;gap:20px;padding:20px 0;background-color:#ffca94}[class*=__container]{max-width:1200px;margin:0 auto;padding:0 20px}","",{version:3,sources:["webpack://./src/style/_header.scss","webpack://./src/style/_goods.scss","webpack://./src/style/_footer.scss","webpack://./src/style/_filters.scss","webpack://./src/style.scss"],names:[],mappings:"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",sourcesContent:[".header {\r\n\r\n  &__container {\r\n    width: 100%;\r\n    min-height: 70px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  &__logo {\r\n    color: var(--color-orange);\r\n    font-size: 30px;\r\n    font-weight: bold;\r\n  }\r\n\r\n  &__cart {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  &__count {\r\n    font-weight: bold;\r\n    color: var(--color-orange);\r\n  }\r\n}\r\n\r\n.search {\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  &__input {\r\n    width: 380px;\r\n    height: 40px;\r\n    margin-right: 30px;\r\n    padding: 0px 0px 0px 30px;\r\n    border-radius: 20px;\r\n    border: 1px solid #ffca94;\r\n    color: var(--color-backgrounfd);\r\n    font-size: 18px;\r\n    background-color: #ffca94;\r\n  }\r\n}\r\n\r\n",".main__goods {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 30px;\r\n  justify-content: center;\r\n\r\n}\r\n\r\n.goods {\r\n  background-color: #fff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  //text-align: center;\r\n  width: 200px;\r\n  height: 350px;\r\n  padding: 15px;\r\n  border-radius: 10px;\r\n  cursor: pointer;\r\n  p {\r\n    margin-bottom: 5px;\r\n  }\r\n}\r\n\r\n.goods-name {\r\n  font-weight: bold;\r\n  text-align: center;\r\n  margin: 0 auto;\r\n}\r\n\r\n.goods-btn {\r\n  margin-top: 10px;\r\n  align-self: center;\r\n}\r\n\r\n.goods-photo {\r\n  margin: 10px auto;\r\n  max-width: 100%;\r\n}\r\n\r\n.goods-hide {\r\n  display: none;\r\n}\r\n\r\n.addCart {\r\n  border: 2px solid #994d00;\r\n}",".footer {\r\n  min-height: 30px;\r\n  color: #ffca94;\r\n  &__container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n}\r\n\r\n.footer__left a {\r\n  color: #ffca94;\r\n  text-decoration: none\r\n}\r\n\r\n.footer__right {\r\n  height: 45px;\r\n  width: 90px\r\n}\r\n.footer__right img {\r\n  max-width: 100%;\r\n}\r\n\r\n.footer__right a {\r\n  display: block;\r\n  height: 100%;\r\n  width: 100%\r\n}","\r\n.main {\r\n  background-color: #192f2d;\r\n\r\n  &__container {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n\r\n  &__filters {\r\n    flex: 1 1 400px;\r\n    align-self:flex-start;\r\n  }\r\n\r\n  &__goods {\r\n  }\r\n\r\n}\r\n\r\n.filters {\r\n\r\n  &__sort {\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 20px;\r\n    padding-bottom: 40px;\r\n  }\r\n\r\n  &__select {\r\n    margin-left: 20px;\r\n    text-align: center;\r\n    padding: 10px;\r\n\r\n    border: 0;\r\n    border-radius: 30px;\r\n    font-weight: normal;\r\n    font-size: 12px;\r\n    line-height: 14px;\r\n    //color: #ffffff;\r\n  }\r\n\r\n  &__option {\r\n    color: #121c1e;\r\n  }\r\n}\r\n\r\n.title {\r\n  font-weight: normal;\r\n  font-size: 20px;\r\n  line-height: 22px;\r\n}\r\n\r\n.filter__box {\r\n  margin-bottom: 30px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.filter__button {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n  border-radius: 15px;\r\n}\r\n\r\n.filter__color {\r\n  \r\n  &-black {\r\n    background-color: #000;\r\n  }\r\n\r\n  &-silver {\r\n    background-color: #777;\r\n  }\r\n\r\n  &-white {\r\n    background-color: #fff;\r\n  }\r\n}\r\n\r\n.active {\r\n  background-color: rgba(0, 0, 0, 0.2);\r\n  //border: 1px solid #777777;\r\n}\r\n\r\n\r\n.filter-range {\r\n  min-width: 350px;\r\n}\r\n\r\n.filter-range__box {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n\r\n.filter-range__wrapper {\r\n  padding: 5px;\r\n  color: #d16343 !important;\r\n}\r\n\r\n.filter-range__input {\r\n  padding: 5px 10px;\r\n  text-align: right;\r\n  background-color: transparent !important;\r\n\r\n  &_left {\r\n    text-align: left;\r\n  }\r\n}\r\n.slider-screen {\r\n  margin: 30px 0;\r\n}\r\n\r\n.slider-wrapper {\r\n  padding: 15px 30px;\r\n}\r\n\r\n#slider {\r\n  border-radius: 25px;\r\n}\r\n\r\n#slider-2 {\r\n  border-radius: 25px;\r\n}\r\n\r\n.noUi-handle {\r\n  width: 23px !important;\r\n  height: 23px !important;;\r\n  border-radius: 50% !important;\r\n}\r\n\r\n.noUi-handle::after, .noUi-handle::before {\r\n  display: none !important;\r\n\r\n}\r\n.noUi-target {\r\n  height: 12px !important;\r\n}\r\n\r\n.noUi-base {\r\n  height: 12px !important;\r\n}\r\n.noUi-connects {\r\n  height: 12px !important;\r\n}\r\n\r\n.noUi-connect {\r\n  background: #121C1E!important;\r\n  height: 12px;\r\n}",'@import "./style/_header.scss";\n@import "./style/_goods.scss";\n@import "./style/_footer.scss";\n@import "./style/_filters.scss";\n@import "./style/nouislider.css";\n\n:root {\n\t--color-backgrounfd: #121c1e;\n\t--color-orange: #ffca94;\n\n}\n\n* {\n\tpadding: 0px;\n\tmargin: 0px;\n\tborder: 0px;\n\t-webkit-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n*,\n*:before,\n*:after {\n\t-webkit-box-sizing: border-box;\n\tbox-sizing: border-box;\n}\n\n:focus,\n:active {\n\toutline: none;\n}\n\na:focus,\na:active {\n\toutline: none;\n}\n\naside,\nnav,\nfooter,\nheader,\nsection {\n\tdisplay: block;\n}\n\nhtml,\nbody {\n\theight: 100%;\n}\n\ninput::-ms-clear {\n\tdisplay: none;\n}\n\nbutton {\n\tcursor: pointer;\n}\n\nbutton::-moz-focus-inner {\n\tpadding: 0;\n\tborder: 0;\n}\n\na,\na:visited {\n\ttext-decoration: none;\n}\n\na:hover {\n\ttext-decoration: none;\n}\n\nul li {\n\tlist-style: none;\n}\n\nimg {\n\tvertical-align: top;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n\tfont-weight: inherit;\n\tfont-size: inherit;\n}\n\na {\n\tbackground-color: transparent;\n}\n\nbutton:focus {\n\toutline-style: none;\n}\n\nbutton:active,\nbutton:hover,\nbutton:focus {\n\toutline: 0;\n\toutline-offset: 0;\n}\n\nbody {\n\tfont-family: sans-serif;\n\tfont-size: 15px;\n\tfont-weight: 400;\n\tcolor: #545454;\n\tbackground-color: var(--color-backgrounfd);\n}\n\n.wrapper {\n\t//min-height: 100%;\n\tmin-height: 100vh;\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n.main {\n\tflex: 1 1 auto;\n\tdisplay: flex;\n\tgap: 20px;\n\tpadding: 20px 0;\n\tbackground-color: #ffca94;\n}\n\n[class*=\'__container\'] {\n\tmax-width: 1200px;\n\tmargin: 0 auto;\n\tpadding: 0 20px;\n}'],sourceRoot:""}]);const A=l},64:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(15),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([n.id,"/* Functional styling;\n * These styles are required for noUiSlider to function.\n * You don't need to change these rules to apply your design.\n */\n.noUi-target,\n.noUi-target * {\n  -webkit-touch-callout: none;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-user-select: none;\n  -ms-touch-action: none;\n  touch-action: none;\n  -ms-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.noUi-target {\n  position: relative;\n}\n.noUi-base,\n.noUi-connects {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  z-index: 1;\n}\n/* Wrapper for all connect elements.\n  */\n.noUi-connects {\n  overflow: hidden;\n  z-index: 0;\n}\n.noUi-connect,\n.noUi-origin {\n  will-change: transform;\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  right: 0;\n  height: 100%;\n  width: 100%;\n  -ms-transform-origin: 0 0;\n  -webkit-transform-origin: 0 0;\n  -webkit-transform-style: preserve-3d;\n  transform-origin: 0 0;\n  transform-style: flat;\n}\n/* Offset direction\n  */\n.noUi-txt-dir-rtl.noUi-horizontal .noUi-origin {\n  left: 0;\n  right: auto;\n}\n/* Give origins 0 height/width so they don't interfere with clicking the\n  * connect elements.\n  */\n.noUi-vertical .noUi-origin {\n  top: -100%;\n  width: 0;\n}\n.noUi-horizontal .noUi-origin {\n  height: 0;\n}\n.noUi-handle {\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  position: absolute;\n}\n.noUi-touch-area {\n  height: 100%;\n  width: 100%;\n}\n.noUi-state-tap .noUi-connect,\n.noUi-state-tap .noUi-origin {\n  -webkit-transition: transform 0.3s;\n  transition: transform 0.3s;\n}\n.noUi-state-drag * {\n  cursor: inherit !important;\n}\n/* Slider size and handle placement;\n  */\n.noUi-horizontal {\n  height: 18px;\n}\n.noUi-horizontal .noUi-handle {\n  width: 34px;\n  height: 28px;\n  right: -17px;\n  top: -6px;\n}\n.noUi-vertical {\n  width: 18px;\n}\n.noUi-vertical .noUi-handle {\n  width: 28px;\n  height: 34px;\n  right: -6px;\n  bottom: -17px;\n}\n.noUi-txt-dir-rtl.noUi-horizontal .noUi-handle {\n  left: -17px;\n  right: auto;\n}\n/* Styling;\n  * Giving the connect element a border radius causes issues with using transform: scale\n  */\n.noUi-target {\n  background: #fafafa;\n  border-radius: 4px;\n  border: 1px solid #d3d3d3;\n  box-shadow: inset 0 1px 1px #f0f0f0, 0 3px 6px -5px #bbb;\n}\n.noUi-connects {\n  border-radius: 3px;\n}\n.noUi-connect {\n  background: #3fb8af;\n}\n/* Handles and cursors;\n  */\n.noUi-draggable {\n  cursor: ew-resize;\n}\n.noUi-vertical .noUi-draggable {\n  cursor: ns-resize;\n}\n.noUi-handle {\n  border: 1px solid #d9d9d9;\n  border-radius: 3px;\n  background: #fff;\n  cursor: default;\n  box-shadow: inset 0 0 1px #fff, inset 0 1px 7px #ebebeb, 0 3px 6px -3px #bbb;\n}\n.noUi-active {\n  box-shadow: inset 0 0 1px #fff, inset 0 1px 7px #ddd, 0 3px 6px -3px #bbb;\n}\n/* Handle stripes;\n  */\n.noUi-handle:before,\n.noUi-handle:after {\n  content: '';\n  display: block;\n  position: absolute;\n  height: 14px;\n  width: 1px;\n  background: #e8e7e6;\n  left: 14px;\n  top: 6px;\n}\n.noUi-handle:after {\n  left: 17px;\n}\n.noUi-vertical .noUi-handle:before,\n.noUi-vertical .noUi-handle:after {\n  width: 14px;\n  height: 1px;\n  left: 6px;\n  top: 14px;\n}\n.noUi-vertical .noUi-handle:after {\n  top: 17px;\n}\n/* Disabled state;\n  */\n[disabled] .noUi-connect {\n  background: #b8b8b8;\n}\n[disabled].noUi-target,\n[disabled].noUi-handle,\n[disabled] .noUi-handle {\n  cursor: not-allowed;\n}\n/* Base;\n  *\n  */\n.noUi-pips,\n.noUi-pips * {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.noUi-pips {\n  position: absolute;\n  color: #999;\n}\n/* Values;\n  *\n  */\n.noUi-value {\n  position: absolute;\n  white-space: nowrap;\n  text-align: center;\n}\n.noUi-value-sub {\n  color: #ccc;\n  font-size: 10px;\n}\n/* Markings;\n  *\n  */\n.noUi-marker {\n  position: absolute;\n  background: #ccc;\n}\n.noUi-marker-sub {\n  background: #aaa;\n}\n.noUi-marker-large {\n  background: #aaa;\n}\n/* Horizontal layout;\n  *\n  */\n.noUi-pips-horizontal {\n  padding: 10px 0;\n  height: 80px;\n  top: 100%;\n  left: 0;\n  width: 100%;\n}\n.noUi-value-horizontal {\n  -webkit-transform: translate(-50%, 50%);\n  transform: translate(-50%, 50%);\n}\n.noUi-rtl .noUi-value-horizontal {\n  -webkit-transform: translate(50%, 50%);\n  transform: translate(50%, 50%);\n}\n.noUi-marker-horizontal.noUi-marker {\n  margin-left: -1px;\n  width: 2px;\n  height: 5px;\n}\n.noUi-marker-horizontal.noUi-marker-sub {\n  height: 10px;\n}\n.noUi-marker-horizontal.noUi-marker-large {\n  height: 15px;\n}\n/* Vertical layout;\n  *\n  */\n.noUi-pips-vertical {\n  padding: 0 10px;\n  height: 100%;\n  top: 0;\n  left: 100%;\n}\n.noUi-value-vertical {\n  -webkit-transform: translate(0, -50%);\n  transform: translate(0, -50%);\n  padding-left: 25px;\n}\n.noUi-rtl .noUi-value-vertical {\n  -webkit-transform: translate(0, 50%);\n  transform: translate(0, 50%);\n}\n.noUi-marker-vertical.noUi-marker {\n  width: 5px;\n  height: 2px;\n  margin-top: -1px;\n}\n.noUi-marker-vertical.noUi-marker-sub {\n  width: 10px;\n}\n.noUi-marker-vertical.noUi-marker-large {\n  width: 15px;\n}\n.noUi-tooltip {\n  display: block;\n  position: absolute;\n  border: 1px solid #d9d9d9;\n  border-radius: 3px;\n  background: #fff;\n  color: #000;\n  padding: 5px;\n  text-align: center;\n  white-space: nowrap;\n}\n.noUi-horizontal .noUi-tooltip {\n  -webkit-transform: translate(-50%, 0);\n  transform: translate(-50%, 0);\n  left: 50%;\n  bottom: 120%;\n}\n.noUi-vertical .noUi-tooltip {\n  -webkit-transform: translate(0, -50%);\n  transform: translate(0, -50%);\n  top: 50%;\n  right: 120%;\n}\n.noUi-horizontal .noUi-origin > .noUi-tooltip {\n  -webkit-transform: translate(50%, 0);\n  transform: translate(50%, 0);\n  left: auto;\n  bottom: 10px;\n}\n.noUi-vertical .noUi-origin > .noUi-tooltip {\n  -webkit-transform: translate(0, -18px);\n  transform: translate(0, -18px);\n  top: auto;\n  right: 28px;\n}\n","",{version:3,sources:["webpack://./src/style/nouislider.css"],names:[],mappings:"AAAA;;;EAGE;AACF;;EAEE,2BAA2B;EAC3B,6CAA6C;EAC7C,yBAAyB;EACzB,sBAAsB;EACtB,kBAAkB;EAClB,qBAAqB;EACrB,sBAAsB;EACtB,iBAAiB;EACjB,2BAA2B;EAC3B,sBAAsB;AACxB;AACA;EACE,kBAAkB;AACpB;AACA;;EAEE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,UAAU;AACZ;AACA;GACG;AACH;EACE,gBAAgB;EAChB,UAAU;AACZ;AACA;;EAEE,sBAAsB;EACtB,kBAAkB;EAClB,UAAU;EACV,MAAM;EACN,QAAQ;EACR,YAAY;EACZ,WAAW;EACX,yBAAyB;EACzB,6BAA6B;EAC7B,oCAAoC;EACpC,qBAAqB;EACrB,qBAAqB;AACvB;AACA;GACG;AACH;EACE,OAAO;EACP,WAAW;AACb;AACA;;GAEG;AACH;EACE,UAAU;EACV,QAAQ;AACV;AACA;EACE,SAAS;AACX;AACA;EACE,mCAAmC;EACnC,2BAA2B;EAC3B,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,WAAW;AACb;AACA;;EAEE,kCAAkC;EAClC,0BAA0B;AAC5B;AACA;EACE,0BAA0B;AAC5B;AACA;GACG;AACH;EACE,YAAY;AACd;AACA;EACE,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,SAAS;AACX;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;EACX,YAAY;EACZ,WAAW;EACX,aAAa;AACf;AACA;EACE,WAAW;EACX,WAAW;AACb;AACA;;GAEG;AACH;EACE,mBAAmB;EACnB,kBAAkB;EAClB,yBAAyB;EACzB,wDAAwD;AAC1D;AACA;EACE,kBAAkB;AACpB;AACA;EACE,mBAAmB;AACrB;AACA;GACG;AACH;EACE,iBAAiB;AACnB;AACA;EACE,iBAAiB;AACnB;AACA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,4EAA4E;AAC9E;AACA;EACE,yEAAyE;AAC3E;AACA;GACG;AACH;;EAEE,WAAW;EACX,cAAc;EACd,kBAAkB;EAClB,YAAY;EACZ,UAAU;EACV,mBAAmB;EACnB,UAAU;EACV,QAAQ;AACV;AACA;EACE,UAAU;AACZ;AACA;;EAEE,WAAW;EACX,WAAW;EACX,SAAS;EACT,SAAS;AACX;AACA;EACE,SAAS;AACX;AACA;GACG;AACH;EACE,mBAAmB;AACrB;AACA;;;EAGE,mBAAmB;AACrB;AACA;;GAEG;AACH;;EAEE,2BAA2B;EAC3B,sBAAsB;AACxB;AACA;EACE,kBAAkB;EAClB,WAAW;AACb;AACA;;GAEG;AACH;EACE,kBAAkB;EAClB,mBAAmB;EACnB,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,eAAe;AACjB;AACA;;GAEG;AACH;EACE,kBAAkB;EAClB,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;;GAEG;AACH;EACE,eAAe;EACf,YAAY;EACZ,SAAS;EACT,OAAO;EACP,WAAW;AACb;AACA;EACE,uCAAuC;EACvC,+BAA+B;AACjC;AACA;EACE,sCAAsC;EACtC,8BAA8B;AAChC;AACA;EACE,iBAAiB;EACjB,UAAU;EACV,WAAW;AACb;AACA;EACE,YAAY;AACd;AACA;EACE,YAAY;AACd;AACA;;GAEG;AACH;EACE,eAAe;EACf,YAAY;EACZ,MAAM;EACN,UAAU;AACZ;AACA;EACE,qCAAqC;EACrC,6BAA6B;EAC7B,kBAAkB;AACpB;AACA;EACE,oCAAoC;EACpC,4BAA4B;AAC9B;AACA;EACE,UAAU;EACV,WAAW;EACX,gBAAgB;AAClB;AACA;EACE,WAAW;AACb;AACA;EACE,WAAW;AACb;AACA;EACE,cAAc;EACd,kBAAkB;EAClB,yBAAyB;EACzB,kBAAkB;EAClB,gBAAgB;EAChB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,mBAAmB;AACrB;AACA;EACE,qCAAqC;EACrC,6BAA6B;EAC7B,SAAS;EACT,YAAY;AACd;AACA;EACE,qCAAqC;EACrC,6BAA6B;EAC7B,QAAQ;EACR,WAAW;AACb;AACA;EACE,oCAAoC;EACpC,4BAA4B;EAC5B,UAAU;EACV,YAAY;AACd;AACA;EACE,sCAAsC;EACtC,8BAA8B;EAC9B,SAAS;EACT,WAAW;AACb",sourcesContent:["/* Functional styling;\n * These styles are required for noUiSlider to function.\n * You don't need to change these rules to apply your design.\n */\n.noUi-target,\n.noUi-target * {\n  -webkit-touch-callout: none;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-user-select: none;\n  -ms-touch-action: none;\n  touch-action: none;\n  -ms-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.noUi-target {\n  position: relative;\n}\n.noUi-base,\n.noUi-connects {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  z-index: 1;\n}\n/* Wrapper for all connect elements.\n  */\n.noUi-connects {\n  overflow: hidden;\n  z-index: 0;\n}\n.noUi-connect,\n.noUi-origin {\n  will-change: transform;\n  position: absolute;\n  z-index: 1;\n  top: 0;\n  right: 0;\n  height: 100%;\n  width: 100%;\n  -ms-transform-origin: 0 0;\n  -webkit-transform-origin: 0 0;\n  -webkit-transform-style: preserve-3d;\n  transform-origin: 0 0;\n  transform-style: flat;\n}\n/* Offset direction\n  */\n.noUi-txt-dir-rtl.noUi-horizontal .noUi-origin {\n  left: 0;\n  right: auto;\n}\n/* Give origins 0 height/width so they don't interfere with clicking the\n  * connect elements.\n  */\n.noUi-vertical .noUi-origin {\n  top: -100%;\n  width: 0;\n}\n.noUi-horizontal .noUi-origin {\n  height: 0;\n}\n.noUi-handle {\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  position: absolute;\n}\n.noUi-touch-area {\n  height: 100%;\n  width: 100%;\n}\n.noUi-state-tap .noUi-connect,\n.noUi-state-tap .noUi-origin {\n  -webkit-transition: transform 0.3s;\n  transition: transform 0.3s;\n}\n.noUi-state-drag * {\n  cursor: inherit !important;\n}\n/* Slider size and handle placement;\n  */\n.noUi-horizontal {\n  height: 18px;\n}\n.noUi-horizontal .noUi-handle {\n  width: 34px;\n  height: 28px;\n  right: -17px;\n  top: -6px;\n}\n.noUi-vertical {\n  width: 18px;\n}\n.noUi-vertical .noUi-handle {\n  width: 28px;\n  height: 34px;\n  right: -6px;\n  bottom: -17px;\n}\n.noUi-txt-dir-rtl.noUi-horizontal .noUi-handle {\n  left: -17px;\n  right: auto;\n}\n/* Styling;\n  * Giving the connect element a border radius causes issues with using transform: scale\n  */\n.noUi-target {\n  background: #fafafa;\n  border-radius: 4px;\n  border: 1px solid #d3d3d3;\n  box-shadow: inset 0 1px 1px #f0f0f0, 0 3px 6px -5px #bbb;\n}\n.noUi-connects {\n  border-radius: 3px;\n}\n.noUi-connect {\n  background: #3fb8af;\n}\n/* Handles and cursors;\n  */\n.noUi-draggable {\n  cursor: ew-resize;\n}\n.noUi-vertical .noUi-draggable {\n  cursor: ns-resize;\n}\n.noUi-handle {\n  border: 1px solid #d9d9d9;\n  border-radius: 3px;\n  background: #fff;\n  cursor: default;\n  box-shadow: inset 0 0 1px #fff, inset 0 1px 7px #ebebeb, 0 3px 6px -3px #bbb;\n}\n.noUi-active {\n  box-shadow: inset 0 0 1px #fff, inset 0 1px 7px #ddd, 0 3px 6px -3px #bbb;\n}\n/* Handle stripes;\n  */\n.noUi-handle:before,\n.noUi-handle:after {\n  content: '';\n  display: block;\n  position: absolute;\n  height: 14px;\n  width: 1px;\n  background: #e8e7e6;\n  left: 14px;\n  top: 6px;\n}\n.noUi-handle:after {\n  left: 17px;\n}\n.noUi-vertical .noUi-handle:before,\n.noUi-vertical .noUi-handle:after {\n  width: 14px;\n  height: 1px;\n  left: 6px;\n  top: 14px;\n}\n.noUi-vertical .noUi-handle:after {\n  top: 17px;\n}\n/* Disabled state;\n  */\n[disabled] .noUi-connect {\n  background: #b8b8b8;\n}\n[disabled].noUi-target,\n[disabled].noUi-handle,\n[disabled] .noUi-handle {\n  cursor: not-allowed;\n}\n/* Base;\n  *\n  */\n.noUi-pips,\n.noUi-pips * {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n.noUi-pips {\n  position: absolute;\n  color: #999;\n}\n/* Values;\n  *\n  */\n.noUi-value {\n  position: absolute;\n  white-space: nowrap;\n  text-align: center;\n}\n.noUi-value-sub {\n  color: #ccc;\n  font-size: 10px;\n}\n/* Markings;\n  *\n  */\n.noUi-marker {\n  position: absolute;\n  background: #ccc;\n}\n.noUi-marker-sub {\n  background: #aaa;\n}\n.noUi-marker-large {\n  background: #aaa;\n}\n/* Horizontal layout;\n  *\n  */\n.noUi-pips-horizontal {\n  padding: 10px 0;\n  height: 80px;\n  top: 100%;\n  left: 0;\n  width: 100%;\n}\n.noUi-value-horizontal {\n  -webkit-transform: translate(-50%, 50%);\n  transform: translate(-50%, 50%);\n}\n.noUi-rtl .noUi-value-horizontal {\n  -webkit-transform: translate(50%, 50%);\n  transform: translate(50%, 50%);\n}\n.noUi-marker-horizontal.noUi-marker {\n  margin-left: -1px;\n  width: 2px;\n  height: 5px;\n}\n.noUi-marker-horizontal.noUi-marker-sub {\n  height: 10px;\n}\n.noUi-marker-horizontal.noUi-marker-large {\n  height: 15px;\n}\n/* Vertical layout;\n  *\n  */\n.noUi-pips-vertical {\n  padding: 0 10px;\n  height: 100%;\n  top: 0;\n  left: 100%;\n}\n.noUi-value-vertical {\n  -webkit-transform: translate(0, -50%);\n  transform: translate(0, -50%);\n  padding-left: 25px;\n}\n.noUi-rtl .noUi-value-vertical {\n  -webkit-transform: translate(0, 50%);\n  transform: translate(0, 50%);\n}\n.noUi-marker-vertical.noUi-marker {\n  width: 5px;\n  height: 2px;\n  margin-top: -1px;\n}\n.noUi-marker-vertical.noUi-marker-sub {\n  width: 10px;\n}\n.noUi-marker-vertical.noUi-marker-large {\n  width: 15px;\n}\n.noUi-tooltip {\n  display: block;\n  position: absolute;\n  border: 1px solid #d9d9d9;\n  border-radius: 3px;\n  background: #fff;\n  color: #000;\n  padding: 5px;\n  text-align: center;\n  white-space: nowrap;\n}\n.noUi-horizontal .noUi-tooltip {\n  -webkit-transform: translate(-50%, 0);\n  transform: translate(-50%, 0);\n  left: 50%;\n  bottom: 120%;\n}\n.noUi-vertical .noUi-tooltip {\n  -webkit-transform: translate(0, -50%);\n  transform: translate(0, -50%);\n  top: 50%;\n  right: 120%;\n}\n.noUi-horizontal .noUi-origin > .noUi-tooltip {\n  -webkit-transform: translate(50%, 0);\n  transform: translate(50%, 0);\n  left: auto;\n  bottom: 10px;\n}\n.noUi-vertical .noUi-origin > .noUi-tooltip {\n  -webkit-transform: translate(0, -18px);\n  transform: translate(0, -18px);\n  top: auto;\n  right: 28px;\n}\n"],sourceRoot:""}]);const s=a},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);r&&o[l[0]]||(e&&(l[2]?l[2]="".concat(e," and ").concat(l[2]):l[2]=e),t.push(l))}},t}},15:n=>{"use strict";function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e,r,o=(r=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=n&&("undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"]);if(null!=e){var r,o,i=[],a=!0,s=!1;try{for(e=e.call(n);!(a=(r=e.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(n){s=!0,o=n}finally{try{a||null==e.return||e.return()}finally{if(s)throw o}}return i}}(e,r)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if(!a)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),A="/*# ".concat(l," */"),c=a.sources.map((function(n){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(n," */")}));return[i].concat(c).concat([A]).join("\n")}return[i].join("\n")}},211:function(n,t){!function(n){"use strict";function t(n){return"object"==typeof n&&"function"==typeof n.to}function e(n){n.parentElement.removeChild(n)}function r(n){return null!=n}function o(n){n.preventDefault()}function i(n){return"number"==typeof n&&!isNaN(n)&&isFinite(n)}function a(n,t,e){e>0&&(c(n,t),setTimeout((function(){u(n,t)}),e))}function s(n){return Math.max(Math.min(n,100),0)}function l(n){return Array.isArray(n)?n:[n]}function A(n){var t=(n=String(n)).split(".");return t.length>1?t[1].length:0}function c(n,t){n.classList&&!/\s/.test(t)?n.classList.add(t):n.className+=" "+t}function u(n,t){n.classList&&!/\s/.test(t)?n.classList.remove(t):n.className=n.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}function d(n){var t=void 0!==window.pageXOffset,e="CSS1Compat"===(n.compatMode||"");return{x:t?window.pageXOffset:e?n.documentElement.scrollLeft:n.body.scrollLeft,y:t?window.pageYOffset:e?n.documentElement.scrollTop:n.body.scrollTop}}function p(n,t){return 100/(t-n)}function f(n,t,e){return 100*t/(n[e+1]-n[e])}function h(n,t){for(var e=1;n>=t[e];)e+=1;return e}function C(n,t,e){if(e>=n.slice(-1)[0])return 100;var r=h(e,n),o=n[r-1],i=n[r],a=t[r-1],s=t[r];return a+function(n,t){return f(n,n[0]<0?t+Math.abs(n[0]):t-n[0],0)}([o,i],e)/p(a,s)}function g(n,t,e,r){if(100===r)return r;var o=h(r,n),i=n[o-1],a=n[o];return e?r-i>(a-i)/2?a:i:t[o-1]?n[o-1]+function(n,t){return Math.round(n/t)*t}(r-n[o-1],t[o-1]):r}var m,b;n.PipsMode=void 0,(b=n.PipsMode||(n.PipsMode={})).Range="range",b.Steps="steps",b.Positions="positions",b.Count="count",b.Values="values",n.PipsType=void 0,(m=n.PipsType||(n.PipsType={}))[m.None=-1]="None",m[m.NoValue=0]="NoValue",m[m.LargeValue=1]="LargeValue",m[m.SmallValue=2]="SmallValue";var x=function(){function n(n,t,e){var r;this.xPct=[],this.xVal=[],this.xSteps=[],this.xNumSteps=[],this.xHighestCompleteStep=[],this.xSteps=[e||!1],this.xNumSteps=[!1],this.snap=t;var o=[];for(Object.keys(n).forEach((function(t){o.push([l(n[t]),t])})),o.sort((function(n,t){return n[0][0]-t[0][0]})),r=0;r<o.length;r++)this.handleEntryPoint(o[r][1],o[r][0]);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)this.handleStepPoint(r,this.xNumSteps[r])}return n.prototype.getDistance=function(n){for(var t=[],e=0;e<this.xNumSteps.length-1;e++)t[e]=f(this.xVal,n,e);return t},n.prototype.getAbsoluteDistance=function(n,t,e){var r,o=0;if(n<this.xPct[this.xPct.length-1])for(;n>this.xPct[o+1];)o++;else n===this.xPct[this.xPct.length-1]&&(o=this.xPct.length-2);e||n!==this.xPct[o+1]||o++,null===t&&(t=[]);var i=1,a=t[o],s=0,l=0,A=0,c=0;for(r=e?(n-this.xPct[o])/(this.xPct[o+1]-this.xPct[o]):(this.xPct[o+1]-n)/(this.xPct[o+1]-this.xPct[o]);a>0;)s=this.xPct[o+1+c]-this.xPct[o+c],t[o+c]*i+100-100*r>100?(l=s*r,i=(a-100*r)/t[o+c],r=1):(l=t[o+c]*s/100*i,i=0),e?(A-=l,this.xPct.length+c>=1&&c--):(A+=l,this.xPct.length-c>=1&&c++),a=t[o+c]*i;return n+A},n.prototype.toStepping=function(n){return C(this.xVal,this.xPct,n)},n.prototype.fromStepping=function(n){return function(n,t,e){if(e>=100)return n.slice(-1)[0];var r=h(e,t),o=n[r-1],i=n[r],a=t[r-1];return function(n,t){return t*(n[1]-n[0])/100+n[0]}([o,i],(e-a)*p(a,t[r]))}(this.xVal,this.xPct,n)},n.prototype.getStep=function(n){return g(this.xPct,this.xSteps,this.snap,n)},n.prototype.getDefaultStep=function(n,t,e){var r=h(n,this.xPct);return(100===n||t&&n===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/e},n.prototype.getNearbySteps=function(n){var t=h(n,this.xPct);return{stepBefore:{startValue:this.xVal[t-2],step:this.xNumSteps[t-2],highestStep:this.xHighestCompleteStep[t-2]},thisStep:{startValue:this.xVal[t-1],step:this.xNumSteps[t-1],highestStep:this.xHighestCompleteStep[t-1]},stepAfter:{startValue:this.xVal[t],step:this.xNumSteps[t],highestStep:this.xHighestCompleteStep[t]}}},n.prototype.countStepDecimals=function(){var n=this.xNumSteps.map(A);return Math.max.apply(null,n)},n.prototype.hasNoSize=function(){return this.xVal[0]===this.xVal[this.xVal.length-1]},n.prototype.convert=function(n){return this.getStep(this.toStepping(n))},n.prototype.handleEntryPoint=function(n,t){var e;if(!i(e="min"===n?0:"max"===n?100:parseFloat(n))||!i(t[0]))throw new Error("noUiSlider: 'range' value isn't numeric.");this.xPct.push(e),this.xVal.push(t[0]);var r=Number(t[1]);e?this.xSteps.push(!isNaN(r)&&r):isNaN(r)||(this.xSteps[0]=r),this.xHighestCompleteStep.push(0)},n.prototype.handleStepPoint=function(n,t){if(t)if(this.xVal[n]!==this.xVal[n+1]){this.xSteps[n]=f([this.xVal[n],this.xVal[n+1]],t,0)/p(this.xPct[n],this.xPct[n+1]);var e=(this.xVal[n+1]-this.xVal[n])/this.xNumSteps[n],r=Math.ceil(Number(e.toFixed(3))-1),o=this.xVal[n]+this.xNumSteps[n]*r;this.xHighestCompleteStep[n]=o}else this.xSteps[n]=this.xHighestCompleteStep[n]=this.xVal[n]},n}(),v={to:function(n){return void 0===n?"":n.toFixed(2)},from:Number},E={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},y=".__tooltips",B=".__aria";function w(n,t){if(!i(t))throw new Error("noUiSlider: 'step' is not numeric.");n.singleStep=t}function U(n,t){if(!i(t))throw new Error("noUiSlider: 'keyboardPageMultiplier' is not numeric.");n.keyboardPageMultiplier=t}function k(n,t){if(!i(t))throw new Error("noUiSlider: 'keyboardMultiplier' is not numeric.");n.keyboardMultiplier=t}function S(n,t){if(!i(t))throw new Error("noUiSlider: 'keyboardDefaultStep' is not numeric.");n.keyboardDefaultStep=t}function _(n,t){if("object"!=typeof t||Array.isArray(t))throw new Error("noUiSlider: 'range' is not an object.");if(void 0===t.min||void 0===t.max)throw new Error("noUiSlider: Missing 'min' or 'max' in 'range'.");n.spectrum=new x(t,n.snap||!1,n.singleStep)}function P(n,t){if(t=l(t),!Array.isArray(t)||!t.length)throw new Error("noUiSlider: 'start' option is incorrect.");n.handles=t.length,n.start=t}function z(n,t){if("boolean"!=typeof t)throw new Error("noUiSlider: 'snap' option must be a boolean.");n.snap=t}function G(n,t){if("boolean"!=typeof t)throw new Error("noUiSlider: 'animate' option must be a boolean.");n.animate=t}function M(n,t){if("number"!=typeof t)throw new Error("noUiSlider: 'animationDuration' option must be a number.");n.animationDuration=t}function N(n,t){var e,r=[!1];if("lower"===t?t=[!0,!1]:"upper"===t&&(t=[!1,!0]),!0===t||!1===t){for(e=1;e<n.handles;e++)r.push(t);r.push(!1)}else{if(!Array.isArray(t)||!t.length||t.length!==n.handles+1)throw new Error("noUiSlider: 'connect' option doesn't match handle count.");r=t}n.connect=r}function L(n,t){switch(t){case"horizontal":n.ort=0;break;case"vertical":n.ort=1;break;default:throw new Error("noUiSlider: 'orientation' option is invalid.")}}function D(n,t){if(!i(t))throw new Error("noUiSlider: 'margin' option must be numeric.");0!==t&&(n.margin=n.spectrum.getDistance(t))}function V(n,t){if(!i(t))throw new Error("noUiSlider: 'limit' option must be numeric.");if(n.limit=n.spectrum.getDistance(t),!n.limit||n.handles<2)throw new Error("noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.")}function O(n,t){var e;if(!i(t)&&!Array.isArray(t))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(t)&&2!==t.length&&!i(t[0])&&!i(t[1]))throw new Error("noUiSlider: 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==t){for(Array.isArray(t)||(t=[t,t]),n.padding=[n.spectrum.getDistance(t[0]),n.spectrum.getDistance(t[1])],e=0;e<n.spectrum.xNumSteps.length-1;e++)if(n.padding[0][e]<0||n.padding[1][e]<0)throw new Error("noUiSlider: 'padding' option must be a positive number(s).");var r=t[0]+t[1],o=n.spectrum.xVal[0];if(r/(n.spectrum.xVal[n.spectrum.xVal.length-1]-o)>1)throw new Error("noUiSlider: 'padding' option must not exceed 100% of the range.")}}function j(n,t){switch(t){case"ltr":n.dir=0;break;case"rtl":n.dir=1;break;default:throw new Error("noUiSlider: 'direction' option was not recognized.")}}function F(n,t){if("string"!=typeof t)throw new Error("noUiSlider: 'behaviour' must be a string containing options.");var e=t.indexOf("tap")>=0,r=t.indexOf("drag")>=0,o=t.indexOf("fixed")>=0,i=t.indexOf("snap")>=0,a=t.indexOf("hover")>=0,s=t.indexOf("unconstrained")>=0,l=t.indexOf("drag-all")>=0,A=t.indexOf("smooth-steps")>=0;if(o){if(2!==n.handles)throw new Error("noUiSlider: 'fixed' behaviour must be used with 2 handles");D(n,n.start[1]-n.start[0])}if(s&&(n.margin||n.limit))throw new Error("noUiSlider: 'unconstrained' behaviour cannot be used with margin or limit");n.events={tap:e||i,drag:r,dragAll:l,smoothSteps:A,fixed:o,snap:i,hover:a,unconstrained:s}}function W(n,e){if(!1!==e)if(!0===e||t(e)){n.tooltips=[];for(var r=0;r<n.handles;r++)n.tooltips.push(e)}else{if((e=l(e)).length!==n.handles)throw new Error("noUiSlider: must pass a formatter for all handles.");e.forEach((function(n){if("boolean"!=typeof n&&!t(n))throw new Error("noUiSlider: 'tooltips' must be passed a formatter or 'false'.")})),n.tooltips=e}}function Y(n,t){if(t.length!==n.handles)throw new Error("noUiSlider: must pass a attributes for all handles.");n.handleAttributes=t}function H(n,e){if(!t(e))throw new Error("noUiSlider: 'ariaFormat' requires 'to' method.");n.ariaFormat=e}function T(n,e){if(!function(n){return t(n)&&"function"==typeof n.from}(e))throw new Error("noUiSlider: 'format' requires 'to' and 'from' methods.");n.format=e}function q(n,t){if("boolean"!=typeof t)throw new Error("noUiSlider: 'keyboardSupport' option must be a boolean.");n.keyboardSupport=t}function I(n,t){n.documentElement=t}function R(n,t){if("string"!=typeof t&&!1!==t)throw new Error("noUiSlider: 'cssPrefix' must be a string or `false`.");n.cssPrefix=t}function X(n,t){if("object"!=typeof t)throw new Error("noUiSlider: 'cssClasses' must be an object.");"string"==typeof n.cssPrefix?(n.cssClasses={},Object.keys(t).forEach((function(e){n.cssClasses[e]=n.cssPrefix+t[e]}))):n.cssClasses=t}function Z(n){var t={margin:null,limit:null,padding:null,animate:!0,animationDuration:300,ariaFormat:v,format:v},e={step:{r:!1,t:w},keyboardPageMultiplier:{r:!1,t:U},keyboardMultiplier:{r:!1,t:k},keyboardDefaultStep:{r:!1,t:S},start:{r:!0,t:P},connect:{r:!0,t:N},direction:{r:!0,t:j},snap:{r:!1,t:z},animate:{r:!1,t:G},animationDuration:{r:!1,t:M},range:{r:!0,t:_},orientation:{r:!1,t:L},margin:{r:!1,t:D},limit:{r:!1,t:V},padding:{r:!1,t:O},behaviour:{r:!0,t:F},ariaFormat:{r:!1,t:H},format:{r:!1,t:T},tooltips:{r:!1,t:W},keyboardSupport:{r:!0,t:q},documentElement:{r:!1,t:I},cssPrefix:{r:!0,t:R},cssClasses:{r:!0,t:X},handleAttributes:{r:!1,t:Y}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:E,keyboardPageMultiplier:5,keyboardMultiplier:1,keyboardDefaultStep:10};n.format&&!n.ariaFormat&&(n.ariaFormat=n.format),Object.keys(e).forEach((function(i){if(r(n[i])||void 0!==o[i])e[i].t(t,r(n[i])?n[i]:o[i]);else if(e[i].r)throw new Error("noUiSlider: '"+i+"' is required.")})),t.pips=n.pips;var i=document.createElement("div"),a=void 0!==i.style.msTransform,s=void 0!==i.style.transform;t.transformRule=s?"transform":a?"msTransform":"webkitTransform";return t.style=[["left","top"],["right","bottom"]][t.dir][t.ort],t}function Q(t,i,A){var p,f,h,C,g,m,b,x=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},v=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var n=!1;try{var t=Object.defineProperty({},"passive",{get:function(){n=!0}});window.addEventListener("test",null,t)}catch(n){}return n}(),E=t,w=i.spectrum,U=[],k=[],S=[],_=0,P={},z=t.ownerDocument,G=i.documentElement||z.documentElement,M=z.body,N="rtl"===z.dir||1===i.ort?0:100;function L(n,t){var e=z.createElement("div");return t&&c(e,t),n.appendChild(e),e}function D(n,t){var e=L(n,i.cssClasses.origin),r=L(e,i.cssClasses.handle);if(L(r,i.cssClasses.touchArea),r.setAttribute("data-handle",String(t)),i.keyboardSupport&&(r.setAttribute("tabindex","0"),r.addEventListener("keydown",(function(n){return function(n,t){if(j()||F(t))return!1;var e=["Left","Right"],r=["Down","Up"],o=["PageDown","PageUp"],a=["Home","End"];i.dir&&!i.ort?e.reverse():i.ort&&!i.dir&&(r.reverse(),o.reverse());var s,l=n.key.replace("Arrow",""),A=l===o[0],c=l===o[1],u=l===r[0]||l===e[0]||A,d=l===r[1]||l===e[1]||c,p=l===a[0],f=l===a[1];if(!(u||d||p||f))return!0;if(n.preventDefault(),d||u){var h=u?0:1,C=mn(t)[h];if(null===C)return!1;!1===C&&(C=w.getDefaultStep(k[t],u,i.keyboardDefaultStep)),C*=c||A?i.keyboardPageMultiplier:i.keyboardMultiplier,C=Math.max(C,1e-7),C*=u?-1:1,s=U[t]+C}else s=f?i.spectrum.xVal[i.spectrum.xVal.length-1]:i.spectrum.xVal[0];return pn(t,w.toStepping(s),!0,!0),sn("slide",t),sn("update",t),sn("change",t),sn("set",t),!1}(n,t)}))),void 0!==i.handleAttributes){var o=i.handleAttributes[t];Object.keys(o).forEach((function(n){r.setAttribute(n,o[n])}))}return r.setAttribute("role","slider"),r.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===t?c(r,i.cssClasses.handleLower):t===i.handles-1&&c(r,i.cssClasses.handleUpper),e}function V(n,t){return!!t&&L(n,i.cssClasses.connect)}function O(n,t){return!(!i.tooltips||!i.tooltips[t])&&L(n.firstChild,i.cssClasses.tooltip)}function j(){return E.hasAttribute("disabled")}function F(n){return f[n].hasAttribute("disabled")}function W(){g&&(an("update"+y),g.forEach((function(n){n&&e(n)})),g=null)}function Y(){W(),g=f.map(O),on("update"+y,(function(n,t,e){if(g&&i.tooltips&&!1!==g[t]){var r=n[t];!0!==i.tooltips[t]&&(r=i.tooltips[t].to(e[t])),g[t].innerHTML=r}}))}function H(n,t){return n.map((function(n){return w.fromStepping(t?w.getStep(n):n)}))}function T(t){var e,r=function(t){if(t.mode===n.PipsMode.Range||t.mode===n.PipsMode.Steps)return w.xVal;if(t.mode===n.PipsMode.Count){if(t.values<2)throw new Error("noUiSlider: 'values' (>= 2) required for mode 'count'.");for(var e=t.values-1,r=100/e,o=[];e--;)o[e]=e*r;return o.push(100),H(o,t.stepped)}return t.mode===n.PipsMode.Positions?H(t.values,t.stepped):t.mode===n.PipsMode.Values?t.stepped?t.values.map((function(n){return w.fromStepping(w.getStep(w.toStepping(n)))})):t.values:[]}(t),o={},i=w.xVal[0],a=w.xVal[w.xVal.length-1],s=!1,l=!1,A=0;return(e=r.slice().sort((function(n,t){return n-t})),r=e.filter((function(n){return!this[n]&&(this[n]=!0)}),{}))[0]!==i&&(r.unshift(i),s=!0),r[r.length-1]!==a&&(r.push(a),l=!0),r.forEach((function(e,i){var a,c,u,d,p,f,h,C,g,m,b=e,x=r[i+1],v=t.mode===n.PipsMode.Steps;for(v&&(a=w.xNumSteps[i]),a||(a=x-b),void 0===x&&(x=b),a=Math.max(a,1e-7),c=b;c<=x;c=Number((c+a).toFixed(7))){for(C=(p=(d=w.toStepping(c))-A)/(t.density||1),m=p/(g=Math.round(C)),u=1;u<=g;u+=1)o[(f=A+u*m).toFixed(5)]=[w.fromStepping(f),0];h=r.indexOf(c)>-1?n.PipsType.LargeValue:v?n.PipsType.SmallValue:n.PipsType.NoValue,!i&&s&&c!==x&&(h=0),c===x&&l||(o[d.toFixed(5)]=[c,h]),A=d}})),o}function q(t,e,r){var o,a,s=z.createElement("div"),l=((o={})[n.PipsType.None]="",o[n.PipsType.NoValue]=i.cssClasses.valueNormal,o[n.PipsType.LargeValue]=i.cssClasses.valueLarge,o[n.PipsType.SmallValue]=i.cssClasses.valueSub,o),A=((a={})[n.PipsType.None]="",a[n.PipsType.NoValue]=i.cssClasses.markerNormal,a[n.PipsType.LargeValue]=i.cssClasses.markerLarge,a[n.PipsType.SmallValue]=i.cssClasses.markerSub,a),u=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],d=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];function p(n,t){var e=t===i.cssClasses.value,r=e?l:A;return t+" "+(e?u:d)[i.ort]+" "+r[n]}return c(s,i.cssClasses.pips),c(s,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(t).forEach((function(o){!function(t,o,a){if((a=e?e(o,a):a)!==n.PipsType.None){var l=L(s,!1);l.className=p(a,i.cssClasses.marker),l.style[i.style]=t+"%",a>n.PipsType.NoValue&&((l=L(s,!1)).className=p(a,i.cssClasses.value),l.setAttribute("data-value",String(o)),l.style[i.style]=t+"%",l.innerHTML=String(r.to(o)))}}(o,t[o][0],t[o][1])})),s}function I(){C&&(e(C),C=null)}function R(n){I();var t=T(n),e=n.filter,r=n.format||{to:function(n){return String(Math.round(n))}};return C=E.appendChild(q(t,e,r))}function X(){var n=p.getBoundingClientRect(),t="offset"+["Width","Height"][i.ort];return 0===i.ort?n.width||p[t]:n.height||p[t]}function Q(n,t,e,r){var o=function(o){var a,s,l=function(n,t,e){var r=0===n.type.indexOf("touch"),o=0===n.type.indexOf("mouse"),i=0===n.type.indexOf("pointer"),a=0,s=0;if(0===n.type.indexOf("MSPointer")&&(i=!0),"mousedown"===n.type&&!n.buttons&&!n.touches)return!1;if(r){var l=function(t){var r=t.target;return r===e||e.contains(r)||n.composed&&n.composedPath().shift()===e};if("touchstart"===n.type){var A=Array.prototype.filter.call(n.touches,l);if(A.length>1)return!1;a=A[0].pageX,s=A[0].pageY}else{var c=Array.prototype.find.call(n.changedTouches,l);if(!c)return!1;a=c.pageX,s=c.pageY}}return t=t||d(z),(o||i)&&(a=n.clientX+t.x,s=n.clientY+t.y),n.pageOffset=t,n.points=[a,s],n.cursor=o||i,n}(o,r.pageOffset,r.target||t);return!!l&&!(j()&&!r.doNotReject)&&(a=E,s=i.cssClasses.tap,!((a.classList?a.classList.contains(s):new RegExp("\\b"+s+"\\b").test(a.className))&&!r.doNotReject))&&!(n===x.start&&void 0!==l.buttons&&l.buttons>1)&&(!r.hover||!l.buttons)&&(v||l.preventDefault(),l.calcPoint=l.points[i.ort],void e(l,r))},a=[];return n.split(" ").forEach((function(n){t.addEventListener(n,o,!!v&&{passive:!0}),a.push([n,o])})),a}function $(n){var t,e,r,o,a,l,A=100*(n-(t=p,e=i.ort,r=t.getBoundingClientRect(),o=t.ownerDocument,a=o.documentElement,l=d(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(l.x=0),e?r.top+l.y-a.clientTop:r.left+l.x-a.clientLeft))/X();return A=s(A),i.dir?100-A:A}function J(n,t){"mouseout"===n.type&&"HTML"===n.target.nodeName&&null===n.relatedTarget&&nn(n,t)}function K(n,t){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===n.buttons&&0!==t.buttonsProperty)return nn(n,t);var e=(i.dir?-1:1)*(n.calcPoint-t.startCalcPoint);cn(e>0,100*e/t.baseSize,t.locations,t.handleNumbers,t.connect)}function nn(n,t){t.handle&&(u(t.handle,i.cssClasses.active),_-=1),t.listeners.forEach((function(n){G.removeEventListener(n[0],n[1])})),0===_&&(u(E,i.cssClasses.drag),dn(),n.cursor&&(M.style.cursor="",M.removeEventListener("selectstart",o))),i.events.smoothSteps&&(t.handleNumbers.forEach((function(n){pn(n,k[n],!0,!0,!1,!1)})),t.handleNumbers.forEach((function(n){sn("update",n)}))),t.handleNumbers.forEach((function(n){sn("change",n),sn("set",n),sn("end",n)}))}function tn(n,t){if(!t.handleNumbers.some(F)){var e;1===t.handleNumbers.length&&(e=f[t.handleNumbers[0]].children[0],_+=1,c(e,i.cssClasses.active)),n.stopPropagation();var r=[],a=Q(x.move,G,K,{target:n.target,handle:e,connect:t.connect,listeners:r,startCalcPoint:n.calcPoint,baseSize:X(),pageOffset:n.pageOffset,handleNumbers:t.handleNumbers,buttonsProperty:n.buttons,locations:k.slice()}),s=Q(x.end,G,nn,{target:n.target,handle:e,listeners:r,doNotReject:!0,handleNumbers:t.handleNumbers}),l=Q("mouseout",G,J,{target:n.target,handle:e,listeners:r,doNotReject:!0,handleNumbers:t.handleNumbers});r.push.apply(r,a.concat(s,l)),n.cursor&&(M.style.cursor=getComputedStyle(n.target).cursor,f.length>1&&c(E,i.cssClasses.drag),M.addEventListener("selectstart",o,!1)),t.handleNumbers.forEach((function(n){sn("start",n)}))}}function en(n){n.stopPropagation();var t=$(n.calcPoint),e=function(n){var t=100,e=!1;return f.forEach((function(r,o){if(!F(o)){var i=k[o],a=Math.abs(i-n);(a<t||a<=t&&n>i||100===a&&100===t)&&(e=o,t=a)}})),e}(t);!1!==e&&(i.events.snap||a(E,i.cssClasses.tap,i.animationDuration),pn(e,t,!0,!0),dn(),sn("slide",e,!0),sn("update",e,!0),i.events.snap?tn(n,{handleNumbers:[e]}):(sn("change",e,!0),sn("set",e,!0)))}function rn(n){var t=$(n.calcPoint),e=w.getStep(t),r=w.fromStepping(e);Object.keys(P).forEach((function(n){"hover"===n.split(".")[0]&&P[n].forEach((function(n){n.call(bn,r)}))}))}function on(n,t){P[n]=P[n]||[],P[n].push(t),"update"===n.split(".")[0]&&f.forEach((function(n,t){sn("update",t)}))}function an(n){var t=n&&n.split(".")[0],e=t?n.substring(t.length):n;Object.keys(P).forEach((function(n){var r=n.split(".")[0],o=n.substring(r.length);t&&t!==r||e&&e!==o||function(n){return n===B||n===y}(o)&&e!==o||delete P[n]}))}function sn(n,t,e){Object.keys(P).forEach((function(r){var o=r.split(".")[0];n===o&&P[r].forEach((function(n){n.call(bn,U.map(i.format.to),t,U.slice(),e||!1,k.slice(),bn)}))}))}function ln(n,t,e,r,o,a,l){var A;return f.length>1&&!i.events.unconstrained&&(r&&t>0&&(A=w.getAbsoluteDistance(n[t-1],i.margin,!1),e=Math.max(e,A)),o&&t<f.length-1&&(A=w.getAbsoluteDistance(n[t+1],i.margin,!0),e=Math.min(e,A))),f.length>1&&i.limit&&(r&&t>0&&(A=w.getAbsoluteDistance(n[t-1],i.limit,!1),e=Math.min(e,A)),o&&t<f.length-1&&(A=w.getAbsoluteDistance(n[t+1],i.limit,!0),e=Math.max(e,A))),i.padding&&(0===t&&(A=w.getAbsoluteDistance(0,i.padding[0],!1),e=Math.max(e,A)),t===f.length-1&&(A=w.getAbsoluteDistance(100,i.padding[1],!0),e=Math.min(e,A))),l||(e=w.getStep(e)),!((e=s(e))===n[t]&&!a)&&e}function An(n,t){var e=i.ort;return(e?t:n)+", "+(e?n:t)}function cn(n,t,e,r,o){var a=e.slice(),s=r[0],l=i.events.smoothSteps,A=[!n,n],c=[n,!n];r=r.slice(),n&&r.reverse(),r.length>1?r.forEach((function(n,e){var r=ln(a,n,a[n]+t,A[e],c[e],!1,l);!1===r?t=0:(t=r-a[n],a[n]=r)})):A=c=[!0];var u=!1;r.forEach((function(n,r){u=pn(n,e[n]+t,A[r],c[r],!1,l)||u})),u&&(r.forEach((function(n){sn("update",n),sn("slide",n)})),null!=o&&sn("drag",s))}function un(n,t){return i.dir?100-n-t:n}function dn(){S.forEach((function(n){var t=k[n]>50?-1:1,e=3+(f.length+t*n);f[n].style.zIndex=String(e)}))}function pn(n,t,e,r,o,a){return o||(t=ln(k,n,t,e,r,!1,a)),!1!==t&&(function(n,t){k[n]=t,U[n]=w.fromStepping(t);var e="translate("+An(un(t,0)-N+"%","0")+")";f[n].style[i.transformRule]=e,fn(n),fn(n+1)}(n,t),!0)}function fn(n){if(h[n]){var t=0,e=100;0!==n&&(t=k[n-1]),n!==h.length-1&&(e=k[n]);var r=e-t,o="translate("+An(un(t,r)+"%","0")+")",a="scale("+An(r/100,"1")+")";h[n].style[i.transformRule]=o+" "+a}}function hn(n,t){return null===n||!1===n||void 0===n?k[t]:("number"==typeof n&&(n=String(n)),!1!==(n=i.format.from(n))&&(n=w.toStepping(n)),!1===n||isNaN(n)?k[t]:n)}function Cn(n,t,e){var r=l(n),o=void 0===k[0];t=void 0===t||t,i.animate&&!o&&a(E,i.cssClasses.tap,i.animationDuration),S.forEach((function(n){pn(n,hn(r[n],n),!0,!1,e)}));var s=1===S.length?0:1;if(o&&w.hasNoSize()&&(e=!0,k[0]=0,S.length>1)){var A=100/(S.length-1);S.forEach((function(n){k[n]=n*A}))}for(;s<S.length;++s)S.forEach((function(n){pn(n,k[n],!0,!0,e)}));dn(),S.forEach((function(n){sn("update",n),null!==r[n]&&t&&sn("set",n)}))}function gn(n){if(void 0===n&&(n=!1),n)return 1===U.length?U[0]:U.slice(0);var t=U.map(i.format.to);return 1===t.length?t[0]:t}function mn(n){var t=k[n],e=w.getNearbySteps(t),r=U[n],o=e.thisStep.step,a=null;if(i.snap)return[r-e.stepBefore.startValue||null,e.stepAfter.startValue-r||null];!1!==o&&r+o>e.stepAfter.startValue&&(o=e.stepAfter.startValue-r),a=r>e.thisStep.startValue?e.thisStep.step:!1!==e.stepBefore.step&&r-e.stepBefore.highestStep,100===t?o=null:0===t&&(a=null);var s=w.countStepDecimals();return null!==o&&!1!==o&&(o=Number(o.toFixed(s))),null!==a&&!1!==a&&(a=Number(a.toFixed(s))),[a,o]}c(b=E,i.cssClasses.target),0===i.dir?c(b,i.cssClasses.ltr):c(b,i.cssClasses.rtl),0===i.ort?c(b,i.cssClasses.horizontal):c(b,i.cssClasses.vertical),c(b,"rtl"===getComputedStyle(b).direction?i.cssClasses.textDirectionRtl:i.cssClasses.textDirectionLtr),p=L(b,i.cssClasses.base),function(n,t){var e=L(t,i.cssClasses.connects);f=[],(h=[]).push(V(e,n[0]));for(var r=0;r<i.handles;r++)f.push(D(t,r)),S[r]=r,h.push(V(e,n[r+1]))}(i.connect,p),(m=i.events).fixed||f.forEach((function(n,t){Q(x.start,n.children[0],tn,{handleNumbers:[t]})})),m.tap&&Q(x.start,p,en,{}),m.hover&&Q(x.move,p,rn,{hover:!0}),m.drag&&h.forEach((function(n,t){if(!1!==n&&0!==t&&t!==h.length-1){var e=f[t-1],r=f[t],o=[n],a=[e,r],s=[t-1,t];c(n,i.cssClasses.draggable),m.fixed&&(o.push(e.children[0]),o.push(r.children[0])),m.dragAll&&(a=f,s=S),o.forEach((function(t){Q(x.start,t,tn,{handles:a,handleNumbers:s,connect:n})}))}})),Cn(i.start),i.pips&&R(i.pips),i.tooltips&&Y(),an("update"+B),on("update"+B,(function(n,t,e,r,o){S.forEach((function(n){var t=f[n],r=ln(k,n,0,!0,!0,!0),a=ln(k,n,100,!0,!0,!0),s=o[n],l=String(i.ariaFormat.to(e[n]));r=w.fromStepping(r).toFixed(1),a=w.fromStepping(a).toFixed(1),s=w.fromStepping(s).toFixed(1),t.children[0].setAttribute("aria-valuemin",r),t.children[0].setAttribute("aria-valuemax",a),t.children[0].setAttribute("aria-valuenow",s),t.children[0].setAttribute("aria-valuetext",l)}))}));var bn={destroy:function(){for(an(B),an(y),Object.keys(i.cssClasses).forEach((function(n){u(E,i.cssClasses[n])}));E.firstChild;)E.removeChild(E.firstChild);delete E.noUiSlider},steps:function(){return S.map(mn)},on,off:an,get:gn,set:Cn,setHandle:function(n,t,e,r){if(!((n=Number(n))>=0&&n<S.length))throw new Error("noUiSlider: invalid handle number, got: "+n);pn(n,hn(t,n),!0,!0,r),sn("update",n),e&&sn("set",n)},reset:function(n){Cn(i.start,n)},__moveHandles:function(n,t,e){cn(n,t,k,e)},options:A,updateOptions:function(n,t){var e=gn(),o=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];o.forEach((function(t){void 0!==n[t]&&(A[t]=n[t])}));var a=Z(A);o.forEach((function(t){void 0!==n[t]&&(i[t]=a[t])})),w=a.spectrum,i.margin=a.margin,i.limit=a.limit,i.padding=a.padding,i.pips?R(i.pips):I(),i.tooltips?Y():W(),k=[],Cn(r(n.start)?n.start:e,t)},target:E,removePips:I,removeTooltips:W,getPositions:function(){return k.slice()},getTooltips:function(){return g},getOrigins:function(){return f},pips:R};return bn}function $(n,t){if(!n||!n.nodeName)throw new Error("noUiSlider: create requires a single element, got: "+n);if(n.noUiSlider)throw new Error("noUiSlider: Slider was already initialized.");var e=Q(n,Z(t),t);return n.noUiSlider=e,e}var J={__spectrum:x,cssClasses:E,create:$};n.create=$,n.cssClasses=E,n.default=J,Object.defineProperty(n,"__esModule",{value:!0})}(t)},404:(n,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>g});var r=e(379),o=e.n(r),i=e(795),a=e.n(i),s=e(569),l=e.n(s),A=e(565),c=e.n(A),u=e(216),d=e.n(u),p=e(589),f=e.n(p),h=e(192),C={};C.styleTagTransform=f(),C.setAttributes=c(),C.insert=l().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=d(),o()(h.Z,C);const g=h.Z&&h.Z.locals?h.Z.locals:void 0},379:n=>{"use strict";var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var l=n[s],A=r.base?l[0]+r.base:l[0],c=i[A]||0,u="".concat(A," ").concat(c);i[A]=c+1;var d=e(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var f=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=e(i[a]);t[s].references--}for(var l=r(n,o),A=0;A<i.length;A++){var c=e(i[A]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{"use strict";n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},295:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cart=void 0,t.cart=function(n){const t=n.target.closest("div"),e=document.querySelector(".header__count");t.classList.contains("goods")&&t.classList.toggle("addCart");const r=document.getElementsByClassName("addCart");e&&(+r.length>20?alert("Sorry, the cart is full"):e.textContent=String(+r.length))}},412:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.filters=void 0;const r=e(754),o=e(301),i={brand:[],color:[],resolution:[],condition:[]},a=document.querySelector(".filter__brand-hp"),s=document.querySelector(".filter__brand-dell"),l=document.querySelector(".filter__brand-lenovo"),A=document.querySelector(".filter__color-black"),c=document.querySelector(".filter__color-silver"),u=document.querySelector(".filter__color-white"),d=document.querySelector(".filter__resolution-small"),p=document.querySelector(".filter__resolution-middle"),f=document.querySelector(".filter__resolution-large"),h=document.querySelector(".filter__condition");function C(n){return(!i.brand.length||i.brand.includes(n.brand))&&(!i.color.length||i.color.includes(n.color))&&(!i.resolution.length||i.resolution.includes(n.resolution))&&(!i.condition.length||i.condition.includes(n.condition))}function g(n,t,e,r){n.classList.toggle(r),n.classList.contains(r)?i[t].push(e):i[t]=i[t].filter((n=>n!==e))}t.filters=function(n){const t=n.target;t===a&&g(a,"brand","HP","active"),t===s&&g(s,"brand","Dell","active"),t===l&&g(l,"brand","Lenovo","active"),t===A&&g(A,"color","black","active"),t===c&&g(c,"color","silver","active"),t===u&&g(u,"color","white","active"),t===d&&g(d,"resolution","1366х768","active"),t===p&&g(p,"resolution","1920×1080","active"),t===f&&g(f,"resolution","2560×1440","active"),t===h&&g(h,"condition","used","active");const e=o.data.filter(C);(0,r.createGoods)(e),0===e.length&&alert("Sorry, the goods not found!")}},754:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createGoods=void 0,t.createGoods=function(n){const t=document.querySelector(".main__goods");if(t){t.innerHTML="";for(let e=0;e<n.length;e+=1)t.innerHTML+=`\n        <div class="goods">\n          <h2 class="goods-name">${n[e].name}</h2>\n          <img class="goods-photo" src="./assets/img/${n[e].num}.jpg" alt="laptop" height="110">\n          <p class="goods-brand">Brand: ${n[e].brand}</p>\n          <p class="goods-year">Year: ${n[e].year}</p>\n          <p class="goods-count">Count: ${n[e].count}</p>\n          <p class="goods-country">Color: ${n[e].color}</p>\n          <p class="goods-inch">Inch: ${n[e].inch}"</p>\n          <p class="goods-resolution">Resolution: ${n[e].resolution}</p>\n          <p class="goods-year">Condition: ${n[e].condition}</p>\n          <p class="goods-price">Price: $${n[e].price}</p>\n        </div>\n        `}}},199:(n,t,e)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SortFilter=void 0;const r=e(301),o=e(754);t.SortFilter=function(){const n=document.querySelector("#sort"),t=[...r.data];"sort-by-name-down"===n.value&&t.sort((function(n,t){return n.name.toLowerCase()<t.name.toLowerCase()?-1:n.name.toLowerCase()>t.name.toLowerCase()?1:0})),"sort-by-name-up"===n.value&&t.sort((function(n,t){return t.name.toLowerCase()<n.name.toLowerCase()?-1:t.name.toLowerCase()>n.name.toLowerCase()?1:0})),"sort-by-year-up"===n.value&&t.sort(((n,t)=>+n.year-+t.year)),"sort-by-year-down"===n.value&&t.sort(((n,t)=>+t.year-+n.year)),(0,o.createGoods)(t)}},301:(n,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.data=void 0,t.data=[{num:"1",name:"Dell Latitude E7280",count:"5",year:"2016",color:"black",resolution:"1920×1080",inch:"12.5",brand:"Dell",condition:"used",price:"400"},{num:"2",name:"HP X360 G2",count:"2",year:"2015",color:"silver",resolution:"1920×1080",inch:"13.3",brand:"HP",condition:"used",price:"450"},{num:"3",name:"HP ProBook 645 G4",count:"3",year:"2017",color:"silver",resolution:"1920×1080",inch:"14",brand:"HP",condition:"used",price:"500"},{num:"4",name:"Lenovo ThinkPad T570",count:"6",year:"2016",color:"black",resolution:"1920×1080",inch:"15.6",brand:"Lenovo",condition:"used",price:"550"},{num:"5",name:"Dell M4800",count:"2",year:"2015",color:"black",resolution:"1920×1080",inch:"15.6",brand:"Dell",condition:"used",price:"560"},{num:"6",name:"Lenovo ThinkPad T530",count:"2",year:"2012",color:"black",resolution:"1366х768",inch:"15.6",brand:"Lenovo",condition:"used",price:"280"},{num:"7",name:"Dell Latitude E7270",count:"5",year:"2013",color:"black",resolution:"1366х768",inch:"12.5",brand:"Dell",condition:"used",price:"420"},{num:"8",name:"Dell Latitude E5430",count:"2",year:"2012",color:"black",resolution:"1366х768",inch:"14",brand:"Dell",condition:"used",price:"250"},{num:"9",name:"Lenovo Legion 5 Pro",count:"12",year:"2020",color:"white",resolution:"2560×1440",inch:"16",brand:"Lenovo",condition:"new",price:"1400"},{num:"10",name:"Lenovo IdeaPad 3",count:"7",year:"2019",color:"silver",resolution:"1920×1080",inch:"15.6",brand:"Lenovo",condition:"new",price:"600"},{num:"11",name:"Dell Latitude E5430",count:"2",year:"2012",color:"black",resolution:"1366х768",inch:"14",brand:"Dell",condition:"used",price:"200"},{num:"12",name:"Lenovo T520",count:"7",year:"2019",color:"black",resolution:"1366х768",inch:"15.6",brand:"Lenovo",condition:"used",price:"250"},{num:"13",name:"HP ProBook 450 G2",count:"4",year:"2014",color:"silver",resolution:"1366х768",inch:"15.6",brand:"HP",condition:"used",price:"270"},{num:"14",name:"HP 850 G1",count:"7",year:"2015",color:"silver",resolution:"1366х768",inch:"15.6",brand:"HP",condition:"used",price:"300"},{num:"15",name:"Lenovo T540p",count:"3",year:"2014",color:"black",resolution:"1366х768",inch:"15.6",brand:"Lenovo",condition:"used",price:"400"},{num:"16",name:"HP EliteBook 850 G2",count:"3",year:"2016",color:"silver",resolution:"1920х1080",inch:"15.6",brand:"HP",condition:"used",price:"420"},{num:"17",name:"HP ProBook 645 G4",count:"4",year:"2017",color:"silver",resolution:"1920х1080",inch:"14",brand:"HP",condition:"used",price:"400"},{num:"18",name:"HP 745 G5",count:"3",year:"2017",color:"silver",resolution:"1366х768",inch:"14",brand:"HP",condition:"used",price:"450"},{num:"19",name:"Lenovo T560",count:"4",year:"2017",color:"black",resolution:"1920х1080",inch:"15.6",brand:"Lenovo",condition:"used",price:"500"},{num:"20",name:"Lenovo Yoga X13",count:"5",year:"2019",color:"black",resolution:"1920х1080",inch:"13.3",brand:"Lenovo",condition:"used",price:"750"},{num:"21",name:"Lenovo P50",count:"3",year:"2017",color:"black",resolution:"1920х1080",inch:"15.6",brand:"Lenovo",condition:"used",price:"750"}]},607:function(n,t,e){"use strict";var r,o,i=this&&this.__createBinding||(Object.create?function(n,t,e,r){void 0===r&&(r=e);var o=Object.getOwnPropertyDescriptor(t,e);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[e]}}),Object.defineProperty(n,r,o)}:function(n,t,e,r){void 0===r&&(r=e),n[r]=t[e]}),a=this&&this.__setModuleDefault||(Object.create?function(n,t){Object.defineProperty(n,"default",{enumerable:!0,value:t})}:function(n,t){n.default=t}),s=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var t={};if(null!=n)for(var e in n)"default"!==e&&Object.prototype.hasOwnProperty.call(n,e)&&i(t,n,e);return a(t,n),t};Object.defineProperty(t,"__esModule",{value:!0}),e(404);const l=e(754),A=e(301),c=e(412),u=e(295),d=e(199),p=document.querySelector("#sort"),f=document.querySelector(".filters__wrapper"),h=document.querySelector(".search__input"),C=document.querySelector(".filter__reset");(0,l.createGoods)(A.data),h&&(h.oninput=function(n){const t=document.querySelectorAll(".goods"),e=document.querySelectorAll(".goods-name"),r=n.target.value;for(let n=0;n<e.length;n++)-1==e[n].innerText.toLowerCase().search(r.toLowerCase())?t[n].classList.add("goods-hide"):t[n].classList.remove("goods-hide")});const g=s(e(211)),m=document.getElementById("slider-year"),b=document.getElementById("slider-screen");if(m){g.create(m,{start:[2012,2020],connect:!0,step:1,range:{min:2012,max:2020}});const n=document.getElementById("input-year-from"),t=document.getElementById("input-year-to"),e=[n,t];null===(r=m.noUiSlider)||void 0===r||r.on("update",(function(r,o){e[o].value=String(Math.round(Number(r[o])));const i=[];for(let e=0;e<A.data.length;e++)+A.data[e].year>+n.value&&+A.data[e].year<+t.value&&i.push(A.data[e]);(0,l.createGoods)(i)}))}if(b){g.create(b,{start:[12,17],connect:!0,step:.5,range:{min:12,max:17}});const n=document.getElementById("input-screen-from"),t=document.getElementById("input-screen-to"),e=[n,t];null===(o=b.noUiSlider)||void 0===o||o.on("update",(function(r,o){e[o].value=String(Math.round(Number(r[o])));const i=[];for(let e=0;e<A.data.length;e++)+A.data[e].inch>+n.value&&+A.data[e].inch<+t.value&&i.push(A.data[e]);(0,l.createGoods)(i)}))}document.addEventListener("click",u.cart),null==C||C.addEventListener("click",(function(){location.reload()})),null==p||p.addEventListener("change",d.SortFilter),null==f||f.addEventListener("click",c.filters)}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return n[r].call(i.exports,i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.nc=void 0,e(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bEIsRUFBRytsQixJQUM1QkEsR0NMUkosRUFBb0J2WSxFQUFJLENBQUM5UixFQUFTMnFCLEtBQ2pDLElBQUksSUFBSXRaLEtBQU9zWixFQUNYTixFQUFvQmhvQixFQUFFc29CLEVBQVl0WixLQUFTZ1osRUFBb0Job0IsRUFBRXJDLEVBQVNxUixJQUM1RTdPLE9BQU9pUixlQUFlelQsRUFBU3FSLEVBQUssQ0FBRXVaLFlBQVksRUFBTWxYLElBQUtpWCxFQUFXdFosTUNKM0VnWixFQUFvQmhvQixFQUFJLENBQUNxaUIsRUFBS21HLElBQVVyb0IsT0FBT0MsVUFBVXFvQixlQUFlL29CLEtBQUsyaUIsRUFBS21HLEdDQ2xGUixFQUFvQjVZLEVBQUt6UixJQUNILG9CQUFYd0IsUUFBMEJBLE9BQU91cEIsYUFDMUN2b0IsT0FBT2lSLGVBQWV6VCxFQUFTd0IsT0FBT3VwQixZQUFhLENBQUU3b0IsTUFBTyxXQUU3RE0sT0FBT2lSLGVBQWV6VCxFQUFTLGFBQWMsQ0FBRWtDLE9BQU8sS0NMdkRtb0IsRUFBb0JXLFFBQUsxa0IsRUNHQytqQixFQUFvQixNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vT25saW5lLXN0b3JlLy4vc3JjL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vT25saW5lLXN0b3JlLy4vc3JjL3N0eWxlL25vdWlzbGlkZXIuY3NzIiwid2VicGFjazovL09ubGluZS1zdG9yZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vT25saW5lLXN0b3JlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vT25saW5lLXN0b3JlLy4vbm9kZV9tb2R1bGVzL25vdWlzbGlkZXIvZGlzdC9ub3Vpc2xpZGVyLmpzIiwid2VicGFjazovL09ubGluZS1zdG9yZS8uL3NyYy9zdHlsZS5zY3NzPzc1YmEiLCJ3ZWJwYWNrOi8vT25saW5lLXN0b3JlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL09ubGluZS1zdG9yZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vT25saW5lLXN0b3JlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL09ubGluZS1zdG9yZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9PbmxpbmUtc3RvcmUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9PbmxpbmUtc3RvcmUvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9PbmxpbmUtc3RvcmUvLi9zcmMvY29tcG9uZW50cy9jYXJ0LnRzIiwid2VicGFjazovL09ubGluZS1zdG9yZS8uL3NyYy9jb21wb25lbnRzL2ZsbHRlcnMudHMiLCJ3ZWJwYWNrOi8vT25saW5lLXN0b3JlLy4vc3JjL2NvbXBvbmVudHMvZ29vZHMudHMiLCJ3ZWJwYWNrOi8vT25saW5lLXN0b3JlLy4vc3JjL2NvbXBvbmVudHMvc29ydEZpbHRlci50cyIsIndlYnBhY2s6Ly9PbmxpbmUtc3RvcmUvLi9zcmMvZGF0YS50cyIsIndlYnBhY2s6Ly9PbmxpbmUtc3RvcmUvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vT25saW5lLXN0b3JlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL09ubGluZS1zdG9yZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9PbmxpbmUtc3RvcmUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL09ubGluZS1zdG9yZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL09ubGluZS1zdG9yZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL09ubGluZS1zdG9yZS93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vT25saW5lLXN0b3JlL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS9ub3Vpc2xpZGVyLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmhlYWRlcl9fY29udGFpbmVye3dpZHRoOjEwMCU7bWluLWhlaWdodDo3MHB4O2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXJ9LmhlYWRlcl9fbG9nb3tjb2xvcjp2YXIoLS1jb2xvci1vcmFuZ2UpO2ZvbnQtc2l6ZTozMHB4O2ZvbnQtd2VpZ2h0OmJvbGR9LmhlYWRlcl9fY2FydHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47YWxpZ24taXRlbXM6Y2VudGVyfS5oZWFkZXJfX2NvdW50e2ZvbnQtd2VpZ2h0OmJvbGQ7Y29sb3I6dmFyKC0tY29sb3Itb3JhbmdlKX0uc2VhcmNoe2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXJ9LnNlYXJjaF9faW5wdXR7d2lkdGg6MzgwcHg7aGVpZ2h0OjQwcHg7bWFyZ2luLXJpZ2h0OjMwcHg7cGFkZGluZzowcHggMHB4IDBweCAzMHB4O2JvcmRlci1yYWRpdXM6MjBweDtib3JkZXI6MXB4IHNvbGlkICNmZmNhOTQ7Y29sb3I6dmFyKC0tY29sb3ItYmFja2dyb3VuZmQpO2ZvbnQtc2l6ZToxOHB4O2JhY2tncm91bmQtY29sb3I6I2ZmY2E5NH0ubWFpbl9fZ29vZHN7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmZsZXg7ZmxleC13cmFwOndyYXA7Z2FwOjMwcHg7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uZ29vZHN7YmFja2dyb3VuZC1jb2xvcjojZmZmO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47d2lkdGg6MjAwcHg7aGVpZ2h0OjM1MHB4O3BhZGRpbmc6MTVweDtib3JkZXItcmFkaXVzOjEwcHg7Y3Vyc29yOnBvaW50ZXJ9Lmdvb2RzIHB7bWFyZ2luLWJvdHRvbTo1cHh9Lmdvb2RzLW5hbWV7Zm9udC13ZWlnaHQ6Ym9sZDt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW46MCBhdXRvfS5nb29kcy1idG57bWFyZ2luLXRvcDoxMHB4O2FsaWduLXNlbGY6Y2VudGVyfS5nb29kcy1waG90b3ttYXJnaW46MTBweCBhdXRvO21heC13aWR0aDoxMDAlfS5nb29kcy1oaWRle2Rpc3BsYXk6bm9uZX0uYWRkQ2FydHtib3JkZXI6MnB4IHNvbGlkICM5OTRkMDB9LmZvb3RlcnttaW4taGVpZ2h0OjMwcHg7Y29sb3I6I2ZmY2E5NH0uZm9vdGVyX19jb250YWluZXJ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcn0uZm9vdGVyX19sZWZ0IGF7Y29sb3I6I2ZmY2E5NDt0ZXh0LWRlY29yYXRpb246bm9uZX0uZm9vdGVyX19yaWdodHtoZWlnaHQ6NDVweDt3aWR0aDo5MHB4fS5mb290ZXJfX3JpZ2h0IGltZ3ttYXgtd2lkdGg6MTAwJX0uZm9vdGVyX19yaWdodCBhe2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJX0ubWFpbntiYWNrZ3JvdW5kLWNvbG9yOiMxOTJmMmR9Lm1haW5fX2NvbnRhaW5lcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59Lm1haW5fX2ZpbHRlcnN7ZmxleDoxIDEgNDAwcHg7YWxpZ24tc2VsZjpmbGV4LXN0YXJ0fS5maWx0ZXJzX19zb3J0e2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZy10b3A6MjBweDtwYWRkaW5nLWJvdHRvbTo0MHB4fS5maWx0ZXJzX19zZWxlY3R7bWFyZ2luLWxlZnQ6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOjEwcHg7Ym9yZGVyOjA7Ym9yZGVyLXJhZGl1czozMHB4O2ZvbnQtd2VpZ2h0Om5vcm1hbDtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxNHB4fS5maWx0ZXJzX19vcHRpb257Y29sb3I6IzEyMWMxZX0udGl0bGV7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZToyMHB4O2xpbmUtaGVpZ2h0OjIycHh9LmZpbHRlcl9fYm94e21hcmdpbi1ib3R0b206MzBweDtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2dhcDoxNXB4fS5maWx0ZXJfX2J1dHRvbntwYWRkaW5nOjIwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlci1yYWRpdXM6MTVweH0uZmlsdGVyX19jb2xvci1ibGFja3tiYWNrZ3JvdW5kLWNvbG9yOiMwMDB9LmZpbHRlcl9fY29sb3Itc2lsdmVye2JhY2tncm91bmQtY29sb3I6Izc3N30uZmlsdGVyX19jb2xvci13aGl0ZXtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjIpfS5maWx0ZXItcmFuZ2V7bWluLXdpZHRoOjM1MHB4fS5maWx0ZXItcmFuZ2VfX2JveHtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmZpbHRlci1yYW5nZV9fd3JhcHBlcntwYWRkaW5nOjVweDtjb2xvcjojZDE2MzQzICFpbXBvcnRhbnR9LmZpbHRlci1yYW5nZV9faW5wdXR7cGFkZGluZzo1cHggMTBweDt0ZXh0LWFsaWduOnJpZ2h0O2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwwKSAhaW1wb3J0YW50fS5maWx0ZXItcmFuZ2VfX2lucHV0X2xlZnR7dGV4dC1hbGlnbjpsZWZ0fS5zbGlkZXItc2NyZWVue21hcmdpbjozMHB4IDB9LnNsaWRlci13cmFwcGVye3BhZGRpbmc6MTVweCAzMHB4fSNzbGlkZXJ7Ym9yZGVyLXJhZGl1czoyNXB4fSNzbGlkZXItMntib3JkZXItcmFkaXVzOjI1cHh9Lm5vVWktaGFuZGxle3dpZHRoOjIzcHggIWltcG9ydGFudDtoZWlnaHQ6MjNweCAhaW1wb3J0YW50O2JvcmRlci1yYWRpdXM6NTAlICFpbXBvcnRhbnR9Lm5vVWktaGFuZGxlOjphZnRlciwubm9VaS1oYW5kbGU6OmJlZm9yZXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudH0ubm9VaS10YXJnZXR7aGVpZ2h0OjEycHggIWltcG9ydGFudH0ubm9VaS1iYXNle2hlaWdodDoxMnB4ICFpbXBvcnRhbnR9Lm5vVWktY29ubmVjdHN7aGVpZ2h0OjEycHggIWltcG9ydGFudH0ubm9VaS1jb25uZWN0e2JhY2tncm91bmQ6IzEyMWMxZSAhaW1wb3J0YW50O2hlaWdodDoxMnB4fTpyb290ey0tY29sb3ItYmFja2dyb3VuZmQ6ICMxMjFjMWU7LS1jb2xvci1vcmFuZ2U6ICNmZmNhOTR9KntwYWRkaW5nOjBweDttYXJnaW46MHB4O2JvcmRlcjowcHg7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fSosKjpiZWZvcmUsKjphZnRlcnstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3h9OmZvY3VzLDphY3RpdmV7b3V0bGluZTpub25lfWE6Zm9jdXMsYTphY3RpdmV7b3V0bGluZTpub25lfWFzaWRlLG5hdixmb290ZXIsaGVhZGVyLHNlY3Rpb257ZGlzcGxheTpibG9ja31odG1sLGJvZHl7aGVpZ2h0OjEwMCV9aW5wdXQ6Oi1tcy1jbGVhcntkaXNwbGF5Om5vbmV9YnV0dG9ue2N1cnNvcjpwb2ludGVyfWJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcntwYWRkaW5nOjA7Ym9yZGVyOjB9YSxhOnZpc2l0ZWR7dGV4dC1kZWNvcmF0aW9uOm5vbmV9YTpob3Zlcnt0ZXh0LWRlY29yYXRpb246bm9uZX11bCBsaXtsaXN0LXN0eWxlOm5vbmV9aW1ne3ZlcnRpY2FsLWFsaWduOnRvcH1oMSxoMixoMyxoNCxoNSxoNntmb250LXdlaWdodDppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0fWF7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDApfWJ1dHRvbjpmb2N1c3tvdXRsaW5lLXN0eWxlOm5vbmV9YnV0dG9uOmFjdGl2ZSxidXR0b246aG92ZXIsYnV0dG9uOmZvY3Vze291dGxpbmU6MDtvdXRsaW5lLW9mZnNldDowfWJvZHl7Zm9udC1mYW1pbHk6c2Fucy1zZXJpZjtmb250LXNpemU6MTVweDtmb250LXdlaWdodDo0MDA7Y29sb3I6IzU0NTQ1NDtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWNvbG9yLWJhY2tncm91bmZkKX0ud3JhcHBlcnttaW4taGVpZ2h0OjEwMHZoO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59Lm1haW57ZmxleDoxIDEgYXV0bztkaXNwbGF5OmZsZXg7Z2FwOjIwcHg7cGFkZGluZzoyMHB4IDA7YmFja2dyb3VuZC1jb2xvcjojZmZjYTk0fVtjbGFzcyo9X19jb250YWluZXJde21heC13aWR0aDoxMjAwcHg7bWFyZ2luOjAgYXV0bztwYWRkaW5nOjAgMjBweH1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUvX2hlYWRlci5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUvX2dvb2RzLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS9fZm9vdGVyLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS9fZmlsdGVycy5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFRSxtQkFDRSxVQUFBLENBQ0EsZUFBQSxDQUNBLFlBQUEsQ0FDQSw2QkFBQSxDQUNBLGtCQUFBLENBR0YsY0FDRSx5QkFBQSxDQUNBLGNBQUEsQ0FDQSxnQkFBQSxDQUdGLGNBQ0UsWUFBQSxDQUNBLDZCQUFBLENBQ0Esa0JBQUEsQ0FHRixlQUNFLGdCQUFBLENBQ0EseUJBQUEsQ0FJSixRQUNFLFlBQUEsQ0FDQSxrQkFBQSxDQUVBLGVBQ0UsV0FBQSxDQUNBLFdBQUEsQ0FDQSxpQkFBQSxDQUNBLHdCQUFBLENBQ0Esa0JBQUEsQ0FDQSx3QkFBQSxDQUNBLDhCQUFBLENBQ0EsY0FBQSxDQUNBLHdCQUFBLENDekNKLGFBQ0UsVUFBQSxDQUNBLFdBQUEsQ0FDQSxZQUFBLENBQ0EsY0FBQSxDQUNBLFFBQUEsQ0FDQSxzQkFBQSxDQUlGLE9BQ0UscUJBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FFQSxXQUFBLENBQ0EsWUFBQSxDQUNBLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLGNBQUEsQ0FDQSxTQUNFLGlCQUFBLENBSUosWUFDRSxnQkFBQSxDQUNBLGlCQUFBLENBQ0EsYUFBQSxDQUdGLFdBQ0UsZUFBQSxDQUNBLGlCQUFBLENBR0YsYUFDRSxnQkFBQSxDQUNBLGNBQUEsQ0FHRixZQUNFLFlBQUEsQ0FHRixTQUNFLHdCQUFBLENDOUNGLFFBQ0UsZUFBQSxDQUNBLGFBQUEsQ0FDQSxtQkFDRSxZQUFBLENBQ0EsNkJBQUEsQ0FDQSxrQkFBQSxDQUlKLGdCQUNFLGFBQUEsQ0FDQSxvQkFBQSxDQUdGLGVBQ0UsV0FBQSxDQUNBLFVBQUEsQ0FFRixtQkFDRSxjQUFBLENBR0YsaUJBQ0UsYUFBQSxDQUNBLFdBQUEsQ0FDQSxVQUFBLENDekJGLE1BQ0Usd0JBQUEsQ0FFQSxpQkFDRSxZQUFBLENBQ0EsNkJBQUEsQ0FHRixlQUNFLGNBQUEsQ0FDQSxxQkFBQSxDQVVGLGVBQ0UsWUFBQSxDQUNBLGtCQUFBLENBQ0EsZ0JBQUEsQ0FDQSxtQkFBQSxDQUdGLGlCQUNFLGdCQUFBLENBQ0EsaUJBQUEsQ0FDQSxZQUFBLENBRUEsUUFBQSxDQUNBLGtCQUFBLENBQ0Esa0JBQUEsQ0FDQSxjQUFBLENBQ0EsZ0JBQUEsQ0FJRixpQkFDRSxhQUFBLENBSUosT0FDRSxrQkFBQSxDQUNBLGNBQUEsQ0FDQSxnQkFBQSxDQUdGLGFBQ0Usa0JBQUEsQ0FDQSxZQUFBLENBQ0Esa0JBQUEsQ0FDQSxRQUFBLENBR0YsZ0JBQ0UsWUFBQSxDQUNBLHFCQUFBLENBQ0Esa0JBQUEsQ0FLQSxxQkFDRSxxQkFBQSxDQUdGLHNCQUNFLHFCQUFBLENBR0YscUJBQ0UscUJBQUEsQ0FJSixRQUNFLCtCQUFBLENBS0YsY0FDRSxlQUFBLENBR0YsbUJBQ0UsWUFBQSxDQUNBLDZCQUFBLENBR0YsdUJBQ0UsV0FBQSxDQUNBLHdCQUFBLENBR0YscUJBQ0UsZ0JBQUEsQ0FDQSxnQkFBQSxDQUNBLHlDQUFBLENBRUEsMEJBQ0UsZUFBQSxDQUdKLGVBQ0UsYUFBQSxDQUdGLGdCQUNFLGlCQUFBLENBR0YsUUFDRSxrQkFBQSxDQUdGLFVBQ0Usa0JBQUEsQ0FHRixhQUNFLHFCQUFBLENBQ0Esc0JBQUEsQ0FDQSw0QkFBQSxDQUdGLHlDQUNFLHVCQUFBLENBR0YsYUFDRSxzQkFBQSxDQUdGLFdBQ0Usc0JBQUEsQ0FFRixlQUNFLHNCQUFBLENBR0YsY0FDRSw2QkFBQSxDQUNBLFdBQUEsQ0M5SUYsTUFDQyw0QkFBQSxDQUNBLHVCQUFBLENBSUQsRUFDQyxXQUFBLENBQ0EsVUFBQSxDQUNBLFVBQUEsQ0FDQSw2QkFBQSxDQUNBLHFCQUFBLENBR0QsbUJBR0MsNkJBQUEsQ0FDQSxxQkFBQSxDQUdELGVBRUMsWUFBQSxDQUdELGlCQUVDLFlBQUEsQ0FHRCxnQ0FLQyxhQUFBLENBR0QsVUFFQyxXQUFBLENBR0QsaUJBQ0MsWUFBQSxDQUdELE9BQ0MsY0FBQSxDQUdELHlCQUNDLFNBQUEsQ0FDQSxRQUFBLENBR0QsWUFFQyxvQkFBQSxDQUdELFFBQ0Msb0JBQUEsQ0FHRCxNQUNDLGVBQUEsQ0FHRCxJQUNDLGtCQUFBLENBR0Qsa0JBTUMsbUJBQUEsQ0FDQSxpQkFBQSxDQUdELEVBQ0MsOEJBQUEsQ0FHRCxhQUNDLGtCQUFBLENBR0Qsd0NBR0MsU0FBQSxDQUNBLGdCQUFBLENBR0QsS0FDQyxzQkFBQSxDQUNBLGNBQUEsQ0FDQSxlQUFBLENBQ0EsYUFBQSxDQUNBLHlDQUFBLENBR0QsU0FFQyxnQkFBQSxDQUNBLFlBQUEsQ0FDQSxxQkFBQSxDQUdELE1BQ0MsYUFBQSxDQUNBLFlBQUEsQ0FDQSxRQUFBLENBQ0EsY0FBQSxDQUNBLHdCQUFBLENBR0QscUJBQ0MsZ0JBQUEsQ0FDQSxhQUFBLENBQ0EsY0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuaGVhZGVyIHtcXHJcXG5cXHJcXG4gICZfX2NvbnRhaW5lciB7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBtaW4taGVpZ2h0OiA3MHB4O1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAmX19sb2dvIHtcXHJcXG4gICAgY29sb3I6IHZhcigtLWNvbG9yLW9yYW5nZSk7XFxyXFxuICAgIGZvbnQtc2l6ZTogMzBweDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICB9XFxyXFxuXFxyXFxuICAmX19jYXJ0IHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgfVxcclxcblxcclxcbiAgJl9fY291bnQge1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgY29sb3I6IHZhcigtLWNvbG9yLW9yYW5nZSk7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi5zZWFyY2gge1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuXFxyXFxuICAmX19pbnB1dCB7XFxyXFxuICAgIHdpZHRoOiAzODBweDtcXHJcXG4gICAgaGVpZ2h0OiA0MHB4O1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IDMwcHg7XFxyXFxuICAgIHBhZGRpbmc6IDBweCAwcHggMHB4IDMwcHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxyXFxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNmZmNhOTQ7XFxyXFxuICAgIGNvbG9yOiB2YXIoLS1jb2xvci1iYWNrZ3JvdW5mZCk7XFxyXFxuICAgIGZvbnQtc2l6ZTogMThweDtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmY2E5NDtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuXCIsXCIubWFpbl9fZ29vZHMge1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDEwMCU7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgZ2FwOiAzMHB4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5nb29kcyB7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xcclxcbiAgZGlzcGxheTogZmxleDtcXHJcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAvL3RleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gIHdpZHRoOiAyMDBweDtcXHJcXG4gIGhlaWdodDogMzUwcHg7XFxyXFxuICBwYWRkaW5nOiAxNXB4O1xcclxcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gIHAge1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi5nb29kcy1uYW1lIHtcXHJcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgbWFyZ2luOiAwIGF1dG87XFxyXFxufVxcclxcblxcclxcbi5nb29kcy1idG4ge1xcclxcbiAgbWFyZ2luLXRvcDogMTBweDtcXHJcXG4gIGFsaWduLXNlbGY6IGNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmdvb2RzLXBob3RvIHtcXHJcXG4gIG1hcmdpbjogMTBweCBhdXRvO1xcclxcbiAgbWF4LXdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4uZ29vZHMtaGlkZSB7XFxyXFxuICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uYWRkQ2FydCB7XFxyXFxuICBib3JkZXI6IDJweCBzb2xpZCAjOTk0ZDAwO1xcclxcbn1cIixcIi5mb290ZXIge1xcclxcbiAgbWluLWhlaWdodDogMzBweDtcXHJcXG4gIGNvbG9yOiAjZmZjYTk0O1xcclxcbiAgJl9fY29udGFpbmVyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG4uZm9vdGVyX19sZWZ0IGEge1xcclxcbiAgY29sb3I6ICNmZmNhOTQ7XFxyXFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmVcXHJcXG59XFxyXFxuXFxyXFxuLmZvb3Rlcl9fcmlnaHQge1xcclxcbiAgaGVpZ2h0OiA0NXB4O1xcclxcbiAgd2lkdGg6IDkwcHhcXHJcXG59XFxyXFxuLmZvb3Rlcl9fcmlnaHQgaW1nIHtcXHJcXG4gIG1heC13aWR0aDogMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuLmZvb3Rlcl9fcmlnaHQgYSB7XFxyXFxuICBkaXNwbGF5OiBibG9jaztcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIHdpZHRoOiAxMDAlXFxyXFxufVwiLFwiXFxyXFxuLm1haW4ge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogIzE5MmYyZDtcXHJcXG5cXHJcXG4gICZfX2NvbnRhaW5lciB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICZfX2ZpbHRlcnMge1xcclxcbiAgICBmbGV4OiAxIDEgNDAwcHg7XFxyXFxuICAgIGFsaWduLXNlbGY6ZmxleC1zdGFydDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICZfX2dvb2RzIHtcXHJcXG4gIH1cXHJcXG5cXHJcXG59XFxyXFxuXFxyXFxuLmZpbHRlcnMge1xcclxcblxcclxcbiAgJl9fc29ydCB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAyMHB4O1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogNDBweDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICZfX3NlbGVjdCB7XFxyXFxuICAgIG1hcmdpbi1sZWZ0OiAyMHB4O1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIHBhZGRpbmc6IDEwcHg7XFxyXFxuXFxyXFxuICAgIGJvcmRlcjogMDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMzBweDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG4gICAgZm9udC1zaXplOiAxMnB4O1xcclxcbiAgICBsaW5lLWhlaWdodDogMTRweDtcXHJcXG4gICAgLy9jb2xvcjogI2ZmZmZmZjtcXHJcXG4gIH1cXHJcXG5cXHJcXG4gICZfX29wdGlvbiB7XFxyXFxuICAgIGNvbG9yOiAjMTIxYzFlO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG4udGl0bGUge1xcclxcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG4gIGZvbnQtc2l6ZTogMjBweDtcXHJcXG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZmlsdGVyX19ib3gge1xcclxcbiAgbWFyZ2luLWJvdHRvbTogMzBweDtcXHJcXG4gIGRpc3BsYXk6IGZsZXg7XFxyXFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgZ2FwOiAxNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZmlsdGVyX19idXR0b24ge1xcclxcbiAgcGFkZGluZzogMjBweDtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuICBib3JkZXItcmFkaXVzOiAxNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZmlsdGVyX19jb2xvciB7XFxyXFxuICBcXHJcXG4gICYtYmxhY2sge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcclxcbiAgfVxcclxcblxcclxcbiAgJi1zaWx2ZXIge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzc3O1xcclxcbiAgfVxcclxcblxcclxcbiAgJi13aGl0ZSB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuICB9XFxyXFxufVxcclxcblxcclxcbi5hY3RpdmUge1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjIpO1xcclxcbiAgLy9ib3JkZXI6IDFweCBzb2xpZCAjNzc3Nzc3O1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4uZmlsdGVyLXJhbmdlIHtcXHJcXG4gIG1pbi13aWR0aDogMzUwcHg7XFxyXFxufVxcclxcblxcclxcbi5maWx0ZXItcmFuZ2VfX2JveCB7XFxyXFxuICBkaXNwbGF5OiBmbGV4O1xcclxcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcclxcbn1cXHJcXG5cXHJcXG4uZmlsdGVyLXJhbmdlX193cmFwcGVyIHtcXHJcXG4gIHBhZGRpbmc6IDVweDtcXHJcXG4gIGNvbG9yOiAjZDE2MzQzICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblxcclxcbi5maWx0ZXItcmFuZ2VfX2lucHV0IHtcXHJcXG4gIHBhZGRpbmc6IDVweCAxMHB4O1xcclxcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xcclxcblxcclxcbiAgJl9sZWZ0IHtcXHJcXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcXHJcXG4gIH1cXHJcXG59XFxyXFxuLnNsaWRlci1zY3JlZW4ge1xcclxcbiAgbWFyZ2luOiAzMHB4IDA7XFxyXFxufVxcclxcblxcclxcbi5zbGlkZXItd3JhcHBlciB7XFxyXFxuICBwYWRkaW5nOiAxNXB4IDMwcHg7XFxyXFxufVxcclxcblxcclxcbiNzbGlkZXIge1xcclxcbiAgYm9yZGVyLXJhZGl1czogMjVweDtcXHJcXG59XFxyXFxuXFxyXFxuI3NsaWRlci0yIHtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDI1cHg7XFxyXFxufVxcclxcblxcclxcbi5ub1VpLWhhbmRsZSB7XFxyXFxuICB3aWR0aDogMjNweCAhaW1wb3J0YW50O1xcclxcbiAgaGVpZ2h0OiAyM3B4ICFpbXBvcnRhbnQ7O1xcclxcbiAgYm9yZGVyLXJhZGl1czogNTAlICFpbXBvcnRhbnQ7XFxyXFxufVxcclxcblxcclxcbi5ub1VpLWhhbmRsZTo6YWZ0ZXIsIC5ub1VpLWhhbmRsZTo6YmVmb3JlIHtcXHJcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXHJcXG5cXHJcXG59XFxyXFxuLm5vVWktdGFyZ2V0IHtcXHJcXG4gIGhlaWdodDogMTJweCAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG4ubm9VaS1iYXNlIHtcXHJcXG4gIGhlaWdodDogMTJweCAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG4ubm9VaS1jb25uZWN0cyB7XFxyXFxuICBoZWlnaHQ6IDEycHggIWltcG9ydGFudDtcXHJcXG59XFxyXFxuXFxyXFxuLm5vVWktY29ubmVjdCB7XFxyXFxuICBiYWNrZ3JvdW5kOiAjMTIxQzFFIWltcG9ydGFudDtcXHJcXG4gIGhlaWdodDogMTJweDtcXHJcXG59XCIsXCJAaW1wb3J0IFxcXCIuL3N0eWxlL19oZWFkZXIuc2Nzc1xcXCI7XFxuQGltcG9ydCBcXFwiLi9zdHlsZS9fZ29vZHMuc2Nzc1xcXCI7XFxuQGltcG9ydCBcXFwiLi9zdHlsZS9fZm9vdGVyLnNjc3NcXFwiO1xcbkBpbXBvcnQgXFxcIi4vc3R5bGUvX2ZpbHRlcnMuc2Nzc1xcXCI7XFxuQGltcG9ydCBcXFwiLi9zdHlsZS9ub3Vpc2xpZGVyLmNzc1xcXCI7XFxuXFxuOnJvb3Qge1xcblxcdC0tY29sb3ItYmFja2dyb3VuZmQ6ICMxMjFjMWU7XFxuXFx0LS1jb2xvci1vcmFuZ2U6ICNmZmNhOTQ7XFxuXFxufVxcblxcbioge1xcblxcdHBhZGRpbmc6IDBweDtcXG5cXHRtYXJnaW46IDBweDtcXG5cXHRib3JkZXI6IDBweDtcXG5cXHQtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuXFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuKixcXG4qOmJlZm9yZSxcXG4qOmFmdGVyIHtcXG5cXHQtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuXFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuOmZvY3VzLFxcbjphY3RpdmUge1xcblxcdG91dGxpbmU6IG5vbmU7XFxufVxcblxcbmE6Zm9jdXMsXFxuYTphY3RpdmUge1xcblxcdG91dGxpbmU6IG5vbmU7XFxufVxcblxcbmFzaWRlLFxcbm5hdixcXG5mb290ZXIsXFxuaGVhZGVyLFxcbnNlY3Rpb24ge1xcblxcdGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG5odG1sLFxcbmJvZHkge1xcblxcdGhlaWdodDogMTAwJTtcXG59XFxuXFxuaW5wdXQ6Oi1tcy1jbGVhciB7XFxuXFx0ZGlzcGxheTogbm9uZTtcXG59XFxuXFxuYnV0dG9uIHtcXG5cXHRjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lciB7XFxuXFx0cGFkZGluZzogMDtcXG5cXHRib3JkZXI6IDA7XFxufVxcblxcbmEsXFxuYTp2aXNpdGVkIHtcXG5cXHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblxcbmE6aG92ZXIge1xcblxcdHRleHQtZGVjb3JhdGlvbjogbm9uZTtcXG59XFxuXFxudWwgbGkge1xcblxcdGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbmltZyB7XFxuXFx0dmVydGljYWwtYWxpZ246IHRvcDtcXG59XFxuXFxuaDEsXFxuaDIsXFxuaDMsXFxuaDQsXFxuaDUsXFxuaDYge1xcblxcdGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xcblxcdGZvbnQtc2l6ZTogaW5oZXJpdDtcXG59XFxuXFxuYSB7XFxuXFx0YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbmJ1dHRvbjpmb2N1cyB7XFxuXFx0b3V0bGluZS1zdHlsZTogbm9uZTtcXG59XFxuXFxuYnV0dG9uOmFjdGl2ZSxcXG5idXR0b246aG92ZXIsXFxuYnV0dG9uOmZvY3VzIHtcXG5cXHRvdXRsaW5lOiAwO1xcblxcdG91dGxpbmUtb2Zmc2V0OiAwO1xcbn1cXG5cXG5ib2R5IHtcXG5cXHRmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG5cXHRmb250LXNpemU6IDE1cHg7XFxuXFx0Zm9udC13ZWlnaHQ6IDQwMDtcXG5cXHRjb2xvcjogIzU0NTQ1NDtcXG5cXHRiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvci1iYWNrZ3JvdW5mZCk7XFxufVxcblxcbi53cmFwcGVyIHtcXG5cXHQvL21pbi1oZWlnaHQ6IDEwMCU7XFxuXFx0bWluLWhlaWdodDogMTAwdmg7XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4ubWFpbiB7XFxuXFx0ZmxleDogMSAxIGF1dG87XFxuXFx0ZGlzcGxheTogZmxleDtcXG5cXHRnYXA6IDIwcHg7XFxuXFx0cGFkZGluZzogMjBweCAwO1xcblxcdGJhY2tncm91bmQtY29sb3I6ICNmZmNhOTQ7XFxufVxcblxcbltjbGFzcyo9J19fY29udGFpbmVyJ10ge1xcblxcdG1heC13aWR0aDogMTIwMHB4O1xcblxcdG1hcmdpbjogMCBhdXRvO1xcblxcdHBhZGRpbmc6IDAgMjBweDtcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyogRnVuY3Rpb25hbCBzdHlsaW5nO1xcbiAqIFRoZXNlIHN0eWxlcyBhcmUgcmVxdWlyZWQgZm9yIG5vVWlTbGlkZXIgdG8gZnVuY3Rpb24uXFxuICogWW91IGRvbid0IG5lZWQgdG8gY2hhbmdlIHRoZXNlIHJ1bGVzIHRvIGFwcGx5IHlvdXIgZGVzaWduLlxcbiAqL1xcbi5ub1VpLXRhcmdldCxcXG4ubm9VaS10YXJnZXQgKiB7XFxuICAtd2Via2l0LXRvdWNoLWNhbGxvdXQ6IG5vbmU7XFxuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMCk7XFxuICAtd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXRvdWNoLWFjdGlvbjogbm9uZTtcXG4gIHRvdWNoLWFjdGlvbjogbm9uZTtcXG4gIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5ub1VpLXRhcmdldCB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcbi5ub1VpLWJhc2UsXFxuLm5vVWktY29ubmVjdHMge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB6LWluZGV4OiAxO1xcbn1cXG4vKiBXcmFwcGVyIGZvciBhbGwgY29ubmVjdCBlbGVtZW50cy5cXG4gICovXFxuLm5vVWktY29ubmVjdHMge1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gIHotaW5kZXg6IDA7XFxufVxcbi5ub1VpLWNvbm5lY3QsXFxuLm5vVWktb3JpZ2luIHtcXG4gIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm07XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB6LWluZGV4OiAxO1xcbiAgdG9wOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIC1tcy10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDAgMDtcXG4gIC13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOiBwcmVzZXJ2ZS0zZDtcXG4gIHRyYW5zZm9ybS1vcmlnaW46IDAgMDtcXG4gIHRyYW5zZm9ybS1zdHlsZTogZmxhdDtcXG59XFxuLyogT2Zmc2V0IGRpcmVjdGlvblxcbiAgKi9cXG4ubm9VaS10eHQtZGlyLXJ0bC5ub1VpLWhvcml6b250YWwgLm5vVWktb3JpZ2luIHtcXG4gIGxlZnQ6IDA7XFxuICByaWdodDogYXV0bztcXG59XFxuLyogR2l2ZSBvcmlnaW5zIDAgaGVpZ2h0L3dpZHRoIHNvIHRoZXkgZG9uJ3QgaW50ZXJmZXJlIHdpdGggY2xpY2tpbmcgdGhlXFxuICAqIGNvbm5lY3QgZWxlbWVudHMuXFxuICAqL1xcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLW9yaWdpbiB7XFxuICB0b3A6IC0xMDAlO1xcbiAgd2lkdGg6IDA7XFxufVxcbi5ub1VpLWhvcml6b250YWwgLm5vVWktb3JpZ2luIHtcXG4gIGhlaWdodDogMDtcXG59XFxuLm5vVWktaGFuZGxlIHtcXG4gIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG4ubm9VaS10b3VjaC1hcmVhIHtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ubm9VaS1zdGF0ZS10YXAgLm5vVWktY29ubmVjdCxcXG4ubm9VaS1zdGF0ZS10YXAgLm5vVWktb3JpZ2luIHtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3M7XFxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4zcztcXG59XFxuLm5vVWktc3RhdGUtZHJhZyAqIHtcXG4gIGN1cnNvcjogaW5oZXJpdCAhaW1wb3J0YW50O1xcbn1cXG4vKiBTbGlkZXIgc2l6ZSBhbmQgaGFuZGxlIHBsYWNlbWVudDtcXG4gICovXFxuLm5vVWktaG9yaXpvbnRhbCB7XFxuICBoZWlnaHQ6IDE4cHg7XFxufVxcbi5ub1VpLWhvcml6b250YWwgLm5vVWktaGFuZGxlIHtcXG4gIHdpZHRoOiAzNHB4O1xcbiAgaGVpZ2h0OiAyOHB4O1xcbiAgcmlnaHQ6IC0xN3B4O1xcbiAgdG9wOiAtNnB4O1xcbn1cXG4ubm9VaS12ZXJ0aWNhbCB7XFxuICB3aWR0aDogMThweDtcXG59XFxuLm5vVWktdmVydGljYWwgLm5vVWktaGFuZGxlIHtcXG4gIHdpZHRoOiAyOHB4O1xcbiAgaGVpZ2h0OiAzNHB4O1xcbiAgcmlnaHQ6IC02cHg7XFxuICBib3R0b206IC0xN3B4O1xcbn1cXG4ubm9VaS10eHQtZGlyLXJ0bC5ub1VpLWhvcml6b250YWwgLm5vVWktaGFuZGxlIHtcXG4gIGxlZnQ6IC0xN3B4O1xcbiAgcmlnaHQ6IGF1dG87XFxufVxcbi8qIFN0eWxpbmc7XFxuICAqIEdpdmluZyB0aGUgY29ubmVjdCBlbGVtZW50IGEgYm9yZGVyIHJhZGl1cyBjYXVzZXMgaXNzdWVzIHdpdGggdXNpbmcgdHJhbnNmb3JtOiBzY2FsZVxcbiAgKi9cXG4ubm9VaS10YXJnZXQge1xcbiAgYmFja2dyb3VuZDogI2ZhZmFmYTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkM2QzZDM7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDFweCAxcHggI2YwZjBmMCwgMCAzcHggNnB4IC01cHggI2JiYjtcXG59XFxuLm5vVWktY29ubmVjdHMge1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbn1cXG4ubm9VaS1jb25uZWN0IHtcXG4gIGJhY2tncm91bmQ6ICMzZmI4YWY7XFxufVxcbi8qIEhhbmRsZXMgYW5kIGN1cnNvcnM7XFxuICAqL1xcbi5ub1VpLWRyYWdnYWJsZSB7XFxuICBjdXJzb3I6IGV3LXJlc2l6ZTtcXG59XFxuLm5vVWktdmVydGljYWwgLm5vVWktZHJhZ2dhYmxlIHtcXG4gIGN1cnNvcjogbnMtcmVzaXplO1xcbn1cXG4ubm9VaS1oYW5kbGUge1xcbiAgYm9yZGVyOiAxcHggc29saWQgI2Q5ZDlkOTtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBjdXJzb3I6IGRlZmF1bHQ7XFxuICBib3gtc2hhZG93OiBpbnNldCAwIDAgMXB4ICNmZmYsIGluc2V0IDAgMXB4IDdweCAjZWJlYmViLCAwIDNweCA2cHggLTNweCAjYmJiO1xcbn1cXG4ubm9VaS1hY3RpdmUge1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDFweCAjZmZmLCBpbnNldCAwIDFweCA3cHggI2RkZCwgMCAzcHggNnB4IC0zcHggI2JiYjtcXG59XFxuLyogSGFuZGxlIHN0cmlwZXM7XFxuICAqL1xcbi5ub1VpLWhhbmRsZTpiZWZvcmUsXFxuLm5vVWktaGFuZGxlOmFmdGVyIHtcXG4gIGNvbnRlbnQ6ICcnO1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBoZWlnaHQ6IDE0cHg7XFxuICB3aWR0aDogMXB4O1xcbiAgYmFja2dyb3VuZDogI2U4ZTdlNjtcXG4gIGxlZnQ6IDE0cHg7XFxuICB0b3A6IDZweDtcXG59XFxuLm5vVWktaGFuZGxlOmFmdGVyIHtcXG4gIGxlZnQ6IDE3cHg7XFxufVxcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLWhhbmRsZTpiZWZvcmUsXFxuLm5vVWktdmVydGljYWwgLm5vVWktaGFuZGxlOmFmdGVyIHtcXG4gIHdpZHRoOiAxNHB4O1xcbiAgaGVpZ2h0OiAxcHg7XFxuICBsZWZ0OiA2cHg7XFxuICB0b3A6IDE0cHg7XFxufVxcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLWhhbmRsZTphZnRlciB7XFxuICB0b3A6IDE3cHg7XFxufVxcbi8qIERpc2FibGVkIHN0YXRlO1xcbiAgKi9cXG5bZGlzYWJsZWRdIC5ub1VpLWNvbm5lY3Qge1xcbiAgYmFja2dyb3VuZDogI2I4YjhiODtcXG59XFxuW2Rpc2FibGVkXS5ub1VpLXRhcmdldCxcXG5bZGlzYWJsZWRdLm5vVWktaGFuZGxlLFxcbltkaXNhYmxlZF0gLm5vVWktaGFuZGxlIHtcXG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XFxufVxcbi8qIEJhc2U7XFxuICAqXFxuICAqL1xcbi5ub1VpLXBpcHMsXFxuLm5vVWktcGlwcyAqIHtcXG4gIC1tb3otYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5ub1VpLXBpcHMge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgY29sb3I6ICM5OTk7XFxufVxcbi8qIFZhbHVlcztcXG4gICpcXG4gICovXFxuLm5vVWktdmFsdWUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuLm5vVWktdmFsdWUtc3ViIHtcXG4gIGNvbG9yOiAjY2NjO1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbn1cXG4vKiBNYXJraW5ncztcXG4gICpcXG4gICovXFxuLm5vVWktbWFya2VyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJhY2tncm91bmQ6ICNjY2M7XFxufVxcbi5ub1VpLW1hcmtlci1zdWIge1xcbiAgYmFja2dyb3VuZDogI2FhYTtcXG59XFxuLm5vVWktbWFya2VyLWxhcmdlIHtcXG4gIGJhY2tncm91bmQ6ICNhYWE7XFxufVxcbi8qIEhvcml6b250YWwgbGF5b3V0O1xcbiAgKlxcbiAgKi9cXG4ubm9VaS1waXBzLWhvcml6b250YWwge1xcbiAgcGFkZGluZzogMTBweCAwO1xcbiAgaGVpZ2h0OiA4MHB4O1xcbiAgdG9wOiAxMDAlO1xcbiAgbGVmdDogMDtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ubm9VaS12YWx1ZS1ob3Jpem9udGFsIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgNTAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDUwJSk7XFxufVxcbi5ub1VpLXJ0bCAubm9VaS12YWx1ZS1ob3Jpem9udGFsIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNTAlLCA1MCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNTAlLCA1MCUpO1xcbn1cXG4ubm9VaS1tYXJrZXItaG9yaXpvbnRhbC5ub1VpLW1hcmtlciB7XFxuICBtYXJnaW4tbGVmdDogLTFweDtcXG4gIHdpZHRoOiAycHg7XFxuICBoZWlnaHQ6IDVweDtcXG59XFxuLm5vVWktbWFya2VyLWhvcml6b250YWwubm9VaS1tYXJrZXItc3ViIHtcXG4gIGhlaWdodDogMTBweDtcXG59XFxuLm5vVWktbWFya2VyLWhvcml6b250YWwubm9VaS1tYXJrZXItbGFyZ2Uge1xcbiAgaGVpZ2h0OiAxNXB4O1xcbn1cXG4vKiBWZXJ0aWNhbCBsYXlvdXQ7XFxuICAqXFxuICAqL1xcbi5ub1VpLXBpcHMtdmVydGljYWwge1xcbiAgcGFkZGluZzogMCAxMHB4O1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMTAwJTtcXG59XFxuLm5vVWktdmFsdWUtdmVydGljYWwge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC01MCUpO1xcbiAgcGFkZGluZy1sZWZ0OiAyNXB4O1xcbn1cXG4ubm9VaS1ydGwgLm5vVWktdmFsdWUtdmVydGljYWwge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCA1MCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgNTAlKTtcXG59XFxuLm5vVWktbWFya2VyLXZlcnRpY2FsLm5vVWktbWFya2VyIHtcXG4gIHdpZHRoOiA1cHg7XFxuICBoZWlnaHQ6IDJweDtcXG4gIG1hcmdpbi10b3A6IC0xcHg7XFxufVxcbi5ub1VpLW1hcmtlci12ZXJ0aWNhbC5ub1VpLW1hcmtlci1zdWIge1xcbiAgd2lkdGg6IDEwcHg7XFxufVxcbi5ub1VpLW1hcmtlci12ZXJ0aWNhbC5ub1VpLW1hcmtlci1sYXJnZSB7XFxuICB3aWR0aDogMTVweDtcXG59XFxuLm5vVWktdG9vbHRpcCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkOWQ5ZDk7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgY29sb3I6ICMwMDA7XFxuICBwYWRkaW5nOiA1cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbn1cXG4ubm9VaS1ob3Jpem9udGFsIC5ub1VpLXRvb2x0aXAge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDApO1xcbiAgbGVmdDogNTAlO1xcbiAgYm90dG9tOiAxMjAlO1xcbn1cXG4ubm9VaS12ZXJ0aWNhbCAubm9VaS10b29sdGlwIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcXG4gIHRvcDogNTAlO1xcbiAgcmlnaHQ6IDEyMCU7XFxufVxcbi5ub1VpLWhvcml6b250YWwgLm5vVWktb3JpZ2luID4gLm5vVWktdG9vbHRpcCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDUwJSwgMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg1MCUsIDApO1xcbiAgbGVmdDogYXV0bztcXG4gIGJvdHRvbTogMTBweDtcXG59XFxuLm5vVWktdmVydGljYWwgLm5vVWktb3JpZ2luID4gLm5vVWktdG9vbHRpcCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC0xOHB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC0xOHB4KTtcXG4gIHRvcDogYXV0bztcXG4gIHJpZ2h0OiAyOHB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUvbm91aXNsaWRlci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7OztFQUdFO0FBQ0Y7O0VBRUUsMkJBQTJCO0VBQzNCLDZDQUE2QztFQUM3Qyx5QkFBeUI7RUFDekIsc0JBQXNCO0VBQ3RCLGtCQUFrQjtFQUNsQixxQkFBcUI7RUFDckIsc0JBQXNCO0VBQ3RCLGlCQUFpQjtFQUNqQiwyQkFBMkI7RUFDM0Isc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRSxrQkFBa0I7QUFDcEI7QUFDQTs7RUFFRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixVQUFVO0FBQ1o7QUFDQTtHQUNHO0FBQ0g7RUFDRSxnQkFBZ0I7RUFDaEIsVUFBVTtBQUNaO0FBQ0E7O0VBRUUsc0JBQXNCO0VBQ3RCLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YsTUFBTTtFQUNOLFFBQVE7RUFDUixZQUFZO0VBQ1osV0FBVztFQUNYLHlCQUF5QjtFQUN6Qiw2QkFBNkI7RUFDN0Isb0NBQW9DO0VBQ3BDLHFCQUFxQjtFQUNyQixxQkFBcUI7QUFDdkI7QUFDQTtHQUNHO0FBQ0g7RUFDRSxPQUFPO0VBQ1AsV0FBVztBQUNiO0FBQ0E7O0dBRUc7QUFDSDtFQUNFLFVBQVU7RUFDVixRQUFRO0FBQ1Y7QUFDQTtFQUNFLFNBQVM7QUFDWDtBQUNBO0VBQ0UsbUNBQW1DO0VBQ25DLDJCQUEyQjtFQUMzQixrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLFlBQVk7RUFDWixXQUFXO0FBQ2I7QUFDQTs7RUFFRSxrQ0FBa0M7RUFDbEMsMEJBQTBCO0FBQzVCO0FBQ0E7RUFDRSwwQkFBMEI7QUFDNUI7QUFDQTtHQUNHO0FBQ0g7RUFDRSxZQUFZO0FBQ2Q7QUFDQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osWUFBWTtFQUNaLFNBQVM7QUFDWDtBQUNBO0VBQ0UsV0FBVztBQUNiO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLFdBQVc7RUFDWCxhQUFhO0FBQ2Y7QUFDQTtFQUNFLFdBQVc7RUFDWCxXQUFXO0FBQ2I7QUFDQTs7R0FFRztBQUNIO0VBQ0UsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQix5QkFBeUI7RUFDekIsd0RBQXdEO0FBQzFEO0FBQ0E7RUFDRSxrQkFBa0I7QUFDcEI7QUFDQTtFQUNFLG1CQUFtQjtBQUNyQjtBQUNBO0dBQ0c7QUFDSDtFQUNFLGlCQUFpQjtBQUNuQjtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSx5QkFBeUI7RUFDekIsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixlQUFlO0VBQ2YsNEVBQTRFO0FBQzlFO0FBQ0E7RUFDRSx5RUFBeUU7QUFDM0U7QUFDQTtHQUNHO0FBQ0g7O0VBRUUsV0FBVztFQUNYLGNBQWM7RUFDZCxrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLFVBQVU7RUFDVixtQkFBbUI7RUFDbkIsVUFBVTtFQUNWLFFBQVE7QUFDVjtBQUNBO0VBQ0UsVUFBVTtBQUNaO0FBQ0E7O0VBRUUsV0FBVztFQUNYLFdBQVc7RUFDWCxTQUFTO0VBQ1QsU0FBUztBQUNYO0FBQ0E7RUFDRSxTQUFTO0FBQ1g7QUFDQTtHQUNHO0FBQ0g7RUFDRSxtQkFBbUI7QUFDckI7QUFDQTs7O0VBR0UsbUJBQW1CO0FBQ3JCO0FBQ0E7O0dBRUc7QUFDSDs7RUFFRSwyQkFBMkI7RUFDM0Isc0JBQXNCO0FBQ3hCO0FBQ0E7RUFDRSxrQkFBa0I7RUFDbEIsV0FBVztBQUNiO0FBQ0E7O0dBRUc7QUFDSDtFQUNFLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkIsa0JBQWtCO0FBQ3BCO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsZUFBZTtBQUNqQjtBQUNBOztHQUVHO0FBQ0g7RUFDRSxrQkFBa0I7RUFDbEIsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLGdCQUFnQjtBQUNsQjtBQUNBOztHQUVHO0FBQ0g7RUFDRSxlQUFlO0VBQ2YsWUFBWTtFQUNaLFNBQVM7RUFDVCxPQUFPO0VBQ1AsV0FBVztBQUNiO0FBQ0E7RUFDRSx1Q0FBdUM7RUFDdkMsK0JBQStCO0FBQ2pDO0FBQ0E7RUFDRSxzQ0FBc0M7RUFDdEMsOEJBQThCO0FBQ2hDO0FBQ0E7RUFDRSxpQkFBaUI7RUFDakIsVUFBVTtFQUNWLFdBQVc7QUFDYjtBQUNBO0VBQ0UsWUFBWTtBQUNkO0FBQ0E7RUFDRSxZQUFZO0FBQ2Q7QUFDQTs7R0FFRztBQUNIO0VBQ0UsZUFBZTtFQUNmLFlBQVk7RUFDWixNQUFNO0VBQ04sVUFBVTtBQUNaO0FBQ0E7RUFDRSxxQ0FBcUM7RUFDckMsNkJBQTZCO0VBQzdCLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0Usb0NBQW9DO0VBQ3BDLDRCQUE0QjtBQUM5QjtBQUNBO0VBQ0UsVUFBVTtFQUNWLFdBQVc7RUFDWCxnQkFBZ0I7QUFDbEI7QUFDQTtFQUNFLFdBQVc7QUFDYjtBQUNBO0VBQ0UsV0FBVztBQUNiO0FBQ0E7RUFDRSxjQUFjO0VBQ2Qsa0JBQWtCO0VBQ2xCLHlCQUF5QjtFQUN6QixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLFdBQVc7RUFDWCxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLG1CQUFtQjtBQUNyQjtBQUNBO0VBQ0UscUNBQXFDO0VBQ3JDLDZCQUE2QjtFQUM3QixTQUFTO0VBQ1QsWUFBWTtBQUNkO0FBQ0E7RUFDRSxxQ0FBcUM7RUFDckMsNkJBQTZCO0VBQzdCLFFBQVE7RUFDUixXQUFXO0FBQ2I7QUFDQTtFQUNFLG9DQUFvQztFQUNwQyw0QkFBNEI7RUFDNUIsVUFBVTtFQUNWLFlBQVk7QUFDZDtBQUNBO0VBQ0Usc0NBQXNDO0VBQ3RDLDhCQUE4QjtFQUM5QixTQUFTO0VBQ1QsV0FBVztBQUNiXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIEZ1bmN0aW9uYWwgc3R5bGluZztcXG4gKiBUaGVzZSBzdHlsZXMgYXJlIHJlcXVpcmVkIGZvciBub1VpU2xpZGVyIHRvIGZ1bmN0aW9uLlxcbiAqIFlvdSBkb24ndCBuZWVkIHRvIGNoYW5nZSB0aGVzZSBydWxlcyB0byBhcHBseSB5b3VyIGRlc2lnbi5cXG4gKi9cXG4ubm9VaS10YXJnZXQsXFxuLm5vVWktdGFyZ2V0ICoge1xcbiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lO1xcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xcbiAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcXG4gIC1tcy10b3VjaC1hY3Rpb246IG5vbmU7XFxuICB0b3VjaC1hY3Rpb246IG5vbmU7XFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG4ubm9VaS10YXJnZXQge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG4ubm9VaS1iYXNlLFxcbi5ub1VpLWNvbm5lY3RzIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgei1pbmRleDogMTtcXG59XFxuLyogV3JhcHBlciBmb3IgYWxsIGNvbm5lY3QgZWxlbWVudHMuXFxuICAqL1xcbi5ub1VpLWNvbm5lY3RzIHtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICB6LWluZGV4OiAwO1xcbn1cXG4ubm9VaS1jb25uZWN0LFxcbi5ub1VpLW9yaWdpbiB7XFxuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogMTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAwO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICAtbXMtdHJhbnNmb3JtLW9yaWdpbjogMCAwO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XFxuICB0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7XFxuICB0cmFuc2Zvcm0tc3R5bGU6IGZsYXQ7XFxufVxcbi8qIE9mZnNldCBkaXJlY3Rpb25cXG4gICovXFxuLm5vVWktdHh0LWRpci1ydGwubm9VaS1ob3Jpem9udGFsIC5ub1VpLW9yaWdpbiB7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IGF1dG87XFxufVxcbi8qIEdpdmUgb3JpZ2lucyAwIGhlaWdodC93aWR0aCBzbyB0aGV5IGRvbid0IGludGVyZmVyZSB3aXRoIGNsaWNraW5nIHRoZVxcbiAgKiBjb25uZWN0IGVsZW1lbnRzLlxcbiAgKi9cXG4ubm9VaS12ZXJ0aWNhbCAubm9VaS1vcmlnaW4ge1xcbiAgdG9wOiAtMTAwJTtcXG4gIHdpZHRoOiAwO1xcbn1cXG4ubm9VaS1ob3Jpem9udGFsIC5ub1VpLW9yaWdpbiB7XFxuICBoZWlnaHQ6IDA7XFxufVxcbi5ub1VpLWhhbmRsZSB7XFxuICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuLm5vVWktdG91Y2gtYXJlYSB7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLm5vVWktc3RhdGUtdGFwIC5ub1VpLWNvbm5lY3QsXFxuLm5vVWktc3RhdGUtdGFwIC5ub1VpLW9yaWdpbiB7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjNzO1xcbiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuM3M7XFxufVxcbi5ub1VpLXN0YXRlLWRyYWcgKiB7XFxuICBjdXJzb3I6IGluaGVyaXQgIWltcG9ydGFudDtcXG59XFxuLyogU2xpZGVyIHNpemUgYW5kIGhhbmRsZSBwbGFjZW1lbnQ7XFxuICAqL1xcbi5ub1VpLWhvcml6b250YWwge1xcbiAgaGVpZ2h0OiAxOHB4O1xcbn1cXG4ubm9VaS1ob3Jpem9udGFsIC5ub1VpLWhhbmRsZSB7XFxuICB3aWR0aDogMzRweDtcXG4gIGhlaWdodDogMjhweDtcXG4gIHJpZ2h0OiAtMTdweDtcXG4gIHRvcDogLTZweDtcXG59XFxuLm5vVWktdmVydGljYWwge1xcbiAgd2lkdGg6IDE4cHg7XFxufVxcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLWhhbmRsZSB7XFxuICB3aWR0aDogMjhweDtcXG4gIGhlaWdodDogMzRweDtcXG4gIHJpZ2h0OiAtNnB4O1xcbiAgYm90dG9tOiAtMTdweDtcXG59XFxuLm5vVWktdHh0LWRpci1ydGwubm9VaS1ob3Jpem9udGFsIC5ub1VpLWhhbmRsZSB7XFxuICBsZWZ0OiAtMTdweDtcXG4gIHJpZ2h0OiBhdXRvO1xcbn1cXG4vKiBTdHlsaW5nO1xcbiAgKiBHaXZpbmcgdGhlIGNvbm5lY3QgZWxlbWVudCBhIGJvcmRlciByYWRpdXMgY2F1c2VzIGlzc3VlcyB3aXRoIHVzaW5nIHRyYW5zZm9ybTogc2NhbGVcXG4gICovXFxuLm5vVWktdGFyZ2V0IHtcXG4gIGJhY2tncm91bmQ6ICNmYWZhZmE7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZDNkM2QzO1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAxcHggMXB4ICNmMGYwZjAsIDAgM3B4IDZweCAtNXB4ICNiYmI7XFxufVxcbi5ub1VpLWNvbm5lY3RzIHtcXG4gIGJvcmRlci1yYWRpdXM6IDNweDtcXG59XFxuLm5vVWktY29ubmVjdCB7XFxuICBiYWNrZ3JvdW5kOiAjM2ZiOGFmO1xcbn1cXG4vKiBIYW5kbGVzIGFuZCBjdXJzb3JzO1xcbiAgKi9cXG4ubm9VaS1kcmFnZ2FibGUge1xcbiAgY3Vyc29yOiBldy1yZXNpemU7XFxufVxcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLWRyYWdnYWJsZSB7XFxuICBjdXJzb3I6IG5zLXJlc2l6ZTtcXG59XFxuLm5vVWktaGFuZGxlIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkOWQ5ZDk7XFxuICBib3JkZXItcmFkaXVzOiAzcHg7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgY3Vyc29yOiBkZWZhdWx0O1xcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDFweCAjZmZmLCBpbnNldCAwIDFweCA3cHggI2ViZWJlYiwgMCAzcHggNnB4IC0zcHggI2JiYjtcXG59XFxuLm5vVWktYWN0aXZlIHtcXG4gIGJveC1zaGFkb3c6IGluc2V0IDAgMCAxcHggI2ZmZiwgaW5zZXQgMCAxcHggN3B4ICNkZGQsIDAgM3B4IDZweCAtM3B4ICNiYmI7XFxufVxcbi8qIEhhbmRsZSBzdHJpcGVzO1xcbiAgKi9cXG4ubm9VaS1oYW5kbGU6YmVmb3JlLFxcbi5ub1VpLWhhbmRsZTphZnRlciB7XFxuICBjb250ZW50OiAnJztcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgaGVpZ2h0OiAxNHB4O1xcbiAgd2lkdGg6IDFweDtcXG4gIGJhY2tncm91bmQ6ICNlOGU3ZTY7XFxuICBsZWZ0OiAxNHB4O1xcbiAgdG9wOiA2cHg7XFxufVxcbi5ub1VpLWhhbmRsZTphZnRlciB7XFxuICBsZWZ0OiAxN3B4O1xcbn1cXG4ubm9VaS12ZXJ0aWNhbCAubm9VaS1oYW5kbGU6YmVmb3JlLFxcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLWhhbmRsZTphZnRlciB7XFxuICB3aWR0aDogMTRweDtcXG4gIGhlaWdodDogMXB4O1xcbiAgbGVmdDogNnB4O1xcbiAgdG9wOiAxNHB4O1xcbn1cXG4ubm9VaS12ZXJ0aWNhbCAubm9VaS1oYW5kbGU6YWZ0ZXIge1xcbiAgdG9wOiAxN3B4O1xcbn1cXG4vKiBEaXNhYmxlZCBzdGF0ZTtcXG4gICovXFxuW2Rpc2FibGVkXSAubm9VaS1jb25uZWN0IHtcXG4gIGJhY2tncm91bmQ6ICNiOGI4Yjg7XFxufVxcbltkaXNhYmxlZF0ubm9VaS10YXJnZXQsXFxuW2Rpc2FibGVkXS5ub1VpLWhhbmRsZSxcXG5bZGlzYWJsZWRdIC5ub1VpLWhhbmRsZSB7XFxuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xcbn1cXG4vKiBCYXNlO1xcbiAgKlxcbiAgKi9cXG4ubm9VaS1waXBzLFxcbi5ub1VpLXBpcHMgKiB7XFxuICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG4ubm9VaS1waXBzIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGNvbG9yOiAjOTk5O1xcbn1cXG4vKiBWYWx1ZXM7XFxuICAqXFxuICAqL1xcbi5ub1VpLXZhbHVlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5ub1VpLXZhbHVlLXN1YiB7XFxuICBjb2xvcjogI2NjYztcXG4gIGZvbnQtc2l6ZTogMTBweDtcXG59XFxuLyogTWFya2luZ3M7XFxuICAqXFxuICAqL1xcbi5ub1VpLW1hcmtlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBiYWNrZ3JvdW5kOiAjY2NjO1xcbn1cXG4ubm9VaS1tYXJrZXItc3ViIHtcXG4gIGJhY2tncm91bmQ6ICNhYWE7XFxufVxcbi5ub1VpLW1hcmtlci1sYXJnZSB7XFxuICBiYWNrZ3JvdW5kOiAjYWFhO1xcbn1cXG4vKiBIb3Jpem9udGFsIGxheW91dDtcXG4gICpcXG4gICovXFxuLm5vVWktcGlwcy1ob3Jpem9udGFsIHtcXG4gIHBhZGRpbmc6IDEwcHggMDtcXG4gIGhlaWdodDogODBweDtcXG4gIHRvcDogMTAwJTtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuLm5vVWktdmFsdWUtaG9yaXpvbnRhbCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIDUwJSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCA1MCUpO1xcbn1cXG4ubm9VaS1ydGwgLm5vVWktdmFsdWUtaG9yaXpvbnRhbCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDUwJSwgNTAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDUwJSwgNTAlKTtcXG59XFxuLm5vVWktbWFya2VyLWhvcml6b250YWwubm9VaS1tYXJrZXIge1xcbiAgbWFyZ2luLWxlZnQ6IC0xcHg7XFxuICB3aWR0aDogMnB4O1xcbiAgaGVpZ2h0OiA1cHg7XFxufVxcbi5ub1VpLW1hcmtlci1ob3Jpem9udGFsLm5vVWktbWFya2VyLXN1YiB7XFxuICBoZWlnaHQ6IDEwcHg7XFxufVxcbi5ub1VpLW1hcmtlci1ob3Jpem9udGFsLm5vVWktbWFya2VyLWxhcmdlIHtcXG4gIGhlaWdodDogMTVweDtcXG59XFxuLyogVmVydGljYWwgbGF5b3V0O1xcbiAgKlxcbiAgKi9cXG4ubm9VaS1waXBzLXZlcnRpY2FsIHtcXG4gIHBhZGRpbmc6IDAgMTBweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDEwMCU7XFxufVxcbi5ub1VpLXZhbHVlLXZlcnRpY2FsIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtNTAlKTtcXG4gIHBhZGRpbmctbGVmdDogMjVweDtcXG59XFxuLm5vVWktcnRsIC5ub1VpLXZhbHVlLXZlcnRpY2FsIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgNTAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIDUwJSk7XFxufVxcbi5ub1VpLW1hcmtlci12ZXJ0aWNhbC5ub1VpLW1hcmtlciB7XFxuICB3aWR0aDogNXB4O1xcbiAgaGVpZ2h0OiAycHg7XFxuICBtYXJnaW4tdG9wOiAtMXB4O1xcbn1cXG4ubm9VaS1tYXJrZXItdmVydGljYWwubm9VaS1tYXJrZXItc3ViIHtcXG4gIHdpZHRoOiAxMHB4O1xcbn1cXG4ubm9VaS1tYXJrZXItdmVydGljYWwubm9VaS1tYXJrZXItbGFyZ2Uge1xcbiAgd2lkdGg6IDE1cHg7XFxufVxcbi5ub1VpLXRvb2x0aXAge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZDlkOWQ5O1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIGNvbG9yOiAjMDAwO1xcbiAgcGFkZGluZzogNXB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG59XFxuLm5vVWktaG9yaXpvbnRhbCAubm9VaS10b29sdGlwIHtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAwKTtcXG4gIGxlZnQ6IDUwJTtcXG4gIGJvdHRvbTogMTIwJTtcXG59XFxuLm5vVWktdmVydGljYWwgLm5vVWktdG9vbHRpcCB7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDAsIC01MCUpO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMCwgLTUwJSk7XFxuICB0b3A6IDUwJTtcXG4gIHJpZ2h0OiAxMjAlO1xcbn1cXG4ubm9VaS1ob3Jpem9udGFsIC5ub1VpLW9yaWdpbiA+IC5ub1VpLXRvb2x0aXAge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg1MCUsIDApO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNTAlLCAwKTtcXG4gIGxlZnQ6IGF1dG87XFxuICBib3R0b206IDEwcHg7XFxufVxcbi5ub1VpLXZlcnRpY2FsIC5ub1VpLW9yaWdpbiA+IC5ub1VpLXRvb2x0aXAge1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMThweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgwLCAtMThweCk7XFxuICB0b3A6IGF1dG87XFxuICByaWdodDogMjhweDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciAmJiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdKTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuICAgIChnbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogZ2xvYmFsIHx8IHNlbGYsIGZhY3RvcnkoZ2xvYmFsLm5vVWlTbGlkZXIgPSB7fSkpO1xufSkodGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIGV4cG9ydHMuUGlwc01vZGUgPSB2b2lkIDA7XG4gICAgKGZ1bmN0aW9uIChQaXBzTW9kZSkge1xuICAgICAgICBQaXBzTW9kZVtcIlJhbmdlXCJdID0gXCJyYW5nZVwiO1xuICAgICAgICBQaXBzTW9kZVtcIlN0ZXBzXCJdID0gXCJzdGVwc1wiO1xuICAgICAgICBQaXBzTW9kZVtcIlBvc2l0aW9uc1wiXSA9IFwicG9zaXRpb25zXCI7XG4gICAgICAgIFBpcHNNb2RlW1wiQ291bnRcIl0gPSBcImNvdW50XCI7XG4gICAgICAgIFBpcHNNb2RlW1wiVmFsdWVzXCJdID0gXCJ2YWx1ZXNcIjtcbiAgICB9KShleHBvcnRzLlBpcHNNb2RlIHx8IChleHBvcnRzLlBpcHNNb2RlID0ge30pKTtcbiAgICBleHBvcnRzLlBpcHNUeXBlID0gdm9pZCAwO1xuICAgIChmdW5jdGlvbiAoUGlwc1R5cGUpIHtcbiAgICAgICAgUGlwc1R5cGVbUGlwc1R5cGVbXCJOb25lXCJdID0gLTFdID0gXCJOb25lXCI7XG4gICAgICAgIFBpcHNUeXBlW1BpcHNUeXBlW1wiTm9WYWx1ZVwiXSA9IDBdID0gXCJOb1ZhbHVlXCI7XG4gICAgICAgIFBpcHNUeXBlW1BpcHNUeXBlW1wiTGFyZ2VWYWx1ZVwiXSA9IDFdID0gXCJMYXJnZVZhbHVlXCI7XG4gICAgICAgIFBpcHNUeXBlW1BpcHNUeXBlW1wiU21hbGxWYWx1ZVwiXSA9IDJdID0gXCJTbWFsbFZhbHVlXCI7XG4gICAgfSkoZXhwb3J0cy5QaXBzVHlwZSB8fCAoZXhwb3J0cy5QaXBzVHlwZSA9IHt9KSk7XG4gICAgLy9yZWdpb24gSGVscGVyIE1ldGhvZHNcbiAgICBmdW5jdGlvbiBpc1ZhbGlkRm9ybWF0dGVyKGVudHJ5KSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkUGFydGlhbEZvcm1hdHRlcihlbnRyeSkgJiYgdHlwZW9mIGVudHJ5LmZyb20gPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNWYWxpZFBhcnRpYWxGb3JtYXR0ZXIoZW50cnkpIHtcbiAgICAgICAgLy8gcGFydGlhbCBmb3JtYXR0ZXJzIG9ubHkgbmVlZCBhIHRvIGZ1bmN0aW9uIGFuZCBub3QgYSBmcm9tIGZ1bmN0aW9uXG4gICAgICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGVudHJ5LnRvID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWwpIHtcbiAgICAgICAgZWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvLyBCaW5kYWJsZSB2ZXJzaW9uXG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIC8vIFJlbW92ZXMgZHVwbGljYXRlcyBmcm9tIGFuIGFycmF5LlxuICAgIGZ1bmN0aW9uIHVuaXF1ZShhcnJheSkge1xuICAgICAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXNbYV0gPyAodGhpc1thXSA9IHRydWUpIDogZmFsc2U7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgLy8gUm91bmQgYSB2YWx1ZSB0byB0aGUgY2xvc2VzdCAndG8nLlxuICAgIGZ1bmN0aW9uIGNsb3Nlc3QodmFsdWUsIHRvKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlIC8gdG8pICogdG87XG4gICAgfVxuICAgIC8vIEN1cnJlbnQgcG9zaXRpb24gb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KGVsZW0sIG9yaWVudGF0aW9uKSB7XG4gICAgICAgIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB2YXIgcGFnZU9mZnNldCA9IGdldFBhZ2VPZmZzZXQoZG9jKTtcbiAgICAgICAgLy8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGNvbnRhaW5zIGxlZnQgc2Nyb2xsIGluIENocm9tZSBvbiBBbmRyb2lkLlxuICAgICAgICAvLyBJIGhhdmVuJ3QgZm91bmQgYSBmZWF0dXJlIGRldGVjdGlvbiB0aGF0IHByb3ZlcyB0aGlzLiBXb3JzdCBjYXNlXG4gICAgICAgIC8vIHNjZW5hcmlvIG9uIG1pcy1tYXRjaDogdGhlICd0YXAnIGZlYXR1cmUgb24gaG9yaXpvbnRhbCBzbGlkZXJzIGJyZWFrcy5cbiAgICAgICAgaWYgKC93ZWJraXQuKkNocm9tZS4qTW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICAgICAgcGFnZU9mZnNldC54ID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3JpZW50YXRpb24gPyByZWN0LnRvcCArIHBhZ2VPZmZzZXQueSAtIGRvY0VsZW0uY2xpZW50VG9wIDogcmVjdC5sZWZ0ICsgcGFnZU9mZnNldC54IC0gZG9jRWxlbS5jbGllbnRMZWZ0O1xuICAgIH1cbiAgICAvLyBDaGVja3Mgd2hldGhlciBhIHZhbHVlIGlzIG51bWVyaWNhbC5cbiAgICBmdW5jdGlvbiBpc051bWVyaWMoYSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09IFwibnVtYmVyXCIgJiYgIWlzTmFOKGEpICYmIGlzRmluaXRlKGEpO1xuICAgIH1cbiAgICAvLyBTZXRzIGEgY2xhc3MgYW5kIHJlbW92ZXMgaXQgYWZ0ZXIgW2R1cmF0aW9uXSBtcy5cbiAgICBmdW5jdGlvbiBhZGRDbGFzc0ZvcihlbGVtZW50LCBjbGFzc05hbWUsIGR1cmF0aW9uKSB7XG4gICAgICAgIGlmIChkdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIExpbWl0cyBhIHZhbHVlIHRvIDAgLSAxMDBcbiAgICBmdW5jdGlvbiBsaW1pdChhKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihhLCAxMDApLCAwKTtcbiAgICB9XG4gICAgLy8gV3JhcHMgYSB2YXJpYWJsZSBhcyBhbiBhcnJheSwgaWYgaXQgaXNuJ3Qgb25lIHlldC5cbiAgICAvLyBOb3RlIHRoYXQgYW4gaW5wdXQgYXJyYXkgaXMgcmV0dXJuZWQgYnkgcmVmZXJlbmNlIVxuICAgIGZ1bmN0aW9uIGFzQXJyYXkoYSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhKSA/IGEgOiBbYV07XG4gICAgfVxuICAgIC8vIENvdW50cyBkZWNpbWFsc1xuICAgIGZ1bmN0aW9uIGNvdW50RGVjaW1hbHMobnVtU3RyKSB7XG4gICAgICAgIG51bVN0ciA9IFN0cmluZyhudW1TdHIpO1xuICAgICAgICB2YXIgcGllY2VzID0gbnVtU3RyLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgcmV0dXJuIHBpZWNlcy5sZW5ndGggPiAxID8gcGllY2VzWzFdLmxlbmd0aCA6IDA7XG4gICAgfVxuICAgIC8vIGh0dHA6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tLyNhZGRfY2xhc3NcbiAgICBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChlbC5jbGFzc0xpc3QgJiYgIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lICs9IFwiIFwiICsgY2xhc3NOYW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGh0dHA6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tLyNyZW1vdmVfY2xhc3NcbiAgICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChlbC5jbGFzc0xpc3QgJiYgIS9cXHMvLnRlc3QoY2xhc3NOYW1lKSkge1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWwuY2xhc3NOYW1lID0gZWwuY2xhc3NOYW1lLnJlcGxhY2UobmV3IFJlZ0V4cChcIihefFxcXFxiKVwiICsgY2xhc3NOYW1lLnNwbGl0KFwiIFwiKS5qb2luKFwifFwiKSArIFwiKFxcXFxifCQpXCIsIFwiZ2lcIiksIFwiIFwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBodHRwczovL3BsYWluanMuY29tL2phdmFzY3JpcHQvYXR0cmlidXRlcy9hZGRpbmctcmVtb3ZpbmctYW5kLXRlc3RpbmctZm9yLWNsYXNzZXMtOS9cbiAgICBmdW5jdGlvbiBoYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3QgPyBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSA6IG5ldyBSZWdFeHAoXCJcXFxcYlwiICsgY2xhc3NOYW1lICsgXCJcXFxcYlwiKS50ZXN0KGVsLmNsYXNzTmFtZSk7XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvc2Nyb2xsWSNOb3Rlc1xuICAgIGZ1bmN0aW9uIGdldFBhZ2VPZmZzZXQoZG9jKSB7XG4gICAgICAgIHZhciBzdXBwb3J0UGFnZU9mZnNldCA9IHdpbmRvdy5wYWdlWE9mZnNldCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgaXNDU1MxQ29tcGF0ID0gKGRvYy5jb21wYXRNb2RlIHx8IFwiXCIpID09PSBcIkNTUzFDb21wYXRcIjtcbiAgICAgICAgdmFyIHggPSBzdXBwb3J0UGFnZU9mZnNldFxuICAgICAgICAgICAgPyB3aW5kb3cucGFnZVhPZmZzZXRcbiAgICAgICAgICAgIDogaXNDU1MxQ29tcGF0XG4gICAgICAgICAgICAgICAgPyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnRcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbExlZnQ7XG4gICAgICAgIHZhciB5ID0gc3VwcG9ydFBhZ2VPZmZzZXRcbiAgICAgICAgICAgID8gd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICA6IGlzQ1NTMUNvbXBhdFxuICAgICAgICAgICAgICAgID8gZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbFRvcDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICB5OiB5LFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyB3ZSBwcm92aWRlIGEgZnVuY3Rpb24gdG8gY29tcHV0ZSBjb25zdGFudHMgaW5zdGVhZFxuICAgIC8vIG9mIGFjY2Vzc2luZyB3aW5kb3cuKiBhcyBzb29uIGFzIHRoZSBtb2R1bGUgbmVlZHMgaXRcbiAgICAvLyBzbyB0aGF0IHdlIGRvIG5vdCBjb21wdXRlIGFueXRoaW5nIGlmIG5vdCBuZWVkZWRcbiAgICBmdW5jdGlvbiBnZXRBY3Rpb25zKCkge1xuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGV2ZW50cyB0byBiaW5kLiBJRTExIGltcGxlbWVudHMgcG9pbnRlckV2ZW50cyB3aXRob3V0XG4gICAgICAgIC8vIGEgcHJlZml4LCB3aGljaCBicmVha3MgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBJRTEwIGltcGxlbWVudGF0aW9uLlxuICAgICAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IFwicG9pbnRlcmRvd25cIixcbiAgICAgICAgICAgICAgICBtb3ZlOiBcInBvaW50ZXJtb3ZlXCIsXG4gICAgICAgICAgICAgICAgZW5kOiBcInBvaW50ZXJ1cFwiLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWRcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFwiTVNQb2ludGVyRG93blwiLFxuICAgICAgICAgICAgICAgICAgICBtb3ZlOiBcIk1TUG9pbnRlck1vdmVcIixcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBcIk1TUG9pbnRlclVwXCIsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJtb3VzZWRvd24gdG91Y2hzdGFydFwiLFxuICAgICAgICAgICAgICAgICAgICBtb3ZlOiBcIm1vdXNlbW92ZSB0b3VjaG1vdmVcIixcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBcIm1vdXNldXAgdG91Y2hlbmRcIixcbiAgICAgICAgICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9FdmVudExpc3RlbmVyT3B0aW9ucy9ibG9iL2doLXBhZ2VzL2V4cGxhaW5lci5tZFxuICAgIC8vIElzc3VlICM3ODVcbiAgICBmdW5jdGlvbiBnZXRTdXBwb3J0c1Bhc3NpdmUoKSB7XG4gICAgICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCBcInBhc3NpdmVcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBudWxsLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkgeyB9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cbiAgICAgICAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuQ1NTICYmIENTUy5zdXBwb3J0cyAmJiBDU1Muc3VwcG9ydHMoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpO1xuICAgIH1cbiAgICAvL2VuZHJlZ2lvblxuICAgIC8vcmVnaW9uIFJhbmdlIENhbGN1bGF0aW9uXG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBzaXplIG9mIGEgc3ViLXJhbmdlIGluIHJlbGF0aW9uIHRvIGEgZnVsbCByYW5nZS5cbiAgICBmdW5jdGlvbiBzdWJSYW5nZVJhdGlvKHBhLCBwYikge1xuICAgICAgICByZXR1cm4gMTAwIC8gKHBiIC0gcGEpO1xuICAgIH1cbiAgICAvLyAocGVyY2VudGFnZSkgSG93IG1hbnkgcGVyY2VudCBpcyB0aGlzIHZhbHVlIG9mIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gZnJvbVBlcmNlbnRhZ2UocmFuZ2UsIHZhbHVlLCBzdGFydFJhbmdlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgKiAxMDApIC8gKHJhbmdlW3N0YXJ0UmFuZ2UgKyAxXSAtIHJhbmdlW3N0YXJ0UmFuZ2VdKTtcbiAgICB9XG4gICAgLy8gKHBlcmNlbnRhZ2UpIFdoZXJlIGlzIHRoaXMgdmFsdWUgb24gdGhpcyByYW5nZT9cbiAgICBmdW5jdGlvbiB0b1BlcmNlbnRhZ2UocmFuZ2UsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmcm9tUGVyY2VudGFnZShyYW5nZSwgcmFuZ2VbMF0gPCAwID8gdmFsdWUgKyBNYXRoLmFicyhyYW5nZVswXSkgOiB2YWx1ZSAtIHJhbmdlWzBdLCAwKTtcbiAgICB9XG4gICAgLy8gKHZhbHVlKSBIb3cgbXVjaCBpcyB0aGlzIHBlcmNlbnRhZ2Ugb24gdGhpcyByYW5nZT9cbiAgICBmdW5jdGlvbiBpc1BlcmNlbnRhZ2UocmFuZ2UsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgKiAocmFuZ2VbMV0gLSByYW5nZVswXSkpIC8gMTAwICsgcmFuZ2VbMF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEoodmFsdWUsIGFycikge1xuICAgICAgICB2YXIgaiA9IDE7XG4gICAgICAgIHdoaWxlICh2YWx1ZSA+PSBhcnJbal0pIHtcbiAgICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gajtcbiAgICB9XG4gICAgLy8gKHBlcmNlbnRhZ2UpIElucHV0IGEgdmFsdWUsIGZpbmQgd2hlcmUsIG9uIGEgc2NhbGUgb2YgMC0xMDAsIGl0IGFwcGxpZXMuXG4gICAgZnVuY3Rpb24gdG9TdGVwcGluZyh4VmFsLCB4UGN0LCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPj0geFZhbC5zbGljZSgtMSlbMF0pIHtcbiAgICAgICAgICAgIHJldHVybiAxMDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB4VmFsKTtcbiAgICAgICAgdmFyIHZhID0geFZhbFtqIC0gMV07XG4gICAgICAgIHZhciB2YiA9IHhWYWxbal07XG4gICAgICAgIHZhciBwYSA9IHhQY3RbaiAtIDFdO1xuICAgICAgICB2YXIgcGIgPSB4UGN0W2pdO1xuICAgICAgICByZXR1cm4gcGEgKyB0b1BlcmNlbnRhZ2UoW3ZhLCB2Yl0sIHZhbHVlKSAvIHN1YlJhbmdlUmF0aW8ocGEsIHBiKTtcbiAgICB9XG4gICAgLy8gKHZhbHVlKSBJbnB1dCBhIHBlcmNlbnRhZ2UsIGZpbmQgd2hlcmUgaXQgaXMgb24gdGhlIHNwZWNpZmllZCByYW5nZS5cbiAgICBmdW5jdGlvbiBmcm9tU3RlcHBpbmcoeFZhbCwgeFBjdCwgdmFsdWUpIHtcbiAgICAgICAgLy8gVGhlcmUgaXMgbm8gcmFuZ2UgZ3JvdXAgdGhhdCBmaXRzIDEwMFxuICAgICAgICBpZiAodmFsdWUgPj0gMTAwKSB7XG4gICAgICAgICAgICByZXR1cm4geFZhbC5zbGljZSgtMSlbMF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB4UGN0KTtcbiAgICAgICAgdmFyIHZhID0geFZhbFtqIC0gMV07XG4gICAgICAgIHZhciB2YiA9IHhWYWxbal07XG4gICAgICAgIHZhciBwYSA9IHhQY3RbaiAtIDFdO1xuICAgICAgICB2YXIgcGIgPSB4UGN0W2pdO1xuICAgICAgICByZXR1cm4gaXNQZXJjZW50YWdlKFt2YSwgdmJdLCAodmFsdWUgLSBwYSkgKiBzdWJSYW5nZVJhdGlvKHBhLCBwYikpO1xuICAgIH1cbiAgICAvLyAocGVyY2VudGFnZSkgR2V0IHRoZSBzdGVwIHRoYXQgYXBwbGllcyBhdCBhIGNlcnRhaW4gdmFsdWUuXG4gICAgZnVuY3Rpb24gZ2V0U3RlcCh4UGN0LCB4U3RlcHMsIHNuYXAsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB4UGN0KTtcbiAgICAgICAgdmFyIGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIGIgPSB4UGN0W2pdO1xuICAgICAgICAvLyBJZiAnc25hcCcgaXMgc2V0LCBzdGVwcyBhcmUgdXNlZCBhcyBmaXhlZCBwb2ludHMgb24gdGhlIHNsaWRlci5cbiAgICAgICAgaWYgKHNuYXApIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgcG9zaXRpb24sIGEgb3IgYi5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAtIGEgPiAoYiAtIGEpIC8gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF4U3RlcHNbaiAtIDFdKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHhQY3RbaiAtIDFdICsgY2xvc2VzdCh2YWx1ZSAtIHhQY3RbaiAtIDFdLCB4U3RlcHNbaiAtIDFdKTtcbiAgICB9XG4gICAgLy9lbmRyZWdpb25cbiAgICAvL3JlZ2lvbiBTcGVjdHJ1bVxuICAgIHZhciBTcGVjdHJ1bSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gU3BlY3RydW0oZW50cnksIHNuYXAsIHNpbmdsZVN0ZXApIHtcbiAgICAgICAgICAgIHRoaXMueFBjdCA9IFtdO1xuICAgICAgICAgICAgdGhpcy54VmFsID0gW107XG4gICAgICAgICAgICB0aGlzLnhTdGVwcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy54TnVtU3RlcHMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXAgPSBbXTtcbiAgICAgICAgICAgIHRoaXMueFN0ZXBzID0gW3NpbmdsZVN0ZXAgfHwgZmFsc2VdO1xuICAgICAgICAgICAgdGhpcy54TnVtU3RlcHMgPSBbZmFsc2VdO1xuICAgICAgICAgICAgdGhpcy5zbmFwID0gc25hcDtcbiAgICAgICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgICAgIHZhciBvcmRlcmVkID0gW107XG4gICAgICAgICAgICAvLyBNYXAgdGhlIG9iamVjdCBrZXlzIHRvIGFuIGFycmF5LlxuICAgICAgICAgICAgT2JqZWN0LmtleXMoZW50cnkpLmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgb3JkZXJlZC5wdXNoKFthc0FycmF5KGVudHJ5W2luZGV4XSksIGluZGV4XSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFNvcnQgYWxsIGVudHJpZXMgYnkgdmFsdWUgKG51bWVyaWMgc29ydCkuXG4gICAgICAgICAgICBvcmRlcmVkLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYVswXVswXSAtIGJbMF1bMF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgYWxsIGVudHJpZXMgdG8gc3VicmFuZ2VzLlxuICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgb3JkZXJlZC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUVudHJ5UG9pbnQob3JkZXJlZFtpbmRleF1bMV0sIG9yZGVyZWRbaW5kZXhdWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBhY3R1YWwgc3RlcCB2YWx1ZXMuXG4gICAgICAgICAgICAvLyB4U3RlcHMgaXMgc29ydGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHhQY3QgYW5kIHhWYWwuXG4gICAgICAgICAgICB0aGlzLnhOdW1TdGVwcyA9IHRoaXMueFN0ZXBzLnNsaWNlKDApO1xuICAgICAgICAgICAgLy8gQ29udmVydCBhbGwgbnVtZXJpYyBzdGVwcyB0byB0aGUgcGVyY2VudGFnZSBvZiB0aGUgc3VicmFuZ2UgdGhleSByZXByZXNlbnQuXG4gICAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnhOdW1TdGVwcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVN0ZXBQb2ludChpbmRleCwgdGhpcy54TnVtU3RlcHNbaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0RGlzdGFuY2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBkaXN0YW5jZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnhOdW1TdGVwcy5sZW5ndGggLSAxOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2VzW2luZGV4XSA9IGZyb21QZXJjZW50YWdlKHRoaXMueFZhbCwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaXN0YW5jZXM7XG4gICAgICAgIH07XG4gICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcGVyY2VudHVhbCBkaXN0YW5jZSBvdmVyIHRoZSB3aG9sZSBzY2FsZSBvZiByYW5nZXMuXG4gICAgICAgIC8vIGRpcmVjdGlvbjogMCA9IGJhY2t3YXJkcyAvIDEgPSBmb3J3YXJkc1xuICAgICAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0QWJzb2x1dGVEaXN0YW5jZSA9IGZ1bmN0aW9uICh2YWx1ZSwgZGlzdGFuY2VzLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIHZhciB4UGN0X2luZGV4ID0gMDtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSByYW5nZSB3aGVyZSB0byBzdGFydCBjYWxjdWxhdGlvblxuICAgICAgICAgICAgaWYgKHZhbHVlIDwgdGhpcy54UGN0W3RoaXMueFBjdC5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICAgIHdoaWxlICh2YWx1ZSA+IHRoaXMueFBjdFt4UGN0X2luZGV4ICsgMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgeFBjdF9pbmRleCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSB0aGlzLnhQY3RbdGhpcy54UGN0Lmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICAgICAgeFBjdF9pbmRleCA9IHRoaXMueFBjdC5sZW5ndGggLSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgbG9va2luZyBiYWNrd2FyZHMgYW5kIHRoZSB2YWx1ZSBpcyBleGFjdGx5IGF0IGEgcmFuZ2Ugc2VwYXJhdG9yIHRoZW4gbG9vayBvbmUgcmFuZ2UgZnVydGhlclxuICAgICAgICAgICAgaWYgKCFkaXJlY3Rpb24gJiYgdmFsdWUgPT09IHRoaXMueFBjdFt4UGN0X2luZGV4ICsgMV0pIHtcbiAgICAgICAgICAgICAgICB4UGN0X2luZGV4Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGlzdGFuY2VzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2VzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3RhcnRfZmFjdG9yO1xuICAgICAgICAgICAgdmFyIHJlc3RfZmFjdG9yID0gMTtcbiAgICAgICAgICAgIHZhciByZXN0X3JlbF9kaXN0YW5jZSA9IGRpc3RhbmNlc1t4UGN0X2luZGV4XTtcbiAgICAgICAgICAgIHZhciByYW5nZV9wY3QgPSAwO1xuICAgICAgICAgICAgdmFyIHJlbF9yYW5nZV9kaXN0YW5jZSA9IDA7XG4gICAgICAgICAgICB2YXIgYWJzX2Rpc3RhbmNlX2NvdW50ZXIgPSAwO1xuICAgICAgICAgICAgdmFyIHJhbmdlX2NvdW50ZXIgPSAwO1xuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHdoYXQgcGFydCBvZiB0aGUgc3RhcnQgcmFuZ2UgdGhlIHZhbHVlIGlzXG4gICAgICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRfZmFjdG9yID0gKHZhbHVlIC0gdGhpcy54UGN0W3hQY3RfaW5kZXhdKSAvICh0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdIC0gdGhpcy54UGN0W3hQY3RfaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0X2ZhY3RvciA9ICh0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdIC0gdmFsdWUpIC8gKHRoaXMueFBjdFt4UGN0X2luZGV4ICsgMV0gLSB0aGlzLnhQY3RbeFBjdF9pbmRleF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRG8gdW50aWwgdGhlIGNvbXBsZXRlIGRpc3RhbmNlIGFjcm9zcyByYW5nZXMgaXMgY2FsY3VsYXRlZFxuICAgICAgICAgICAgd2hpbGUgKHJlc3RfcmVsX2Rpc3RhbmNlID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcGVyY2VudGFnZSBvZiB0b3RhbCByYW5nZVxuICAgICAgICAgICAgICAgIHJhbmdlX3BjdCA9IHRoaXMueFBjdFt4UGN0X2luZGV4ICsgMSArIHJhbmdlX2NvdW50ZXJdIC0gdGhpcy54UGN0W3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXTtcbiAgICAgICAgICAgICAgICAvLyBEZXRlY3QgaWYgdGhlIG1hcmdpbiwgcGFkZGluZyBvciBsaW1pdCBpcyBsYXJnZXIgdGhlbiB0aGUgY3VycmVudCByYW5nZSBhbmQgY2FsY3VsYXRlXG4gICAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlc1t4UGN0X2luZGV4ICsgcmFuZ2VfY291bnRlcl0gKiByZXN0X2ZhY3RvciArIDEwMCAtIHN0YXJ0X2ZhY3RvciAqIDEwMCA+IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBsYXJnZXIgdGhlbiB0YWtlIHRoZSBwZXJjZW50dWFsIGRpc3RhbmNlIG9mIHRoZSB3aG9sZSByYW5nZVxuICAgICAgICAgICAgICAgICAgICByZWxfcmFuZ2VfZGlzdGFuY2UgPSByYW5nZV9wY3QgKiBzdGFydF9mYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc3QgZmFjdG9yIG9mIHJlbGF0aXZlIHBlcmNlbnR1YWwgZGlzdGFuY2Ugc3RpbGwgdG8gYmUgY2FsY3VsYXRlZFxuICAgICAgICAgICAgICAgICAgICByZXN0X2ZhY3RvciA9IChyZXN0X3JlbF9kaXN0YW5jZSAtIDEwMCAqIHN0YXJ0X2ZhY3RvcikgLyBkaXN0YW5jZXNbeFBjdF9pbmRleCArIHJhbmdlX2NvdW50ZXJdO1xuICAgICAgICAgICAgICAgICAgICAvLyBTZXQgc3RhcnQgZmFjdG9yIHRvIDEgYXMgZm9yIG5leHQgcmFuZ2UgaXQgZG9lcyBub3QgYXBwbHkuXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0X2ZhY3RvciA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBzbWFsbGVyIG9yIGVxdWFsIHRoZW4gdGFrZSB0aGUgcGVyY2VudHVhbCBkaXN0YW5jZSBvZiB0aGUgY2FsY3VsYXRlIHBlcmNlbnR1YWwgcGFydCBvZiB0aGF0IHJhbmdlXG4gICAgICAgICAgICAgICAgICAgIHJlbF9yYW5nZV9kaXN0YW5jZSA9ICgoZGlzdGFuY2VzW3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXSAqIHJhbmdlX3BjdCkgLyAxMDApICogcmVzdF9mYWN0b3I7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5vIHJlc3QgbGVmdCBhcyB0aGUgcmVzdCBmaXRzIGluIGN1cnJlbnQgcmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgcmVzdF9mYWN0b3IgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGFic19kaXN0YW5jZV9jb3VudGVyID0gYWJzX2Rpc3RhbmNlX2NvdW50ZXIgLSByZWxfcmFuZ2VfZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIExpbWl0IHJhbmdlIHRvIGZpcnN0IHJhbmdlIHdoZW4gZGlzdGFuY2UgYmVjb21lcyBvdXRzaWRlIG9mIG1pbmltdW0gcmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMueFBjdC5sZW5ndGggKyByYW5nZV9jb3VudGVyID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlX2NvdW50ZXItLTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWJzX2Rpc3RhbmNlX2NvdW50ZXIgPSBhYnNfZGlzdGFuY2VfY291bnRlciArIHJlbF9yYW5nZV9kaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gTGltaXQgcmFuZ2UgdG8gbGFzdCByYW5nZSB3aGVuIGRpc3RhbmNlIGJlY29tZXMgb3V0c2lkZSBvZiBtYXhpbXVtIHJhbmdlXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnhQY3QubGVuZ3RoIC0gcmFuZ2VfY291bnRlciA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZV9jb3VudGVyKys7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVzdCBvZiByZWxhdGl2ZSBwZXJjZW50dWFsIGRpc3RhbmNlIHN0aWxsIHRvIGJlIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgICAgICByZXN0X3JlbF9kaXN0YW5jZSA9IGRpc3RhbmNlc1t4UGN0X2luZGV4ICsgcmFuZ2VfY291bnRlcl0gKiByZXN0X2ZhY3RvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSArIGFic19kaXN0YW5jZV9jb3VudGVyO1xuICAgICAgICB9O1xuICAgICAgICBTcGVjdHJ1bS5wcm90b3R5cGUudG9TdGVwcGluZyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0b1N0ZXBwaW5nKHRoaXMueFZhbCwgdGhpcy54UGN0LCB2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG4gICAgICAgIFNwZWN0cnVtLnByb3RvdHlwZS5mcm9tU3RlcHBpbmcgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tU3RlcHBpbmcodGhpcy54VmFsLCB0aGlzLnhQY3QsIHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmdldFN0ZXAgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gZ2V0U3RlcCh0aGlzLnhQY3QsIHRoaXMueFN0ZXBzLCB0aGlzLnNuYXAsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmdldERlZmF1bHRTdGVwID0gZnVuY3Rpb24gKHZhbHVlLCBpc0Rvd24sIHNpemUpIHtcbiAgICAgICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgdGhpcy54UGN0KTtcbiAgICAgICAgICAgIC8vIFdoZW4gYXQgdGhlIHRvcCBvciBzdGVwcGluZyBkb3duLCBsb29rIGF0IHRoZSBwcmV2aW91cyBzdWItcmFuZ2VcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwIHx8IChpc0Rvd24gJiYgdmFsdWUgPT09IHRoaXMueFBjdFtqIC0gMV0pKSB7XG4gICAgICAgICAgICAgICAgaiA9IE1hdGgubWF4KGogLSAxLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAodGhpcy54VmFsW2pdIC0gdGhpcy54VmFsW2ogLSAxXSkgLyBzaXplO1xuICAgICAgICB9O1xuICAgICAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0TmVhcmJ5U3RlcHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgdGhpcy54UGN0KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3RlcEJlZm9yZToge1xuICAgICAgICAgICAgICAgICAgICBzdGFydFZhbHVlOiB0aGlzLnhWYWxbaiAtIDJdLFxuICAgICAgICAgICAgICAgICAgICBzdGVwOiB0aGlzLnhOdW1TdGVwc1tqIC0gMl0sXG4gICAgICAgICAgICAgICAgICAgIGhpZ2hlc3RTdGVwOiB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2ogLSAyXSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRoaXNTdGVwOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IHRoaXMueFZhbFtqIC0gMV0sXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IHRoaXMueE51bVN0ZXBzW2ogLSAxXSxcbiAgICAgICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaiAtIDFdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RlcEFmdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IHRoaXMueFZhbFtqXSxcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogdGhpcy54TnVtU3RlcHNbal0sXG4gICAgICAgICAgICAgICAgICAgIGhpZ2hlc3RTdGVwOiB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2pdLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBTcGVjdHJ1bS5wcm90b3R5cGUuY291bnRTdGVwRGVjaW1hbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RlcERlY2ltYWxzID0gdGhpcy54TnVtU3RlcHMubWFwKGNvdW50RGVjaW1hbHMpO1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIHN0ZXBEZWNpbWFscyk7XG4gICAgICAgIH07XG4gICAgICAgIFNwZWN0cnVtLnByb3RvdHlwZS5oYXNOb1NpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy54VmFsWzBdID09PSB0aGlzLnhWYWxbdGhpcy54VmFsLmxlbmd0aCAtIDFdO1xuICAgICAgICB9O1xuICAgICAgICAvLyBPdXRzaWRlIHRlc3RpbmdcbiAgICAgICAgU3BlY3RydW0ucHJvdG90eXBlLmNvbnZlcnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0ZXAodGhpcy50b1N0ZXBwaW5nKHZhbHVlKSk7XG4gICAgICAgIH07XG4gICAgICAgIFNwZWN0cnVtLnByb3RvdHlwZS5oYW5kbGVFbnRyeVBvaW50ID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIHBlcmNlbnRhZ2U7XG4gICAgICAgICAgICAvLyBDb3ZlcnQgbWluL21heCBzeW50YXggdG8gMCBhbmQgMTAwLlxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbmRleCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSAxMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZXJjZW50YWdlID0gcGFyc2VGbG9hdChpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgY29ycmVjdCBpbnB1dC5cbiAgICAgICAgICAgIGlmICghaXNOdW1lcmljKHBlcmNlbnRhZ2UpIHx8ICFpc051bWVyaWModmFsdWVbMF0pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3JhbmdlJyB2YWx1ZSBpc24ndCBudW1lcmljLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFN0b3JlIHZhbHVlcy5cbiAgICAgICAgICAgIHRoaXMueFBjdC5wdXNoKHBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgdGhpcy54VmFsLnB1c2godmFsdWVbMF0pO1xuICAgICAgICAgICAgdmFyIHZhbHVlMSA9IE51bWJlcih2YWx1ZVsxXSk7XG4gICAgICAgICAgICAvLyBOYU4gd2lsbCBldmFsdWF0ZSB0byBmYWxzZSB0b28sIGJ1dCB0byBrZWVwXG4gICAgICAgICAgICAvLyBsb2dnaW5nIGNsZWFyLCBzZXQgc3RlcCBleHBsaWNpdGx5LiBNYWtlIHN1cmVcbiAgICAgICAgICAgIC8vIG5vdCB0byBvdmVycmlkZSB0aGUgJ3N0ZXAnIHNldHRpbmcgd2l0aCBmYWxzZS5cbiAgICAgICAgICAgIGlmICghcGVyY2VudGFnZSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4odmFsdWUxKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnhTdGVwc1swXSA9IHZhbHVlMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnhTdGVwcy5wdXNoKGlzTmFOKHZhbHVlMSkgPyBmYWxzZSA6IHZhbHVlMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwLnB1c2goMCk7XG4gICAgICAgIH07XG4gICAgICAgIFNwZWN0cnVtLnByb3RvdHlwZS5oYW5kbGVTdGVwUG9pbnQgPSBmdW5jdGlvbiAoaSwgbikge1xuICAgICAgICAgICAgLy8gSWdub3JlICdmYWxzZScgc3RlcHBpbmcuXG4gICAgICAgICAgICBpZiAoIW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTdGVwIG92ZXIgemVyby1sZW5ndGggcmFuZ2VzICgjOTQ4KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnhWYWxbaV0gPT09IHRoaXMueFZhbFtpICsgMV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnhTdGVwc1tpXSA9IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaV0gPSB0aGlzLnhWYWxbaV07XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmFjdG9yIHRvIHJhbmdlIHJhdGlvXG4gICAgICAgICAgICB0aGlzLnhTdGVwc1tpXSA9XG4gICAgICAgICAgICAgICAgZnJvbVBlcmNlbnRhZ2UoW3RoaXMueFZhbFtpXSwgdGhpcy54VmFsW2kgKyAxXV0sIG4sIDApIC8gc3ViUmFuZ2VSYXRpbyh0aGlzLnhQY3RbaV0sIHRoaXMueFBjdFtpICsgMV0pO1xuICAgICAgICAgICAgdmFyIHRvdGFsU3RlcHMgPSAodGhpcy54VmFsW2kgKyAxXSAtIHRoaXMueFZhbFtpXSkgLyB0aGlzLnhOdW1TdGVwc1tpXTtcbiAgICAgICAgICAgIHZhciBoaWdoZXN0U3RlcCA9IE1hdGguY2VpbChOdW1iZXIodG90YWxTdGVwcy50b0ZpeGVkKDMpKSAtIDEpO1xuICAgICAgICAgICAgdmFyIHN0ZXAgPSB0aGlzLnhWYWxbaV0gKyB0aGlzLnhOdW1TdGVwc1tpXSAqIGhpZ2hlc3RTdGVwO1xuICAgICAgICAgICAgdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtpXSA9IHN0ZXA7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTcGVjdHJ1bTtcbiAgICB9KCkpO1xuICAgIC8vZW5kcmVnaW9uXG4gICAgLy9yZWdpb24gT3B0aW9uc1xuICAgIC8qXHRFdmVyeSBpbnB1dCBvcHRpb24gaXMgdGVzdGVkIGFuZCBwYXJzZWQuIFRoaXMgd2lsbCBwcmV2ZW50XG4gICAgICAgIGVuZGxlc3MgdmFsaWRhdGlvbiBpbiBpbnRlcm5hbCBtZXRob2RzLiBUaGVzZSB0ZXN0cyBhcmVcbiAgICAgICAgc3RydWN0dXJlZCB3aXRoIGFuIGl0ZW0gZm9yIGV2ZXJ5IG9wdGlvbiBhdmFpbGFibGUuIEFuXG4gICAgICAgIG9wdGlvbiBjYW4gYmUgbWFya2VkIGFzIHJlcXVpcmVkIGJ5IHNldHRpbmcgdGhlICdyJyBmbGFnLlxuICAgICAgICBUaGUgdGVzdGluZyBmdW5jdGlvbiBpcyBwcm92aWRlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgICAgICAgIC0gVGhlIHByb3ZpZGVkIHZhbHVlIGZvciB0aGUgb3B0aW9uO1xuICAgICAgICAgICAgLSBBIHJlZmVyZW5jZSB0byB0aGUgb3B0aW9ucyBvYmplY3Q7XG4gICAgICAgICAgICAtIFRoZSBuYW1lIGZvciB0aGUgb3B0aW9uO1xuXG4gICAgICAgIFRoZSB0ZXN0aW5nIGZ1bmN0aW9uIHJldHVybnMgZmFsc2Ugd2hlbiBhbiBlcnJvciBpcyBkZXRlY3RlZCxcbiAgICAgICAgb3IgdHJ1ZSB3aGVuIGV2ZXJ5dGhpbmcgaXMgT0suIEl0IGNhbiBhbHNvIG1vZGlmeSB0aGUgb3B0aW9uXG4gICAgICAgIG9iamVjdCwgdG8gbWFrZSBzdXJlIGFsbCB2YWx1ZXMgY2FuIGJlIGNvcnJlY3RseSBsb29wZWQgZWxzZXdoZXJlLiAqL1xuICAgIC8vcmVnaW9uIERlZmF1bHRzXG4gICAgdmFyIGRlZmF1bHRGb3JtYXR0ZXIgPSB7XG4gICAgICAgIHRvOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHZhbHVlLnRvRml4ZWQoMik7XG4gICAgICAgIH0sXG4gICAgICAgIGZyb206IE51bWJlcixcbiAgICB9O1xuICAgIHZhciBjc3NDbGFzc2VzID0ge1xuICAgICAgICB0YXJnZXQ6IFwidGFyZ2V0XCIsXG4gICAgICAgIGJhc2U6IFwiYmFzZVwiLFxuICAgICAgICBvcmlnaW46IFwib3JpZ2luXCIsXG4gICAgICAgIGhhbmRsZTogXCJoYW5kbGVcIixcbiAgICAgICAgaGFuZGxlTG93ZXI6IFwiaGFuZGxlLWxvd2VyXCIsXG4gICAgICAgIGhhbmRsZVVwcGVyOiBcImhhbmRsZS11cHBlclwiLFxuICAgICAgICB0b3VjaEFyZWE6IFwidG91Y2gtYXJlYVwiLFxuICAgICAgICBob3Jpem9udGFsOiBcImhvcml6b250YWxcIixcbiAgICAgICAgdmVydGljYWw6IFwidmVydGljYWxcIixcbiAgICAgICAgYmFja2dyb3VuZDogXCJiYWNrZ3JvdW5kXCIsXG4gICAgICAgIGNvbm5lY3Q6IFwiY29ubmVjdFwiLFxuICAgICAgICBjb25uZWN0czogXCJjb25uZWN0c1wiLFxuICAgICAgICBsdHI6IFwibHRyXCIsXG4gICAgICAgIHJ0bDogXCJydGxcIixcbiAgICAgICAgdGV4dERpcmVjdGlvbkx0cjogXCJ0eHQtZGlyLWx0clwiLFxuICAgICAgICB0ZXh0RGlyZWN0aW9uUnRsOiBcInR4dC1kaXItcnRsXCIsXG4gICAgICAgIGRyYWdnYWJsZTogXCJkcmFnZ2FibGVcIixcbiAgICAgICAgZHJhZzogXCJzdGF0ZS1kcmFnXCIsXG4gICAgICAgIHRhcDogXCJzdGF0ZS10YXBcIixcbiAgICAgICAgYWN0aXZlOiBcImFjdGl2ZVwiLFxuICAgICAgICB0b29sdGlwOiBcInRvb2x0aXBcIixcbiAgICAgICAgcGlwczogXCJwaXBzXCIsXG4gICAgICAgIHBpcHNIb3Jpem9udGFsOiBcInBpcHMtaG9yaXpvbnRhbFwiLFxuICAgICAgICBwaXBzVmVydGljYWw6IFwicGlwcy12ZXJ0aWNhbFwiLFxuICAgICAgICBtYXJrZXI6IFwibWFya2VyXCIsXG4gICAgICAgIG1hcmtlckhvcml6b250YWw6IFwibWFya2VyLWhvcml6b250YWxcIixcbiAgICAgICAgbWFya2VyVmVydGljYWw6IFwibWFya2VyLXZlcnRpY2FsXCIsXG4gICAgICAgIG1hcmtlck5vcm1hbDogXCJtYXJrZXItbm9ybWFsXCIsXG4gICAgICAgIG1hcmtlckxhcmdlOiBcIm1hcmtlci1sYXJnZVwiLFxuICAgICAgICBtYXJrZXJTdWI6IFwibWFya2VyLXN1YlwiLFxuICAgICAgICB2YWx1ZTogXCJ2YWx1ZVwiLFxuICAgICAgICB2YWx1ZUhvcml6b250YWw6IFwidmFsdWUtaG9yaXpvbnRhbFwiLFxuICAgICAgICB2YWx1ZVZlcnRpY2FsOiBcInZhbHVlLXZlcnRpY2FsXCIsXG4gICAgICAgIHZhbHVlTm9ybWFsOiBcInZhbHVlLW5vcm1hbFwiLFxuICAgICAgICB2YWx1ZUxhcmdlOiBcInZhbHVlLWxhcmdlXCIsXG4gICAgICAgIHZhbHVlU3ViOiBcInZhbHVlLXN1YlwiLFxuICAgIH07XG4gICAgLy8gTmFtZXNwYWNlcyBvZiBpbnRlcm5hbCBldmVudCBsaXN0ZW5lcnNcbiAgICB2YXIgSU5URVJOQUxfRVZFTlRfTlMgPSB7XG4gICAgICAgIHRvb2x0aXBzOiBcIi5fX3Rvb2x0aXBzXCIsXG4gICAgICAgIGFyaWE6IFwiLl9fYXJpYVwiLFxuICAgIH07XG4gICAgLy9lbmRyZWdpb25cbiAgICBmdW5jdGlvbiB0ZXN0U3RlcChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3N0ZXAnIGlzIG5vdCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgc3RlcCBvcHRpb24gY2FuIHN0aWxsIGJlIHVzZWQgdG8gc2V0IHN0ZXBwaW5nXG4gICAgICAgIC8vIGZvciBsaW5lYXIgc2xpZGVycy4gT3ZlcndyaXR0ZW4gaWYgc2V0IGluICdyYW5nZScuXG4gICAgICAgIHBhcnNlZC5zaW5nbGVTdGVwID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RLZXlib2FyZFBhZ2VNdWx0aXBsaWVyKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAna2V5Ym9hcmRQYWdlTXVsdGlwbGllcicgaXMgbm90IG51bWVyaWMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZFBhZ2VNdWx0aXBsaWVyID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RLZXlib2FyZE11bHRpcGxpZXIocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdrZXlib2FyZE11bHRpcGxpZXInIGlzIG5vdCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQua2V5Ym9hcmRNdWx0aXBsaWVyID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RLZXlib2FyZERlZmF1bHRTdGVwKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAna2V5Ym9hcmREZWZhdWx0U3RlcCcgaXMgbm90IG51bWVyaWMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZERlZmF1bHRTdGVwID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RSYW5nZShwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIEZpbHRlciBpbmNvcnJlY3QgaW5wdXQuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwib2JqZWN0XCIgfHwgQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdyYW5nZScgaXMgbm90IGFuIG9iamVjdC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2F0Y2ggbWlzc2luZyBzdGFydCBvciBlbmQuXG4gICAgICAgIGlmIChlbnRyeS5taW4gPT09IHVuZGVmaW5lZCB8fCBlbnRyeS5tYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogTWlzc2luZyAnbWluJyBvciAnbWF4JyBpbiAncmFuZ2UnLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuc3BlY3RydW0gPSBuZXcgU3BlY3RydW0oZW50cnksIHBhcnNlZC5zbmFwIHx8IGZhbHNlLCBwYXJzZWQuc2luZ2xlU3RlcCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RTdGFydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGVudHJ5ID0gYXNBcnJheShlbnRyeSk7XG4gICAgICAgIC8vIFZhbGlkYXRlIGlucHV0LiBWYWx1ZXMgYXJlbid0IHRlc3RlZCwgYXMgdGhlIHB1YmxpYyAudmFsIG1ldGhvZFxuICAgICAgICAvLyB3aWxsIGFsd2F5cyBwcm92aWRlIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkgfHwgIWVudHJ5Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3N0YXJ0JyBvcHRpb24gaXMgaW5jb3JyZWN0LlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdG9yZSB0aGUgbnVtYmVyIG9mIGhhbmRsZXMuXG4gICAgICAgIHBhcnNlZC5oYW5kbGVzID0gZW50cnkubGVuZ3RoO1xuICAgICAgICAvLyBXaGVuIHRoZSBzbGlkZXIgaXMgaW5pdGlhbGl6ZWQsIHRoZSAudmFsIG1ldGhvZCB3aWxsXG4gICAgICAgIC8vIGJlIGNhbGxlZCB3aXRoIHRoZSBzdGFydCBvcHRpb25zLlxuICAgICAgICBwYXJzZWQuc3RhcnQgPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdFNuYXAocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3NuYXAnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRW5mb3JjZSAxMDAlIHN0ZXBwaW5nIHdpdGhpbiBzdWJyYW5nZXMuXG4gICAgICAgIHBhcnNlZC5zbmFwID0gZW50cnk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RBbmltYXRlKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdhbmltYXRlJyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuZm9yY2UgMTAwJSBzdGVwcGluZyB3aXRoaW4gc3VicmFuZ2VzLlxuICAgICAgICBwYXJzZWQuYW5pbWF0ZSA9IGVudHJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0QW5pbWF0aW9uRHVyYXRpb24ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnYW5pbWF0aW9uRHVyYXRpb24nIG9wdGlvbiBtdXN0IGJlIGEgbnVtYmVyLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuYW5pbWF0aW9uRHVyYXRpb24gPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdENvbm5lY3QocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICB2YXIgY29ubmVjdCA9IFtmYWxzZV07XG4gICAgICAgIHZhciBpO1xuICAgICAgICAvLyBNYXAgbGVnYWN5IG9wdGlvbnNcbiAgICAgICAgaWYgKGVudHJ5ID09PSBcImxvd2VyXCIpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gW3RydWUsIGZhbHNlXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChlbnRyeSA9PT0gXCJ1cHBlclwiKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFtmYWxzZSwgdHJ1ZV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlIGJvb2xlYW4gb3B0aW9uc1xuICAgICAgICBpZiAoZW50cnkgPT09IHRydWUgfHwgZW50cnkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbm5lY3QucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25uZWN0LnB1c2goZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlamVjdCBpbnZhbGlkIGlucHV0XG4gICAgICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSB8fCAhZW50cnkubGVuZ3RoIHx8IGVudHJ5Lmxlbmd0aCAhPT0gcGFyc2VkLmhhbmRsZXMgKyAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnY29ubmVjdCcgb3B0aW9uIGRvZXNuJ3QgbWF0Y2ggaGFuZGxlIGNvdW50LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbm5lY3QgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuY29ubmVjdCA9IGNvbm5lY3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RPcmllbnRhdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFNldCBvcmllbnRhdGlvbiB0byBhbiBhIG51bWVyaWNhbCB2YWx1ZSBmb3IgZWFzeVxuICAgICAgICAvLyBhcnJheSBzZWxlY3Rpb24uXG4gICAgICAgIHN3aXRjaCAoZW50cnkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob3Jpem9udGFsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLm9ydCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidmVydGljYWxcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQub3J0ID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ29yaWVudGF0aW9uJyBvcHRpb24gaXMgaW52YWxpZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdE1hcmdpbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ21hcmdpbicgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSXNzdWUgIzU4MlxuICAgICAgICBpZiAoZW50cnkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQubWFyZ2luID0gcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdExpbWl0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnbGltaXQnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5saW1pdCA9IHBhcnNlZC5zcGVjdHJ1bS5nZXREaXN0YW5jZShlbnRyeSk7XG4gICAgICAgIGlmICghcGFyc2VkLmxpbWl0IHx8IHBhcnNlZC5oYW5kbGVzIDwgMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2xpbWl0JyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMgd2l0aCAyIG9yIG1vcmUgaGFuZGxlcy5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdFBhZGRpbmcocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSAmJiAhQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBudW1lcmljIG9yIGFycmF5IG9mIGV4YWN0bHkgMiBudW1iZXJzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbnRyeSkgJiYgIShlbnRyeS5sZW5ndGggPT09IDIgfHwgaXNOdW1lcmljKGVudHJ5WzBdKSB8fCBpc051bWVyaWMoZW50cnlbMV0pKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMgb3IgYXJyYXkgb2YgZXhhY3RseSAyIG51bWJlcnMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbnRyeSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gW2VudHJ5LCBlbnRyeV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gJ2dldERpc3RhbmNlJyByZXR1cm5zIGZhbHNlIGZvciBpbnZhbGlkIHZhbHVlcy5cbiAgICAgICAgcGFyc2VkLnBhZGRpbmcgPSBbcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5WzBdKSwgcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5WzFdKV07XG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnNlZC5zcGVjdHJ1bS54TnVtU3RlcHMubGVuZ3RoIC0gMTsgaW5kZXgrKykge1xuICAgICAgICAgICAgLy8gbGFzdCBcInJhbmdlXCIgY2FuJ3QgY29udGFpbiBzdGVwIHNpemUgYXMgaXQgaXMgcHVyZWx5IGFuIGVuZHBvaW50LlxuICAgICAgICAgICAgaWYgKHBhcnNlZC5wYWRkaW5nWzBdW2luZGV4XSA8IDAgfHwgcGFyc2VkLnBhZGRpbmdbMV1baW5kZXhdIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcihzKS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvdGFsUGFkZGluZyA9IGVudHJ5WzBdICsgZW50cnlbMV07XG4gICAgICAgIHZhciBmaXJzdFZhbHVlID0gcGFyc2VkLnNwZWN0cnVtLnhWYWxbMF07XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBwYXJzZWQuc3BlY3RydW0ueFZhbFtwYXJzZWQuc3BlY3RydW0ueFZhbC5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHRvdGFsUGFkZGluZyAvIChsYXN0VmFsdWUgLSBmaXJzdFZhbHVlKSA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBub3QgZXhjZWVkIDEwMCUgb2YgdGhlIHJhbmdlLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0RGlyZWN0aW9uKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gU2V0IGRpcmVjdGlvbiBhcyBhIG51bWVyaWNhbCB2YWx1ZSBmb3IgZWFzeSBwYXJzaW5nLlxuICAgICAgICAvLyBJbnZlcnQgY29ubmVjdGlvbiBmb3IgUlRMIHNsaWRlcnMsIHNvIHRoYXQgdGhlIHByb3BlclxuICAgICAgICAvLyBoYW5kbGVzIGdldCB0aGUgY29ubmVjdC9iYWNrZ3JvdW5kIGNsYXNzZXMuXG4gICAgICAgIHN3aXRjaCAoZW50cnkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJsdHJcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQuZGlyID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJydGxcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQuZGlyID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2RpcmVjdGlvbicgb3B0aW9uIHdhcyBub3QgcmVjb2duaXplZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdEJlaGF2aW91cihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgaW5wdXQgaXMgYSBzdHJpbmcuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdiZWhhdmlvdXInIG11c3QgYmUgYSBzdHJpbmcgY29udGFpbmluZyBvcHRpb25zLlwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgc3RyaW5nIGNvbnRhaW5zIGFueSBrZXl3b3Jkcy5cbiAgICAgICAgLy8gTm9uZSBhcmUgcmVxdWlyZWQuXG4gICAgICAgIHZhciB0YXAgPSBlbnRyeS5pbmRleE9mKFwidGFwXCIpID49IDA7XG4gICAgICAgIHZhciBkcmFnID0gZW50cnkuaW5kZXhPZihcImRyYWdcIikgPj0gMDtcbiAgICAgICAgdmFyIGZpeGVkID0gZW50cnkuaW5kZXhPZihcImZpeGVkXCIpID49IDA7XG4gICAgICAgIHZhciBzbmFwID0gZW50cnkuaW5kZXhPZihcInNuYXBcIikgPj0gMDtcbiAgICAgICAgdmFyIGhvdmVyID0gZW50cnkuaW5kZXhPZihcImhvdmVyXCIpID49IDA7XG4gICAgICAgIHZhciB1bmNvbnN0cmFpbmVkID0gZW50cnkuaW5kZXhPZihcInVuY29uc3RyYWluZWRcIikgPj0gMDtcbiAgICAgICAgdmFyIGRyYWdBbGwgPSBlbnRyeS5pbmRleE9mKFwiZHJhZy1hbGxcIikgPj0gMDtcbiAgICAgICAgdmFyIHNtb290aFN0ZXBzID0gZW50cnkuaW5kZXhPZihcInNtb290aC1zdGVwc1wiKSA+PSAwO1xuICAgICAgICBpZiAoZml4ZWQpIHtcbiAgICAgICAgICAgIGlmIChwYXJzZWQuaGFuZGxlcyAhPT0gMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdmaXhlZCcgYmVoYXZpb3VyIG11c3QgYmUgdXNlZCB3aXRoIDIgaGFuZGxlc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVzZSBtYXJnaW4gdG8gZW5mb3JjZSBmaXhlZCBzdGF0ZVxuICAgICAgICAgICAgdGVzdE1hcmdpbihwYXJzZWQsIHBhcnNlZC5zdGFydFsxXSAtIHBhcnNlZC5zdGFydFswXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVuY29uc3RyYWluZWQgJiYgKHBhcnNlZC5tYXJnaW4gfHwgcGFyc2VkLmxpbWl0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ3VuY29uc3RyYWluZWQnIGJlaGF2aW91ciBjYW5ub3QgYmUgdXNlZCB3aXRoIG1hcmdpbiBvciBsaW1pdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuZXZlbnRzID0ge1xuICAgICAgICAgICAgdGFwOiB0YXAgfHwgc25hcCxcbiAgICAgICAgICAgIGRyYWc6IGRyYWcsXG4gICAgICAgICAgICBkcmFnQWxsOiBkcmFnQWxsLFxuICAgICAgICAgICAgc21vb3RoU3RlcHM6IHNtb290aFN0ZXBzLFxuICAgICAgICAgICAgZml4ZWQ6IGZpeGVkLFxuICAgICAgICAgICAgc25hcDogc25hcCxcbiAgICAgICAgICAgIGhvdmVyOiBob3ZlcixcbiAgICAgICAgICAgIHVuY29uc3RyYWluZWQ6IHVuY29uc3RyYWluZWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRlc3RUb29sdGlwcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkgPT09IHRydWUgfHwgaXNWYWxpZFBhcnRpYWxGb3JtYXR0ZXIoZW50cnkpKSB7XG4gICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVudHJ5ID0gYXNBcnJheShlbnRyeSk7XG4gICAgICAgICAgICBpZiAoZW50cnkubGVuZ3RoICE9PSBwYXJzZWQuaGFuZGxlcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6IG11c3QgcGFzcyBhIGZvcm1hdHRlciBmb3IgYWxsIGhhbmRsZXMuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW50cnkuZm9yRWFjaChmdW5jdGlvbiAoZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXR0ZXIgIT09IFwiYm9vbGVhblwiICYmICFpc1ZhbGlkUGFydGlhbEZvcm1hdHRlcihmb3JtYXR0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICd0b29sdGlwcycgbXVzdCBiZSBwYXNzZWQgYSBmb3JtYXR0ZXIgb3IgJ2ZhbHNlJy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0SGFuZGxlQXR0cmlidXRlcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeS5sZW5ndGggIT09IHBhcnNlZC5oYW5kbGVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiBtdXN0IHBhc3MgYSBhdHRyaWJ1dGVzIGZvciBhbGwgaGFuZGxlcy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VkLmhhbmRsZUF0dHJpYnV0ZXMgPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdEFyaWFGb3JtYXQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzVmFsaWRQYXJ0aWFsRm9ybWF0dGVyKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2FyaWFGb3JtYXQnIHJlcXVpcmVzICd0bycgbWV0aG9kLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQuYXJpYUZvcm1hdCA9IGVudHJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0Rm9ybWF0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkRm9ybWF0dGVyKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogJ2Zvcm1hdCcgcmVxdWlyZXMgJ3RvJyBhbmQgJ2Zyb20nIG1ldGhvZHMuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5mb3JtYXQgPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdEtleWJvYXJkU3VwcG9ydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAna2V5Ym9hcmRTdXBwb3J0JyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZFN1cHBvcnQgPSBlbnRyeTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdGVzdERvY3VtZW50RWxlbWVudChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYW4gYWR2YW5jZWQgb3B0aW9uLiBQYXNzZWQgdmFsdWVzIGFyZSB1c2VkIHdpdGhvdXQgdmFsaWRhdGlvbi5cbiAgICAgICAgcGFyc2VkLmRvY3VtZW50RWxlbWVudCA9IGVudHJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0Q3NzUHJlZml4KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJzdHJpbmdcIiAmJiBlbnRyeSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdjc3NQcmVmaXgnIG11c3QgYmUgYSBzdHJpbmcgb3IgYGZhbHNlYC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VkLmNzc1ByZWZpeCA9IGVudHJ5O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0ZXN0Q3NzQ2xhc3NlcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICdjc3NDbGFzc2VzJyBtdXN0IGJlIGFuIG9iamVjdC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJzZWQuY3NzUHJlZml4ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBwYXJzZWQuY3NzQ2xhc3NlcyA9IHt9O1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoZW50cnkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHBhcnNlZC5jc3NDbGFzc2VzW2tleV0gPSBwYXJzZWQuY3NzUHJlZml4ICsgZW50cnlba2V5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXMgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUZXN0IGFsbCBkZXZlbG9wZXIgc2V0dGluZ3MgYW5kIHBhcnNlIHRvIGFzc3VtcHRpb24tc2FmZSB2YWx1ZXMuXG4gICAgZnVuY3Rpb24gdGVzdE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICAvLyBUbyBwcm92ZSBhIGZpeCBmb3IgIzUzNywgZnJlZXplIG9wdGlvbnMgaGVyZS5cbiAgICAgICAgLy8gSWYgdGhlIG9iamVjdCBpcyBtb2RpZmllZCwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gICAgICAgIC8vIE9iamVjdC5mcmVlemUob3B0aW9ucyk7XG4gICAgICAgIHZhciBwYXJzZWQgPSB7XG4gICAgICAgICAgICBtYXJnaW46IG51bGwsXG4gICAgICAgICAgICBsaW1pdDogbnVsbCxcbiAgICAgICAgICAgIHBhZGRpbmc6IG51bGwsXG4gICAgICAgICAgICBhbmltYXRlOiB0cnVlLFxuICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IDMwMCxcbiAgICAgICAgICAgIGFyaWFGb3JtYXQ6IGRlZmF1bHRGb3JtYXR0ZXIsXG4gICAgICAgICAgICBmb3JtYXQ6IGRlZmF1bHRGb3JtYXR0ZXIsXG4gICAgICAgIH07XG4gICAgICAgIC8vIFRlc3RzIGFyZSBleGVjdXRlZCBpbiB0aGUgb3JkZXIgdGhleSBhcmUgcHJlc2VudGVkIGhlcmUuXG4gICAgICAgIHZhciB0ZXN0cyA9IHtcbiAgICAgICAgICAgIHN0ZXA6IHsgcjogZmFsc2UsIHQ6IHRlc3RTdGVwIH0sXG4gICAgICAgICAgICBrZXlib2FyZFBhZ2VNdWx0aXBsaWVyOiB7IHI6IGZhbHNlLCB0OiB0ZXN0S2V5Ym9hcmRQYWdlTXVsdGlwbGllciB9LFxuICAgICAgICAgICAga2V5Ym9hcmRNdWx0aXBsaWVyOiB7IHI6IGZhbHNlLCB0OiB0ZXN0S2V5Ym9hcmRNdWx0aXBsaWVyIH0sXG4gICAgICAgICAgICBrZXlib2FyZERlZmF1bHRTdGVwOiB7IHI6IGZhbHNlLCB0OiB0ZXN0S2V5Ym9hcmREZWZhdWx0U3RlcCB9LFxuICAgICAgICAgICAgc3RhcnQ6IHsgcjogdHJ1ZSwgdDogdGVzdFN0YXJ0IH0sXG4gICAgICAgICAgICBjb25uZWN0OiB7IHI6IHRydWUsIHQ6IHRlc3RDb25uZWN0IH0sXG4gICAgICAgICAgICBkaXJlY3Rpb246IHsgcjogdHJ1ZSwgdDogdGVzdERpcmVjdGlvbiB9LFxuICAgICAgICAgICAgc25hcDogeyByOiBmYWxzZSwgdDogdGVzdFNuYXAgfSxcbiAgICAgICAgICAgIGFuaW1hdGU6IHsgcjogZmFsc2UsIHQ6IHRlc3RBbmltYXRlIH0sXG4gICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogeyByOiBmYWxzZSwgdDogdGVzdEFuaW1hdGlvbkR1cmF0aW9uIH0sXG4gICAgICAgICAgICByYW5nZTogeyByOiB0cnVlLCB0OiB0ZXN0UmFuZ2UgfSxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiB7IHI6IGZhbHNlLCB0OiB0ZXN0T3JpZW50YXRpb24gfSxcbiAgICAgICAgICAgIG1hcmdpbjogeyByOiBmYWxzZSwgdDogdGVzdE1hcmdpbiB9LFxuICAgICAgICAgICAgbGltaXQ6IHsgcjogZmFsc2UsIHQ6IHRlc3RMaW1pdCB9LFxuICAgICAgICAgICAgcGFkZGluZzogeyByOiBmYWxzZSwgdDogdGVzdFBhZGRpbmcgfSxcbiAgICAgICAgICAgIGJlaGF2aW91cjogeyByOiB0cnVlLCB0OiB0ZXN0QmVoYXZpb3VyIH0sXG4gICAgICAgICAgICBhcmlhRm9ybWF0OiB7IHI6IGZhbHNlLCB0OiB0ZXN0QXJpYUZvcm1hdCB9LFxuICAgICAgICAgICAgZm9ybWF0OiB7IHI6IGZhbHNlLCB0OiB0ZXN0Rm9ybWF0IH0sXG4gICAgICAgICAgICB0b29sdGlwczogeyByOiBmYWxzZSwgdDogdGVzdFRvb2x0aXBzIH0sXG4gICAgICAgICAgICBrZXlib2FyZFN1cHBvcnQ6IHsgcjogdHJ1ZSwgdDogdGVzdEtleWJvYXJkU3VwcG9ydCB9LFxuICAgICAgICAgICAgZG9jdW1lbnRFbGVtZW50OiB7IHI6IGZhbHNlLCB0OiB0ZXN0RG9jdW1lbnRFbGVtZW50IH0sXG4gICAgICAgICAgICBjc3NQcmVmaXg6IHsgcjogdHJ1ZSwgdDogdGVzdENzc1ByZWZpeCB9LFxuICAgICAgICAgICAgY3NzQ2xhc3NlczogeyByOiB0cnVlLCB0OiB0ZXN0Q3NzQ2xhc3NlcyB9LFxuICAgICAgICAgICAgaGFuZGxlQXR0cmlidXRlczogeyByOiBmYWxzZSwgdDogdGVzdEhhbmRsZUF0dHJpYnV0ZXMgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgY29ubmVjdDogZmFsc2UsXG4gICAgICAgICAgICBkaXJlY3Rpb246IFwibHRyXCIsXG4gICAgICAgICAgICBiZWhhdmlvdXI6IFwidGFwXCIsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICBrZXlib2FyZFN1cHBvcnQ6IHRydWUsXG4gICAgICAgICAgICBjc3NQcmVmaXg6IFwibm9VaS1cIixcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IGNzc0NsYXNzZXMsXG4gICAgICAgICAgICBrZXlib2FyZFBhZ2VNdWx0aXBsaWVyOiA1LFxuICAgICAgICAgICAga2V5Ym9hcmRNdWx0aXBsaWVyOiAxLFxuICAgICAgICAgICAga2V5Ym9hcmREZWZhdWx0U3RlcDogMTAsXG4gICAgICAgIH07XG4gICAgICAgIC8vIEFyaWFGb3JtYXQgZGVmYXVsdHMgdG8gcmVndWxhciBmb3JtYXQsIGlmIGFueS5cbiAgICAgICAgaWYgKG9wdGlvbnMuZm9ybWF0ICYmICFvcHRpb25zLmFyaWFGb3JtYXQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXJpYUZvcm1hdCA9IG9wdGlvbnMuZm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIC8vIFJ1biBhbGwgb3B0aW9ucyB0aHJvdWdoIGEgdGVzdGluZyBtZWNoYW5pc20gdG8gZW5zdXJlIGNvcnJlY3RcbiAgICAgICAgLy8gaW5wdXQuIEl0IHNob3VsZCBiZSBub3RlZCB0aGF0IG9wdGlvbnMgbWlnaHQgZ2V0IG1vZGlmaWVkIHRvXG4gICAgICAgIC8vIGJlIGhhbmRsZWQgcHJvcGVybHkuIEUuZy4gd3JhcHBpbmcgaW50ZWdlcnMgaW4gYXJyYXlzLlxuICAgICAgICBPYmplY3Qua2V5cyh0ZXN0cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIG9wdGlvbiBpc24ndCBzZXQsIGJ1dCBpdCBpcyByZXF1aXJlZCwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICAgICAgICBpZiAoIWlzU2V0KG9wdGlvbnNbbmFtZV0pICYmIGRlZmF1bHRzW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVzdHNbbmFtZV0ucikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiAnXCIgKyBuYW1lICsgXCInIGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVzdHNbbmFtZV0udChwYXJzZWQsICFpc1NldChvcHRpb25zW25hbWVdKSA/IGRlZmF1bHRzW25hbWVdIDogb3B0aW9uc1tuYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBGb3J3YXJkIHBpcHMgb3B0aW9uc1xuICAgICAgICBwYXJzZWQucGlwcyA9IG9wdGlvbnMucGlwcztcbiAgICAgICAgLy8gQWxsIHJlY2VudCBicm93c2VycyBhY2NlcHQgdW5wcmVmaXhlZCB0cmFuc2Zvcm0uXG4gICAgICAgIC8vIFdlIG5lZWQgLW1zLSBmb3IgSUU5IGFuZCAtd2Via2l0LSBmb3Igb2xkZXIgQW5kcm9pZDtcbiAgICAgICAgLy8gQXNzdW1lIHVzZSBvZiAtd2Via2l0LSBpZiB1bnByZWZpeGVkIGFuZCAtbXMtIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PXRyYW5zZm9ybXMyZFxuICAgICAgICB2YXIgZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHZhciBtc1ByZWZpeCA9IGQuc3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIG5vUHJlZml4ID0gZC5zdHlsZS50cmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgcGFyc2VkLnRyYW5zZm9ybVJ1bGUgPSBub1ByZWZpeCA/IFwidHJhbnNmb3JtXCIgOiBtc1ByZWZpeCA/IFwibXNUcmFuc2Zvcm1cIiA6IFwid2Via2l0VHJhbnNmb3JtXCI7XG4gICAgICAgIC8vIFBpcHMgZG9uJ3QgbW92ZSwgc28gd2UgY2FuIHBsYWNlIHRoZW0gdXNpbmcgbGVmdC90b3AuXG4gICAgICAgIHZhciBzdHlsZXMgPSBbXG4gICAgICAgICAgICBbXCJsZWZ0XCIsIFwidG9wXCJdLFxuICAgICAgICAgICAgW1wicmlnaHRcIiwgXCJib3R0b21cIl0sXG4gICAgICAgIF07XG4gICAgICAgIHBhcnNlZC5zdHlsZSA9IHN0eWxlc1twYXJzZWQuZGlyXVtwYXJzZWQub3J0XTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG4gICAgLy9lbmRyZWdpb25cbiAgICBmdW5jdGlvbiBzY29wZSh0YXJnZXQsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucykge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IGdldEFjdGlvbnMoKTtcbiAgICAgICAgdmFyIHN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lID0gZ2V0U3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUoKTtcbiAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IHN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lICYmIGdldFN1cHBvcnRzUGFzc2l2ZSgpO1xuICAgICAgICAvLyBBbGwgdmFyaWFibGVzIGxvY2FsIHRvICdzY29wZScgYXJlIHByZWZpeGVkIHdpdGggJ3Njb3BlXydcbiAgICAgICAgLy8gU2xpZGVyIERPTSBOb2Rlc1xuICAgICAgICB2YXIgc2NvcGVfVGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB2YXIgc2NvcGVfQmFzZTtcbiAgICAgICAgdmFyIHNjb3BlX0hhbmRsZXM7XG4gICAgICAgIHZhciBzY29wZV9Db25uZWN0cztcbiAgICAgICAgdmFyIHNjb3BlX1BpcHM7XG4gICAgICAgIHZhciBzY29wZV9Ub29sdGlwcztcbiAgICAgICAgLy8gU2xpZGVyIHN0YXRlIHZhbHVlc1xuICAgICAgICB2YXIgc2NvcGVfU3BlY3RydW0gPSBvcHRpb25zLnNwZWN0cnVtO1xuICAgICAgICB2YXIgc2NvcGVfVmFsdWVzID0gW107XG4gICAgICAgIHZhciBzY29wZV9Mb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0hhbmRsZU51bWJlcnMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCA9IDA7XG4gICAgICAgIHZhciBzY29wZV9FdmVudHMgPSB7fTtcbiAgICAgICAgLy8gRG9jdW1lbnQgTm9kZXNcbiAgICAgICAgdmFyIHNjb3BlX0RvY3VtZW50ID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciBzY29wZV9Eb2N1bWVudEVsZW1lbnQgPSBvcHRpb25zLmRvY3VtZW50RWxlbWVudCB8fCBzY29wZV9Eb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBzY29wZV9Cb2R5ID0gc2NvcGVfRG9jdW1lbnQuYm9keTtcbiAgICAgICAgLy8gRm9yIGhvcml6b250YWwgc2xpZGVycyBpbiBzdGFuZGFyZCBsdHIgZG9jdW1lbnRzLFxuICAgICAgICAvLyBtYWtlIC5ub1VpLW9yaWdpbiBvdmVyZmxvdyB0byB0aGUgbGVmdCBzbyB0aGUgZG9jdW1lbnQgZG9lc24ndCBzY3JvbGwuXG4gICAgICAgIHZhciBzY29wZV9EaXJPZmZzZXQgPSBzY29wZV9Eb2N1bWVudC5kaXIgPT09IFwicnRsXCIgfHwgb3B0aW9ucy5vcnQgPT09IDEgPyAwIDogMTAwO1xuICAgICAgICAvLyBDcmVhdGVzIGEgbm9kZSwgYWRkcyBpdCB0byB0YXJnZXQsIHJldHVybnMgdGhlIG5ldyBub2RlLlxuICAgICAgICBmdW5jdGlvbiBhZGROb2RlVG8oYWRkVGFyZ2V0LCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHZhciBkaXYgPSBzY29wZV9Eb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGRpdiwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFkZFRhcmdldC5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICAgICAgcmV0dXJuIGRpdjtcbiAgICAgICAgfVxuICAgICAgICAvLyBBcHBlbmQgYSBvcmlnaW4gdG8gdGhlIGJhc2VcbiAgICAgICAgZnVuY3Rpb24gYWRkT3JpZ2luKGJhc2UsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIG9yaWdpbiA9IGFkZE5vZGVUbyhiYXNlLCBvcHRpb25zLmNzc0NsYXNzZXMub3JpZ2luKTtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBhZGROb2RlVG8ob3JpZ2luLCBvcHRpb25zLmNzc0NsYXNzZXMuaGFuZGxlKTtcbiAgICAgICAgICAgIGFkZE5vZGVUbyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50b3VjaEFyZWEpO1xuICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcImRhdGEtaGFuZGxlXCIsIFN0cmluZyhoYW5kbGVOdW1iZXIpKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmtleWJvYXJkU3VwcG9ydCkge1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvdGFiaW5kZXhcbiAgICAgICAgICAgICAgICAvLyAwID0gZm9jdXNhYmxlIGFuZCByZWFjaGFibGVcbiAgICAgICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCIwXCIpO1xuICAgICAgICAgICAgICAgIGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50S2V5ZG93bihldmVudCwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhbmRsZUF0dHJpYnV0ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVzXzEgPSBvcHRpb25zLmhhbmRsZUF0dHJpYnV0ZXNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzXzEpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgYXR0cmlidXRlc18xW2F0dHJpYnV0ZV0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJzbGlkZXJcIik7XG4gICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwiYXJpYS1vcmllbnRhdGlvblwiLCBvcHRpb25zLm9ydCA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwiKTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5oYW5kbGVMb3dlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoYW5kbGVOdW1iZXIgPT09IG9wdGlvbnMuaGFuZGxlcyAtIDEpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5oYW5kbGVVcHBlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluc2VydCBub2RlcyBmb3IgY29ubmVjdCBlbGVtZW50c1xuICAgICAgICBmdW5jdGlvbiBhZGRDb25uZWN0KGJhc2UsIGFkZCkge1xuICAgICAgICAgICAgaWYgKCFhZGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWRkTm9kZVRvKGJhc2UsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5jb25uZWN0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgaGFuZGxlcyB0byB0aGUgc2xpZGVyIGJhc2UuXG4gICAgICAgIGZ1bmN0aW9uIGFkZEVsZW1lbnRzKGNvbm5lY3RPcHRpb25zLCBiYXNlKSB7XG4gICAgICAgICAgICB2YXIgY29ubmVjdEJhc2UgPSBhZGROb2RlVG8oYmFzZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmNvbm5lY3RzKTtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMgPSBbXTtcbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzID0gW107XG4gICAgICAgICAgICBzY29wZV9Db25uZWN0cy5wdXNoKGFkZENvbm5lY3QoY29ubmVjdEJhc2UsIGNvbm5lY3RPcHRpb25zWzBdKSk7XG4gICAgICAgICAgICAvLyBbOjo6Ok89PT09Tz09PT1PPT09PV1cbiAgICAgICAgICAgIC8vIGNvbm5lY3RPcHRpb25zID0gWzAsIDEsIDEsIDFdXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMuaGFuZGxlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gS2VlcCBhIGxpc3Qgb2YgYWxsIGFkZGVkIGhhbmRsZXMuXG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5wdXNoKGFkZE9yaWdpbihiYXNlLCBpKSk7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVyc1tpXSA9IGk7XG4gICAgICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMucHVzaChhZGRDb25uZWN0KGNvbm5lY3RCYXNlLCBjb25uZWN0T3B0aW9uc1tpICsgMV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJbml0aWFsaXplIGEgc2luZ2xlIHNsaWRlci5cbiAgICAgICAgZnVuY3Rpb24gYWRkU2xpZGVyKGFkZFRhcmdldCkge1xuICAgICAgICAgICAgLy8gQXBwbHkgY2xhc3NlcyBhbmQgZGF0YSB0byB0aGUgdGFyZ2V0LlxuICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFyZ2V0KTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRpciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmx0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5ydGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMub3J0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMuaG9yaXpvbnRhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy52ZXJ0aWNhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGV4dERpcmVjdGlvbiA9IGdldENvbXB1dGVkU3R5bGUoYWRkVGFyZ2V0KS5kaXJlY3Rpb247XG4gICAgICAgICAgICBpZiAodGV4dERpcmVjdGlvbiA9PT0gXCJydGxcIikge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRleHREaXJlY3Rpb25SdGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGV4dERpcmVjdGlvbkx0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWRkTm9kZVRvKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmJhc2UpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFkZFRvb2x0aXAoaGFuZGxlLCBoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy50b29sdGlwcyB8fCAhb3B0aW9ucy50b29sdGlwc1toYW5kbGVOdW1iZXJdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVUbyhoYW5kbGUuZmlyc3RDaGlsZCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRvb2x0aXApO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzU2xpZGVyRGlzYWJsZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcGVfVGFyZ2V0Lmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIERpc2FibGUgdGhlIHNsaWRlciBkcmFnZ2luZyBpZiBhbnkgaGFuZGxlIGlzIGRpc2FibGVkXG4gICAgICAgIGZ1bmN0aW9uIGlzSGFuZGxlRGlzYWJsZWQoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlT3JpZ2luID0gc2NvcGVfSGFuZGxlc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZU9yaWdpbi5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiByZW1vdmVUb29sdGlwcygpIHtcbiAgICAgICAgICAgIGlmIChzY29wZV9Ub29sdGlwcykge1xuICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50KFwidXBkYXRlXCIgKyBJTlRFUk5BTF9FVkVOVF9OUy50b29sdGlwcyk7XG4gICAgICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHMuZm9yRWFjaChmdW5jdGlvbiAodG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9vbHRpcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCh0b29sdGlwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgdG9vbHRpcHMgb3B0aW9uIGlzIGEgc2hvcnRoYW5kIGZvciB1c2luZyB0aGUgJ3VwZGF0ZScgZXZlbnQuXG4gICAgICAgIGZ1bmN0aW9uIHRvb2x0aXBzKCkge1xuICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcHMoKTtcbiAgICAgICAgICAgIC8vIFRvb2x0aXBzIGFyZSBhZGRlZCB3aXRoIG9wdGlvbnMudG9vbHRpcHMgaW4gb3JpZ2luYWwgb3JkZXIuXG4gICAgICAgICAgICBzY29wZV9Ub29sdGlwcyA9IHNjb3BlX0hhbmRsZXMubWFwKGFkZFRvb2x0aXApO1xuICAgICAgICAgICAgYmluZEV2ZW50KFwidXBkYXRlXCIgKyBJTlRFUk5BTF9FVkVOVF9OUy50b29sdGlwcywgZnVuY3Rpb24gKHZhbHVlcywgaGFuZGxlTnVtYmVyLCB1bmVuY29kZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNjb3BlX1Rvb2x0aXBzIHx8ICFvcHRpb25zLnRvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlX1Rvb2x0aXBzW2hhbmRsZU51bWJlcl0gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdHRlZFZhbHVlID0gdmFsdWVzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbHRpcHNbaGFuZGxlTnVtYmVyXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZSA9IG9wdGlvbnMudG9vbHRpcHNbaGFuZGxlTnVtYmVyXS50byh1bmVuY29kZWRbaGFuZGxlTnVtYmVyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzW2hhbmRsZU51bWJlcl0uaW5uZXJIVE1MID0gZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhcmlhKCkge1xuICAgICAgICAgICAgcmVtb3ZlRXZlbnQoXCJ1cGRhdGVcIiArIElOVEVSTkFMX0VWRU5UX05TLmFyaWEpO1xuICAgICAgICAgICAgYmluZEV2ZW50KFwidXBkYXRlXCIgKyBJTlRFUk5BTF9FVkVOVF9OUy5hcmlhLCBmdW5jdGlvbiAodmFsdWVzLCBoYW5kbGVOdW1iZXIsIHVuZW5jb2RlZCwgdGFwLCBwb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgQXJpYSBWYWx1ZXMgZm9yIGFsbCBoYW5kbGVzLCBhcyBhIGNoYW5nZSBpbiBvbmUgY2hhbmdlcyBtaW4gYW5kIG1heCB2YWx1ZXMgZm9yIHRoZSBuZXh0LlxuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZSA9IHNjb3BlX0hhbmRsZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWluID0gY2hlY2tIYW5kbGVQb3NpdGlvbihzY29wZV9Mb2NhdGlvbnMsIGluZGV4LCAwLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heCA9IGNoZWNrSGFuZGxlUG9zaXRpb24oc2NvcGVfTG9jYXRpb25zLCBpbmRleCwgMTAwLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdyA9IHBvc2l0aW9uc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvcm1hdHRlZCB2YWx1ZSBmb3IgZGlzcGxheVxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IFN0cmluZyhvcHRpb25zLmFyaWFGb3JtYXQudG8odW5lbmNvZGVkW2luZGV4XSkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBNYXAgdG8gc2xpZGVyIHJhbmdlIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICBtaW4gPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcobWluKS50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgICAgICAgICBtYXggPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcobWF4KS50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgICAgICAgICBub3cgPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcobm93KS50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW1pblwiLCBtaW4pO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW1heFwiLCBtYXgpO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZW5vd1wiLCBub3cpO1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGUuY2hpbGRyZW5bMF0uc2V0QXR0cmlidXRlKFwiYXJpYS12YWx1ZXRleHRcIiwgdGV4dCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRHcm91cChwaXBzKSB7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIHJhbmdlLlxuICAgICAgICAgICAgaWYgKHBpcHMubW9kZSA9PT0gZXhwb3J0cy5QaXBzTW9kZS5SYW5nZSB8fCBwaXBzLm1vZGUgPT09IGV4cG9ydHMuUGlwc01vZGUuU3RlcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfU3BlY3RydW0ueFZhbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwaXBzLm1vZGUgPT09IGV4cG9ydHMuUGlwc01vZGUuQ291bnQpIHtcbiAgICAgICAgICAgICAgICBpZiAocGlwcy52YWx1ZXMgPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXI6ICd2YWx1ZXMnICg+PSAyKSByZXF1aXJlZCBmb3IgbW9kZSAnY291bnQnLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRGl2aWRlIDAgLSAxMDAgaW4gJ2NvdW50JyBwYXJ0cy5cbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSBwaXBzLnZhbHVlcyAtIDE7XG4gICAgICAgICAgICAgICAgdmFyIHNwcmVhZCA9IDEwMCAvIGludGVydmFsO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAvLyBMaXN0IHRoZXNlIHBhcnRzIGFuZCBoYXZlIHRoZW0gaGFuZGxlZCBhcyAncG9zaXRpb25zJy5cbiAgICAgICAgICAgICAgICB3aGlsZSAoaW50ZXJ2YWwtLSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZXNbaW50ZXJ2YWxdID0gaW50ZXJ2YWwgKiBzcHJlYWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKDEwMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcFRvUmFuZ2UodmFsdWVzLCBwaXBzLnN0ZXBwZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBpcHMubW9kZSA9PT0gZXhwb3J0cy5QaXBzTW9kZS5Qb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAvLyBNYXAgYWxsIHBlcmNlbnRhZ2VzIHRvIG9uLXJhbmdlIHZhbHVlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gbWFwVG9SYW5nZShwaXBzLnZhbHVlcywgcGlwcy5zdGVwcGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwaXBzLm1vZGUgPT09IGV4cG9ydHMuUGlwc01vZGUuVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIG11c3QgYmUgc3RlcHBlZCwgaXQgbmVlZHMgdG8gYmUgY29udmVydGVkIHRvIGEgcGVyY2VudGFnZSBmaXJzdC5cbiAgICAgICAgICAgICAgICBpZiAocGlwcy5zdGVwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwaXBzLnZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRvIHBlcmNlbnRhZ2UsIGFwcGx5IHN0ZXAsIHJldHVybiB0byB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcoc2NvcGVfU3BlY3RydW0uZ2V0U3RlcChzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKHZhbHVlKSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBjYW4gc2ltcGx5IHVzZSB0aGUgdmFsdWVzLlxuICAgICAgICAgICAgICAgIHJldHVybiBwaXBzLnZhbHVlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbXTsgLy8gcGlwcy5tb2RlID0gbmV2ZXJcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBtYXBUb1JhbmdlKHZhbHVlcywgc3RlcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhzdGVwcGVkID8gc2NvcGVfU3BlY3RydW0uZ2V0U3RlcCh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVNwcmVhZChwaXBzKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBzYWZlSW5jcmVtZW50KHZhbHVlLCBpbmNyZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBmbG9hdGluZyBwb2ludCB2YXJpYW5jZSBieSBkcm9wcGluZyB0aGUgc21hbGxlc3QgZGVjaW1hbCBwbGFjZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlcigodmFsdWUgKyBpbmNyZW1lbnQpLnRvRml4ZWQoNykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGdyb3VwID0gZ2V0R3JvdXAocGlwcyk7XG4gICAgICAgICAgICB2YXIgaW5kZXhlcyA9IHt9O1xuICAgICAgICAgICAgdmFyIGZpcnN0SW5SYW5nZSA9IHNjb3BlX1NwZWN0cnVtLnhWYWxbMF07XG4gICAgICAgICAgICB2YXIgbGFzdEluUmFuZ2UgPSBzY29wZV9TcGVjdHJ1bS54VmFsW3Njb3BlX1NwZWN0cnVtLnhWYWwubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB2YXIgaWdub3JlRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpZ25vcmVMYXN0ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgcHJldlBjdCA9IDA7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBncm91cCwgc29ydCBpdCBhbmQgZmlsdGVyIGF3YXkgYWxsIGR1cGxpY2F0ZXMuXG4gICAgICAgICAgICBncm91cCA9IHVuaXF1ZShncm91cC5zbGljZSgpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHJhbmdlIHN0YXJ0cyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgICAgICAgICAgaWYgKGdyb3VwWzBdICE9PSBmaXJzdEluUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBncm91cC51bnNoaWZ0KGZpcnN0SW5SYW5nZSk7XG4gICAgICAgICAgICAgICAgaWdub3JlRmlyc3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTGlrZXdpc2UgZm9yIHRoZSBsYXN0IG9uZS5cbiAgICAgICAgICAgIGlmIChncm91cFtncm91cC5sZW5ndGggLSAxXSAhPT0gbGFzdEluUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBncm91cC5wdXNoKGxhc3RJblJhbmdlKTtcbiAgICAgICAgICAgICAgICBpZ25vcmVMYXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyb3VwLmZvckVhY2goZnVuY3Rpb24gKGN1cnJlbnQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0ZXAgYW5kIHRoZSBsb3dlciArIHVwcGVyIHBvc2l0aW9ucy5cbiAgICAgICAgICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICB2YXIgcTtcbiAgICAgICAgICAgICAgICB2YXIgbG93ID0gY3VycmVudDtcbiAgICAgICAgICAgICAgICB2YXIgaGlnaCA9IGdyb3VwW2luZGV4ICsgMV07XG4gICAgICAgICAgICAgICAgdmFyIG5ld1BjdDtcbiAgICAgICAgICAgICAgICB2YXIgcGN0RGlmZmVyZW5jZTtcbiAgICAgICAgICAgICAgICB2YXIgcGN0UG9zO1xuICAgICAgICAgICAgICAgIHZhciB0eXBlO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwcztcbiAgICAgICAgICAgICAgICB2YXIgcmVhbFN0ZXBzO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwU2l6ZTtcbiAgICAgICAgICAgICAgICB2YXIgaXNTdGVwcyA9IHBpcHMubW9kZSA9PT0gZXhwb3J0cy5QaXBzTW9kZS5TdGVwcztcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHVzaW5nICdzdGVwcycgbW9kZSwgdXNlIHRoZSBwcm92aWRlZCBzdGVwcy5cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIHdlJ2xsIHN0ZXAgb24gdG8gdGhlIG5leHQgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgaWYgKGlzU3RlcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCA9IHNjb3BlX1NwZWN0cnVtLnhOdW1TdGVwc1tpbmRleF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERlZmF1bHQgdG8gYSAnZnVsbCcgc3RlcC5cbiAgICAgICAgICAgICAgICBpZiAoIXN0ZXApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCA9IGhpZ2ggLSBsb3c7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIGhpZ2ggaXMgdW5kZWZpbmVkIHdlIGFyZSBhdCB0aGUgbGFzdCBzdWJyYW5nZS4gTWFrZSBzdXJlIGl0IGl0ZXJhdGVzIG9uY2UgKCMxMDg4KVxuICAgICAgICAgICAgICAgIGlmIChoaWdoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaGlnaCA9IGxvdztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHN0ZXAgaXNuJ3QgMCwgd2hpY2ggd291bGQgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCAoIzY1NClcbiAgICAgICAgICAgICAgICBzdGVwID0gTWF0aC5tYXgoc3RlcCwgMC4wMDAwMDAxKTtcbiAgICAgICAgICAgICAgICAvLyBGaW5kIGFsbCBzdGVwcyBpbiB0aGUgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gbG93OyBpIDw9IGhpZ2g7IGkgPSBzYWZlSW5jcmVtZW50KGksIHN0ZXApKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcGVyY2VudGFnZSB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgc3RlcCxcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBzaXplIGZvciB0aGUgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIG5ld1BjdCA9IHNjb3BlX1NwZWN0cnVtLnRvU3RlcHBpbmcoaSk7XG4gICAgICAgICAgICAgICAgICAgIHBjdERpZmZlcmVuY2UgPSBuZXdQY3QgLSBwcmV2UGN0O1xuICAgICAgICAgICAgICAgICAgICBzdGVwcyA9IHBjdERpZmZlcmVuY2UgLyAocGlwcy5kZW5zaXR5IHx8IDEpO1xuICAgICAgICAgICAgICAgICAgICByZWFsU3RlcHMgPSBNYXRoLnJvdW5kKHN0ZXBzKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyByYXRpbyByZXByZXNlbnRzIHRoZSBhbW91bnQgb2YgcGVyY2VudGFnZS1zcGFjZSBhIHBvaW50IGluZGljYXRlcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGEgZGVuc2l0eSAxIHRoZSBwb2ludHMvcGVyY2VudGFnZSA9IDEuIEZvciBkZW5zaXR5IDIsIHRoYXQgcGVyY2VudGFnZSBuZWVkcyB0byBiZSByZS1kaXZpZGVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBSb3VuZCB0aGUgcGVyY2VudGFnZSBvZmZzZXQgdG8gYW4gZXZlbiBudW1iZXIsIHRoZW4gZGl2aWRlIGJ5IHR3b1xuICAgICAgICAgICAgICAgICAgICAvLyB0byBzcHJlYWQgdGhlIG9mZnNldCBvbiBib3RoIHNpZGVzIG9mIHRoZSByYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgc3RlcFNpemUgPSBwY3REaWZmZXJlbmNlIC8gcmVhbFN0ZXBzO1xuICAgICAgICAgICAgICAgICAgICAvLyBEaXZpZGUgYWxsIHBvaW50cyBldmVubHksIGFkZGluZyB0aGUgY29ycmVjdCBudW1iZXIgdG8gdGhpcyBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gUnVuIHVwIHRvIDw9IHNvIHRoYXQgMTAwJSBnZXRzIGEgcG9pbnQsIGV2ZW50IGlmIGlnbm9yZUxhc3QgaXMgc2V0LlxuICAgICAgICAgICAgICAgICAgICBmb3IgKHEgPSAxOyBxIDw9IHJlYWxTdGVwczsgcSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmF0aW8gYmV0d2VlbiB0aGUgcm91bmRlZCB2YWx1ZSBhbmQgdGhlIGFjdHVhbCBzaXplIG1pZ2h0IGJlIH4xJSBvZmYuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb3JyZWN0IHRoZSBwZXJjZW50YWdlIG9mZnNldCBieSB0aGUgbnVtYmVyIG9mIHBvaW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGVyIHN1YnJhbmdlLiBkZW5zaXR5ID0gMSB3aWxsIHJlc3VsdCBpbiAxMDAgcG9pbnRzIG9uIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZnVsbCByYW5nZSwgMiBmb3IgNTAsIDQgZm9yIDI1LCBldGMuXG4gICAgICAgICAgICAgICAgICAgICAgICBwY3RQb3MgPSBwcmV2UGN0ICsgcSAqIHN0ZXBTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhlc1twY3RQb3MudG9GaXhlZCg1KV0gPSBbc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHBjdFBvcyksIDBdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgcG9pbnQgdHlwZS5cbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IGdyb3VwLmluZGV4T2YoaSkgPiAtMSA/IGV4cG9ydHMuUGlwc1R5cGUuTGFyZ2VWYWx1ZSA6IGlzU3RlcHMgPyBleHBvcnRzLlBpcHNUeXBlLlNtYWxsVmFsdWUgOiBleHBvcnRzLlBpcHNUeXBlLk5vVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVuZm9yY2UgdGhlICdpZ25vcmVGaXJzdCcgb3B0aW9uIGJ5IG92ZXJ3cml0aW5nIHRoZSB0eXBlIGZvciAwLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWluZGV4ICYmIGlnbm9yZUZpcnN0ICYmIGkgIT09IGhpZ2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGkgPT09IGhpZ2ggJiYgaWdub3JlTGFzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlICd0eXBlJyBvZiB0aGlzIHBvaW50LiAwID0gcGxhaW4sIDEgPSByZWFsIHZhbHVlLCAyID0gc3RlcCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ZXNbbmV3UGN0LnRvRml4ZWQoNSldID0gW2ksIHR5cGVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcGVyY2VudGFnZSBjb3VudC5cbiAgICAgICAgICAgICAgICAgICAgcHJldlBjdCA9IG5ld1BjdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBpbmRleGVzO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFkZE1hcmtpbmcoc3ByZWFkLCBmaWx0ZXJGdW5jLCBmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHNjb3BlX0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICB2YXIgdmFsdWVTaXplQ2xhc3NlcyA9IChfYSA9IHt9LFxuICAgICAgICAgICAgICAgIF9hW2V4cG9ydHMuUGlwc1R5cGUuTm9uZV0gPSBcIlwiLFxuICAgICAgICAgICAgICAgIF9hW2V4cG9ydHMuUGlwc1R5cGUuTm9WYWx1ZV0gPSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVOb3JtYWwsXG4gICAgICAgICAgICAgICAgX2FbZXhwb3J0cy5QaXBzVHlwZS5MYXJnZVZhbHVlXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZUxhcmdlLFxuICAgICAgICAgICAgICAgIF9hW2V4cG9ydHMuUGlwc1R5cGUuU21hbGxWYWx1ZV0gPSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVTdWIsXG4gICAgICAgICAgICAgICAgX2EpO1xuICAgICAgICAgICAgdmFyIG1hcmtlclNpemVDbGFzc2VzID0gKF9iID0ge30sXG4gICAgICAgICAgICAgICAgX2JbZXhwb3J0cy5QaXBzVHlwZS5Ob25lXSA9IFwiXCIsXG4gICAgICAgICAgICAgICAgX2JbZXhwb3J0cy5QaXBzVHlwZS5Ob1ZhbHVlXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJOb3JtYWwsXG4gICAgICAgICAgICAgICAgX2JbZXhwb3J0cy5QaXBzVHlwZS5MYXJnZVZhbHVlXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJMYXJnZSxcbiAgICAgICAgICAgICAgICBfYltleHBvcnRzLlBpcHNUeXBlLlNtYWxsVmFsdWVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlclN1YixcbiAgICAgICAgICAgICAgICBfYik7XG4gICAgICAgICAgICB2YXIgdmFsdWVPcmllbnRhdGlvbkNsYXNzZXMgPSBbb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlSG9yaXpvbnRhbCwgb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlVmVydGljYWxdO1xuICAgICAgICAgICAgdmFyIG1hcmtlck9yaWVudGF0aW9uQ2xhc3NlcyA9IFtvcHRpb25zLmNzc0NsYXNzZXMubWFya2VySG9yaXpvbnRhbCwgb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlclZlcnRpY2FsXTtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5waXBzKTtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIG9wdGlvbnMub3J0ID09PSAwID8gb3B0aW9ucy5jc3NDbGFzc2VzLnBpcHNIb3Jpem9udGFsIDogb3B0aW9ucy5jc3NDbGFzc2VzLnBpcHNWZXJ0aWNhbCk7XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRDbGFzc2VzKHR5cGUsIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gc291cmNlID09PSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWVudGF0aW9uQ2xhc3NlcyA9IGEgPyB2YWx1ZU9yaWVudGF0aW9uQ2xhc3NlcyA6IG1hcmtlck9yaWVudGF0aW9uQ2xhc3NlcztcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZUNsYXNzZXMgPSBhID8gdmFsdWVTaXplQ2xhc3NlcyA6IG1hcmtlclNpemVDbGFzc2VzO1xuICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2UgKyBcIiBcIiArIG9yaWVudGF0aW9uQ2xhc3Nlc1tvcHRpb25zLm9ydF0gKyBcIiBcIiArIHNpemVDbGFzc2VzW3R5cGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkU3ByZWFkKG9mZnNldCwgdmFsdWUsIHR5cGUpIHtcbiAgICAgICAgICAgICAgICAvLyBBcHBseSB0aGUgZmlsdGVyIGZ1bmN0aW9uLCBpZiBpdCBpcyBzZXQuXG4gICAgICAgICAgICAgICAgdHlwZSA9IGZpbHRlckZ1bmMgPyBmaWx0ZXJGdW5jKHZhbHVlLCB0eXBlKSA6IHR5cGU7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IGV4cG9ydHMuUGlwc1R5cGUuTm9uZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEFkZCBhIG1hcmtlciBmb3IgZXZlcnkgcG9pbnRcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGFkZE5vZGVUbyhlbGVtZW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBnZXRDbGFzc2VzKHR5cGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXIpO1xuICAgICAgICAgICAgICAgIG5vZGUuc3R5bGVbb3B0aW9ucy5zdHlsZV0gPSBvZmZzZXQgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAvLyBWYWx1ZXMgYXJlIG9ubHkgYXBwZW5kZWQgZm9yIHBvaW50cyBtYXJrZWQgJzEnIG9yICcyJy5cbiAgICAgICAgICAgICAgICBpZiAodHlwZSA+IGV4cG9ydHMuUGlwc1R5cGUuTm9WYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gYWRkTm9kZVRvKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBnZXRDbGFzc2VzKHR5cGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiLCBTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZVtvcHRpb25zLnN0eWxlXSA9IG9mZnNldCArIFwiJVwiO1xuICAgICAgICAgICAgICAgICAgICBub2RlLmlubmVySFRNTCA9IFN0cmluZyhmb3JtYXR0ZXIudG8odmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBcHBlbmQgYWxsIHBvaW50cy5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNwcmVhZCkuZm9yRWFjaChmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgYWRkU3ByZWFkKG9mZnNldCwgc3ByZWFkW29mZnNldF1bMF0sIHNwcmVhZFtvZmZzZXRdWzFdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlUGlwcygpIHtcbiAgICAgICAgICAgIGlmIChzY29wZV9QaXBzKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudChzY29wZV9QaXBzKTtcbiAgICAgICAgICAgICAgICBzY29wZV9QaXBzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBwaXBzKHBpcHMpIHtcbiAgICAgICAgICAgIC8vIEZpeCAjNjY5XG4gICAgICAgICAgICByZW1vdmVQaXBzKCk7XG4gICAgICAgICAgICB2YXIgc3ByZWFkID0gZ2VuZXJhdGVTcHJlYWQocGlwcyk7XG4gICAgICAgICAgICB2YXIgZmlsdGVyID0gcGlwcy5maWx0ZXI7XG4gICAgICAgICAgICB2YXIgZm9ybWF0ID0gcGlwcy5mb3JtYXQgfHwge1xuICAgICAgICAgICAgICAgIHRvOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhNYXRoLnJvdW5kKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzY29wZV9QaXBzID0gc2NvcGVfVGFyZ2V0LmFwcGVuZENoaWxkKGFkZE1hcmtpbmcoc3ByZWFkLCBmaWx0ZXIsIGZvcm1hdCkpO1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1BpcHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2hvcnRoYW5kIGZvciBiYXNlIGRpbWVuc2lvbnMuXG4gICAgICAgIGZ1bmN0aW9uIGJhc2VTaXplKCkge1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBzY29wZV9CYXNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIGFsdCA9IChcIm9mZnNldFwiICsgW1wiV2lkdGhcIiwgXCJIZWlnaHRcIl1bb3B0aW9ucy5vcnRdKTtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLm9ydCA9PT0gMCA/IHJlY3Qud2lkdGggfHwgc2NvcGVfQmFzZVthbHRdIDogcmVjdC5oZWlnaHQgfHwgc2NvcGVfQmFzZVthbHRdO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhhbmRsZXIgZm9yIGF0dGFjaGluZyBldmVudHMgdHJvdWdoIGEgcHJveHkuXG4gICAgICAgIGZ1bmN0aW9uIGF0dGFjaEV2ZW50KGV2ZW50cywgZWxlbWVudCwgY2FsbGJhY2ssIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gJ2ZpbHRlcicgZXZlbnRzIHRvIHRoZSBzbGlkZXIuXG4gICAgICAgICAgICAvLyBlbGVtZW50IGlzIGEgbm9kZSwgbm90IGEgbm9kZUxpc3RcbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IGZpeEV2ZW50KGV2ZW50LCBkYXRhLnBhZ2VPZmZzZXQsIGRhdGEudGFyZ2V0IHx8IGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIC8vIGZpeEV2ZW50IHJldHVybnMgZmFsc2UgaWYgdGhpcyBldmVudCBoYXMgYSBkaWZmZXJlbnQgdGFyZ2V0XG4gICAgICAgICAgICAgICAgLy8gd2hlbiBoYW5kbGluZyAobXVsdGktKSB0b3VjaCBldmVudHM7XG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZG9Ob3RSZWplY3QgaXMgcGFzc2VkIGJ5IGFsbCBlbmQgZXZlbnRzIHRvIG1ha2Ugc3VyZSByZWxlYXNlZCB0b3VjaGVzXG4gICAgICAgICAgICAgICAgLy8gYXJlIG5vdCByZWplY3RlZCwgbGVhdmluZyB0aGUgc2xpZGVyIFwic3R1Y2tcIiB0byB0aGUgY3Vyc29yO1xuICAgICAgICAgICAgICAgIGlmIChpc1NsaWRlckRpc2FibGVkKCkgJiYgIWRhdGEuZG9Ob3RSZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTdG9wIGlmIGFuIGFjdGl2ZSAndGFwJyB0cmFuc2l0aW9uIGlzIHRha2luZyBwbGFjZS5cbiAgICAgICAgICAgICAgICBpZiAoaGFzQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFwKSAmJiAhZGF0YS5kb05vdFJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElnbm9yZSByaWdodCBvciBtaWRkbGUgY2xpY2tzIG9uIHN0YXJ0ICM0NTRcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzID09PSBhY3Rpb25zLnN0YXJ0ICYmIGUuYnV0dG9ucyAhPT0gdW5kZWZpbmVkICYmIGUuYnV0dG9ucyA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgcmlnaHQgb3IgbWlkZGxlIGNsaWNrcyBvbiBzdGFydCAjNDU0XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuaG92ZXIgJiYgZS5idXR0b25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gJ3N1cHBvcnRzUGFzc2l2ZScgaXMgb25seSB0cnVlIGlmIGEgYnJvd3NlciBhbHNvIHN1cHBvcnRzIHRvdWNoLWFjdGlvbjogbm9uZSBpbiBDU1MuXG4gICAgICAgICAgICAgICAgLy8gaU9TIHNhZmFyaSBkb2VzIG5vdCwgc28gaXQgZG9lc24ndCBnZXQgdG8gYmVuZWZpdCBmcm9tIHBhc3NpdmUgc2Nyb2xsaW5nLiBpT1MgZG9lcyBzdXBwb3J0XG4gICAgICAgICAgICAgICAgLy8gdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb24sIGJ1dCB0aGF0IGFsbG93cyBwYW5uaW5nLCB3aGljaCBicmVha3NcbiAgICAgICAgICAgICAgICAvLyBzbGlkZXJzIGFmdGVyIHpvb21pbmcvb24gbm9uLXJlc3BvbnNpdmUgcGFnZXMuXG4gICAgICAgICAgICAgICAgLy8gU2VlOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTMzMTEyXG4gICAgICAgICAgICAgICAgaWYgKCFzdXBwb3J0c1Bhc3NpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlLmNhbGNQb2ludCA9IGUucG9pbnRzW29wdGlvbnMub3J0XTtcbiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBoYW5kbGVyIHdpdGggdGhlIGV2ZW50IFsgYW5kIGFkZGl0aW9uYWwgZGF0YSBdLlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgbWV0aG9kcyA9IFtdO1xuICAgICAgICAgICAgLy8gQmluZCBhIGNsb3N1cmUgb24gdGhlIHRhcmdldCBmb3IgZXZlcnkgZXZlbnQgdHlwZS5cbiAgICAgICAgICAgIGV2ZW50cy5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbWV0aG9kLCBzdXBwb3J0c1Bhc3NpdmUgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlKTtcbiAgICAgICAgICAgICAgICBtZXRob2RzLnB1c2goW2V2ZW50TmFtZSwgbWV0aG9kXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBtZXRob2RzO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByb3ZpZGUgYSBjbGVhbiBldmVudCB3aXRoIHN0YW5kYXJkaXplZCBvZmZzZXQgdmFsdWVzLlxuICAgICAgICBmdW5jdGlvbiBmaXhFdmVudChlLCBwYWdlT2Zmc2V0LCBldmVudFRhcmdldCkge1xuICAgICAgICAgICAgLy8gRmlsdGVyIHRoZSBldmVudCB0byByZWdpc3RlciB0aGUgdHlwZSwgd2hpY2ggY2FuIGJlXG4gICAgICAgICAgICAvLyB0b3VjaCwgbW91c2Ugb3IgcG9pbnRlci4gT2Zmc2V0IGNoYW5nZXMgbmVlZCB0byBiZVxuICAgICAgICAgICAgLy8gbWFkZSBvbiBhbiBldmVudCBzcGVjaWZpYyBiYXNpcy5cbiAgICAgICAgICAgIHZhciB0b3VjaCA9IGUudHlwZS5pbmRleE9mKFwidG91Y2hcIikgPT09IDA7XG4gICAgICAgICAgICB2YXIgbW91c2UgPSBlLnR5cGUuaW5kZXhPZihcIm1vdXNlXCIpID09PSAwO1xuICAgICAgICAgICAgdmFyIHBvaW50ZXIgPSBlLnR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgPT09IDA7XG4gICAgICAgICAgICB2YXIgeCA9IDA7XG4gICAgICAgICAgICB2YXIgeSA9IDA7XG4gICAgICAgICAgICAvLyBJRTEwIGltcGxlbWVudGVkIHBvaW50ZXIgZXZlbnRzIHdpdGggYSBwcmVmaXg7XG4gICAgICAgICAgICBpZiAoZS50eXBlLmluZGV4T2YoXCJNU1BvaW50ZXJcIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwb2ludGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEVycm9uZW91cyBldmVudHMgc2VlbSB0byBiZSBwYXNzZWQgaW4gb2NjYXNpb25hbGx5IG9uIGlPUy9pUGFkT1MgYWZ0ZXIgdXNlciBmaW5pc2hlcyBpbnRlcmFjdGluZyB3aXRoXG4gICAgICAgICAgICAvLyB0aGUgc2xpZGVyLiBUaGV5IGFwcGVhciB0byBiZSBvZiB0eXBlIE1vdXNlRXZlbnQsIHlldCB0aGV5IGRvbid0IGhhdmUgdXN1YWwgcHJvcGVydGllcyBzZXQuIElnbm9yZVxuICAgICAgICAgICAgLy8gZXZlbnRzIHRoYXQgaGF2ZSBubyB0b3VjaGVzIG9yIGJ1dHRvbnMgYXNzb2NpYXRlZCB3aXRoIHRoZW0uICgjMTA1NywgIzEwNzksICMxMDk1KVxuICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gXCJtb3VzZWRvd25cIiAmJiAhZS5idXR0b25zICYmICFlLnRvdWNoZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGUgb25seSB0aGluZyBvbmUgaGFuZGxlIHNob3VsZCBiZSBjb25jZXJuZWQgYWJvdXQgaXMgdGhlIHRvdWNoZXMgdGhhdCBvcmlnaW5hdGVkIG9uIHRvcCBvZiBpdC5cbiAgICAgICAgICAgIGlmICh0b3VjaCkge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybnMgdHJ1ZSBpZiBhIHRvdWNoIG9yaWdpbmF0ZWQgb24gdGhlIHRhcmdldC5cbiAgICAgICAgICAgICAgICB2YXIgaXNUb3VjaE9uVGFyZ2V0ID0gZnVuY3Rpb24gKGNoZWNrVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGNoZWNrVG91Y2gudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHRhcmdldCA9PT0gZXZlbnRUYXJnZXQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0LmNvbnRhaW5zKHRhcmdldCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChlLmNvbXBvc2VkICYmIGUuY29tcG9zZWRQYXRoKCkuc2hpZnQoKSA9PT0gZXZlbnRUYXJnZXQpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIC8vIEluIHRoZSBjYXNlIG9mIHRvdWNoc3RhcnQgZXZlbnRzLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGVyZSBpcyBzdGlsbCBubyBtb3JlIHRoYW4gb25lXG4gICAgICAgICAgICAgICAgLy8gdG91Y2ggb24gdGhlIHRhcmdldCBzbyB3ZSBsb29rIGFtb25nc3QgYWxsIHRvdWNoZXMuXG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gXCJ0b3VjaHN0YXJ0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFRvdWNoZXMgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZS50b3VjaGVzLCBpc1RvdWNoT25UYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3Qgc3VwcG9ydCBtb3JlIHRoYW4gb25lIHRvdWNoIHBlciBoYW5kbGUuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB4ID0gdGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHRhcmdldFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiB0aGUgb3RoZXIgY2FzZXMsIGZpbmQgb24gY2hhbmdlZFRvdWNoZXMgaXMgZW5vdWdoLlxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0VG91Y2ggPSBBcnJheS5wcm90b3R5cGUuZmluZC5jYWxsKGUuY2hhbmdlZFRvdWNoZXMsIGlzVG91Y2hPblRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIENhbmNlbCBpZiB0aGUgdGFyZ2V0IHRvdWNoIGhhcyBub3QgbW92ZWQuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0VG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB4ID0gdGFyZ2V0VG91Y2gucGFnZVg7XG4gICAgICAgICAgICAgICAgICAgIHkgPSB0YXJnZXRUb3VjaC5wYWdlWTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYWdlT2Zmc2V0ID0gcGFnZU9mZnNldCB8fCBnZXRQYWdlT2Zmc2V0KHNjb3BlX0RvY3VtZW50KTtcbiAgICAgICAgICAgIGlmIChtb3VzZSB8fCBwb2ludGVyKSB7XG4gICAgICAgICAgICAgICAgeCA9IGUuY2xpZW50WCArIHBhZ2VPZmZzZXQueDtcbiAgICAgICAgICAgICAgICB5ID0gZS5jbGllbnRZICsgcGFnZU9mZnNldC55O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZS5wYWdlT2Zmc2V0ID0gcGFnZU9mZnNldDtcbiAgICAgICAgICAgIGUucG9pbnRzID0gW3gsIHldO1xuICAgICAgICAgICAgZS5jdXJzb3IgPSBtb3VzZSB8fCBwb2ludGVyOyAvLyBGaXggIzQzNVxuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJhbnNsYXRlIGEgY29vcmRpbmF0ZSBpbiB0aGUgZG9jdW1lbnQgdG8gYSBwZXJjZW50YWdlIG9uIHRoZSBzbGlkZXJcbiAgICAgICAgZnVuY3Rpb24gY2FsY1BvaW50VG9QZXJjZW50YWdlKGNhbGNQb2ludCkge1xuICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gY2FsY1BvaW50IC0gb2Zmc2V0KHNjb3BlX0Jhc2UsIG9wdGlvbnMub3J0KTtcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IChsb2NhdGlvbiAqIDEwMCkgLyBiYXNlU2l6ZSgpO1xuICAgICAgICAgICAgLy8gQ2xhbXAgcHJvcG9zYWwgYmV0d2VlbiAwJSBhbmQgMTAwJVxuICAgICAgICAgICAgLy8gT3V0LW9mLWJvdW5kIGNvb3JkaW5hdGVzIG1heSBvY2N1ciB3aGVuIC5ub1VpLWJhc2UgcHNldWRvLWVsZW1lbnRzXG4gICAgICAgICAgICAvLyBhcmUgdXNlZCAoZS5nLiBjb250YWluZWQgaGFuZGxlcyBmZWF0dXJlKVxuICAgICAgICAgICAgcHJvcG9zYWwgPSBsaW1pdChwcm9wb3NhbCk7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kaXIgPyAxMDAgLSBwcm9wb3NhbCA6IHByb3Bvc2FsO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpbmQgaGFuZGxlIGNsb3Nlc3QgdG8gYSBjZXJ0YWluIHBlcmNlbnRhZ2Ugb24gdGhlIHNsaWRlclxuICAgICAgICBmdW5jdGlvbiBnZXRDbG9zZXN0SGFuZGxlKGNsaWNrZWRQb3NpdGlvbikge1xuICAgICAgICAgICAgdmFyIHNtYWxsZXN0RGlmZmVyZW5jZSA9IDEwMDtcbiAgICAgICAgICAgIHZhciBoYW5kbGVOdW1iZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIERpc2FibGVkIGhhbmRsZXMgYXJlIGlnbm9yZWRcbiAgICAgICAgICAgICAgICBpZiAoaXNIYW5kbGVEaXNhYmxlZChpbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlUG9zaXRpb24gPSBzY29wZV9Mb2NhdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPSBNYXRoLmFicyhoYW5kbGVQb3NpdGlvbiAtIGNsaWNrZWRQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgLy8gSW5pdGlhbCBzdGF0ZVxuICAgICAgICAgICAgICAgIHZhciBjbGlja0F0RWRnZSA9IGRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSA9PT0gMTAwICYmIHNtYWxsZXN0RGlmZmVyZW5jZSA9PT0gMTAwO1xuICAgICAgICAgICAgICAgIC8vIERpZmZlcmVuY2Ugd2l0aCB0aGlzIGhhbmRsZSBpcyBzbWFsbGVyIHRoYW4gdGhlIHByZXZpb3VzbHkgY2hlY2tlZCBoYW5kbGVcbiAgICAgICAgICAgICAgICB2YXIgaXNDbG9zZXIgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPCBzbWFsbGVzdERpZmZlcmVuY2U7XG4gICAgICAgICAgICAgICAgdmFyIGlzQ2xvc2VyQWZ0ZXIgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPD0gc21hbGxlc3REaWZmZXJlbmNlICYmIGNsaWNrZWRQb3NpdGlvbiA+IGhhbmRsZVBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChpc0Nsb3NlciB8fCBpc0Nsb3NlckFmdGVyIHx8IGNsaWNrQXRFZGdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlciA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBzbWFsbGVzdERpZmZlcmVuY2UgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlTnVtYmVyO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpcmUgJ2VuZCcgd2hlbiBhIG1vdXNlIG9yIHBlbiBsZWF2ZXMgdGhlIGRvY3VtZW50LlxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudExlYXZlKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJtb3VzZW91dFwiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0Lm5vZGVOYW1lID09PSBcIkhUTUxcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LnJlbGF0ZWRUYXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBldmVudEVuZChldmVudCwgZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlIG1vdmVtZW50IG9uIGRvY3VtZW50IGZvciBoYW5kbGUgYW5kIHJhbmdlIGRyYWcuXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50TW92ZShldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gRml4ICM0OThcbiAgICAgICAgICAgIC8vIENoZWNrIHZhbHVlIG9mIC5idXR0b25zIGluICdzdGFydCcgdG8gd29yayBhcm91bmQgYSBidWcgaW4gSUUxMCBtb2JpbGUgKGRhdGEuYnV0dG9uc1Byb3BlcnR5KS5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvOTI3MDA1L21vYmlsZS1pZTEwLXdpbmRvd3MtcGhvbmUtYnV0dG9ucy1wcm9wZXJ0eS1vZi1wb2ludGVybW92ZS1ldmVudC1hbHdheXMtemVyb1xuICAgICAgICAgICAgLy8gSUU5IGhhcyAuYnV0dG9ucyBhbmQgLndoaWNoIHplcm8gb24gbW91c2Vtb3ZlLlxuICAgICAgICAgICAgLy8gRmlyZWZveCBicmVha3MgdGhlIHNwZWMgTUROIGRlZmluZXMuXG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZihcIk1TSUUgOVwiKSA9PT0gLTEgJiYgZXZlbnQuYnV0dG9ucyA9PT0gMCAmJiBkYXRhLmJ1dHRvbnNQcm9wZXJ0eSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudEVuZChldmVudCwgZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSBhcmUgbW92aW5nIHVwIG9yIGRvd25cbiAgICAgICAgICAgIHZhciBtb3ZlbWVudCA9IChvcHRpb25zLmRpciA/IC0xIDogMSkgKiAoZXZlbnQuY2FsY1BvaW50IC0gZGF0YS5zdGFydENhbGNQb2ludCk7XG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBtb3ZlbWVudCBpbnRvIGEgcGVyY2VudGFnZSBvZiB0aGUgc2xpZGVyIHdpZHRoL2hlaWdodFxuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gKG1vdmVtZW50ICogMTAwKSAvIGRhdGEuYmFzZVNpemU7XG4gICAgICAgICAgICBtb3ZlSGFuZGxlcyhtb3ZlbWVudCA+IDAsIHByb3Bvc2FsLCBkYXRhLmxvY2F0aW9ucywgZGF0YS5oYW5kbGVOdW1iZXJzLCBkYXRhLmNvbm5lY3QpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVuYmluZCBtb3ZlIGV2ZW50cyBvbiBkb2N1bWVudCwgY2FsbCBjYWxsYmFja3MuXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50RW5kKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBUaGUgaGFuZGxlIGlzIG5vIGxvbmdlciBhY3RpdmUsIHNvIHJlbW92ZSB0aGUgY2xhc3MuXG4gICAgICAgICAgICBpZiAoZGF0YS5oYW5kbGUpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkYXRhLmhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmFjdGl2ZSk7XG4gICAgICAgICAgICAgICAgc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50IC09IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVbmJpbmQgdGhlIG1vdmUgYW5kIGVuZCBldmVudHMsIHdoaWNoIGFyZSBhZGRlZCBvbiAnc3RhcnQnLlxuICAgICAgICAgICAgZGF0YS5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICAgIHNjb3BlX0RvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGNbMF0sIGNbMV0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGRyYWdnaW5nIGNsYXNzLlxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmRyYWcpO1xuICAgICAgICAgICAgICAgIHNldFppbmRleCgpO1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjdXJzb3Igc3R5bGVzIGFuZCB0ZXh0LXNlbGVjdGlvbiBldmVudHMgYm91bmQgdG8gdGhlIGJvZHkuXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN1cnNvcikge1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnN0eWxlLmN1cnNvciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0JvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ldmVudHMuc21vb3RoU3RlcHMpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdLCB0cnVlLCB0cnVlLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRhdGEuaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwiY2hhbmdlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwiZW5kXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBCaW5kIG1vdmUgZXZlbnRzIG9uIGRvY3VtZW50LlxuICAgICAgICBmdW5jdGlvbiBldmVudFN0YXJ0KGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgZXZlbnQgaWYgYW55IGhhbmRsZSBpcyBkaXNhYmxlZFxuICAgICAgICAgICAgaWYgKGRhdGEuaGFuZGxlTnVtYmVycy5zb21lKGlzSGFuZGxlRGlzYWJsZWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhhbmRsZTtcbiAgICAgICAgICAgIGlmIChkYXRhLmhhbmRsZU51bWJlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZU9yaWdpbiA9IHNjb3BlX0hhbmRsZXNbZGF0YS5oYW5kbGVOdW1iZXJzWzBdXTtcbiAgICAgICAgICAgICAgICBoYW5kbGUgPSBoYW5kbGVPcmlnaW4uY2hpbGRyZW5bMF07XG4gICAgICAgICAgICAgICAgc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50ICs9IDE7XG4gICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgaGFuZGxlIGFzICdhY3RpdmUnIHNvIGl0IGNhbiBiZSBzdHlsZWQuXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMuYWN0aXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEEgZHJhZyBzaG91bGQgbmV2ZXIgcHJvcGFnYXRlIHVwIHRvIHRoZSAndGFwJyBldmVudC5cbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgLy8gUmVjb3JkIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIG1vdmUgYW5kIGVuZCBldmVudHMuXG4gICAgICAgICAgICB2YXIgbW92ZUV2ZW50ID0gYXR0YWNoRXZlbnQoYWN0aW9ucy5tb3ZlLCBzY29wZV9Eb2N1bWVudEVsZW1lbnQsIGV2ZW50TW92ZSwge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBldmVudCB0YXJnZXQgaGFzIGNoYW5nZWQgc28gd2UgbmVlZCB0byBwcm9wYWdhdGUgdGhlIG9yaWdpbmFsIG9uZSBzbyB0aGF0IHdlIGtlZXBcbiAgICAgICAgICAgICAgICAvLyByZWx5aW5nIG9uIGl0IHRvIGV4dHJhY3QgdGFyZ2V0IHRvdWNoZXMuXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgY29ubmVjdDogZGF0YS5jb25uZWN0LFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczogbGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgIHN0YXJ0Q2FsY1BvaW50OiBldmVudC5jYWxjUG9pbnQsXG4gICAgICAgICAgICAgICAgYmFzZVNpemU6IGJhc2VTaXplKCksXG4gICAgICAgICAgICAgICAgcGFnZU9mZnNldDogZXZlbnQucGFnZU9mZnNldCxcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBkYXRhLmhhbmRsZU51bWJlcnMsXG4gICAgICAgICAgICAgICAgYnV0dG9uc1Byb3BlcnR5OiBldmVudC5idXR0b25zLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uczogc2NvcGVfTG9jYXRpb25zLnNsaWNlKCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBlbmRFdmVudCA9IGF0dGFjaEV2ZW50KGFjdGlvbnMuZW5kLCBzY29wZV9Eb2N1bWVudEVsZW1lbnQsIGV2ZW50RW5kLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgZG9Ob3RSZWplY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgb3V0RXZlbnQgPSBhdHRhY2hFdmVudChcIm1vdXNlb3V0XCIsIHNjb3BlX0RvY3VtZW50RWxlbWVudCwgZG9jdW1lbnRMZWF2ZSwge1xuICAgICAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogaGFuZGxlLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczogbGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgIGRvTm90UmVqZWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IGRhdGEuaGFuZGxlTnVtYmVycyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gV2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgcHVzaGVkIHRoZSBsaXN0ZW5lcnMgaW4gdGhlIGxpc3RlbmVyIGxpc3QgcmF0aGVyIHRoYW4gY3JlYXRpbmdcbiAgICAgICAgICAgIC8vIGEgbmV3IG9uZSBhcyBpdCBoYXMgYWxyZWFkeSBiZWVuIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaC5hcHBseShsaXN0ZW5lcnMsIG1vdmVFdmVudC5jb25jYXQoZW5kRXZlbnQsIG91dEV2ZW50KSk7XG4gICAgICAgICAgICAvLyBUZXh0IHNlbGVjdGlvbiBpc24ndCBhbiBpc3N1ZSBvbiB0b3VjaCBkZXZpY2VzLFxuICAgICAgICAgICAgLy8gc28gYWRkaW5nIGN1cnNvciBzdHlsZXMgY2FuIGJlIHNraXBwZWQuXG4gICAgICAgICAgICBpZiAoZXZlbnQuY3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCB0aGUgJ0knIGN1cnNvciBhbmQgZXh0ZW5kIHRoZSByYW5nZS1kcmFnIGN1cnNvci5cbiAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnN0eWxlLmN1cnNvciA9IGdldENvbXB1dGVkU3R5bGUoZXZlbnQudGFyZ2V0KS5jdXJzb3I7XG4gICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgdGFyZ2V0IHdpdGggYSBkcmFnZ2luZyBzdGF0ZS5cbiAgICAgICAgICAgICAgICBpZiAoc2NvcGVfSGFuZGxlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmRyYWcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRleHQgc2VsZWN0aW9uIHdoZW4gZHJhZ2dpbmcgdGhlIGhhbmRsZXMuXG4gICAgICAgICAgICAgICAgLy8gSW4gbm9VaVNsaWRlciA8PSA5LjIuMCwgdGhpcyB3YXMgaGFuZGxlZCBieSBjYWxsaW5nIHByZXZlbnREZWZhdWx0IG9uIG1vdXNlL3RvdWNoIHN0YXJ0L21vdmUsXG4gICAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgc2Nyb2xsIGJsb2NraW5nLiBUaGUgc2VsZWN0c3RhcnQgZXZlbnQgaXMgc3VwcG9ydGVkIGJ5IEZpcmVGb3ggc3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDUyLFxuICAgICAgICAgICAgICAgIC8vIG1lYW5pbmcgdGhlIG9ubHkgaG9sZG91dCBpcyBpT1MgU2FmYXJpLiBUaGlzIGRvZXNuJ3QgbWF0dGVyOiB0ZXh0IHNlbGVjdGlvbiBpc24ndCB0cmlnZ2VyZWQgdGhlcmUuXG4gICAgICAgICAgICAgICAgLy8gVGhlICdjdXJzb3InIGZsYWcgaXMgZmFsc2UuXG4gICAgICAgICAgICAgICAgLy8gU2VlOiBodHRwOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1zZWxlY3RzdGFydFxuICAgICAgICAgICAgICAgIHNjb3BlX0JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIsIHByZXZlbnREZWZhdWx0LCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkYXRhLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic3RhcnRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIE1vdmUgY2xvc2VzdCBoYW5kbGUgdG8gdGFwcGVkIGxvY2F0aW9uLlxuICAgICAgICBmdW5jdGlvbiBldmVudFRhcChldmVudCkge1xuICAgICAgICAgICAgLy8gVGhlIHRhcCBldmVudCBzaG91bGRuJ3QgcHJvcGFnYXRlIHVwXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IGNhbGNQb2ludFRvUGVyY2VudGFnZShldmVudC5jYWxjUG9pbnQpO1xuICAgICAgICAgICAgdmFyIGhhbmRsZU51bWJlciA9IGdldENsb3Nlc3RIYW5kbGUocHJvcG9zYWwpO1xuICAgICAgICAgICAgLy8gVGFja2xlIHRoZSBjYXNlIHRoYXQgYWxsIGhhbmRsZXMgYXJlICdkaXNhYmxlZCcuXG4gICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVyID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZsYWcgdGhlIHNsaWRlciBhcyBpdCBpcyBub3cgaW4gYSB0cmFuc2l0aW9uYWwgc3RhdGUuXG4gICAgICAgICAgICAvLyBUcmFuc2l0aW9uIHRha2VzIGEgY29uZmlndXJhYmxlIGFtb3VudCBvZiBtcyAoZGVmYXVsdCAzMDApLiBSZS1lbmFibGUgdGhlIHNsaWRlciBhZnRlciB0aGF0LlxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmV2ZW50cy5zbmFwKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NGb3Ioc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFwLCBvcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHByb3Bvc2FsLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIHNldFppbmRleCgpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2xpZGVcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmV2ZW50cy5zbmFwKSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwiY2hhbmdlXCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBldmVudFN0YXJ0KGV2ZW50LCB7IGhhbmRsZU51bWJlcnM6IFtoYW5kbGVOdW1iZXJdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEZpcmVzIGEgJ2hvdmVyJyBldmVudCBmb3IgYSBob3ZlcmVkIG1vdXNlL3BlbiBwb3NpdGlvbi5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRIb3ZlcihldmVudCkge1xuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gY2FsY1BvaW50VG9QZXJjZW50YWdlKGV2ZW50LmNhbGNQb2ludCk7XG4gICAgICAgICAgICB2YXIgdG8gPSBzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHByb3Bvc2FsKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyh0byk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzY29wZV9FdmVudHMpLmZvckVhY2goZnVuY3Rpb24gKHRhcmdldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiaG92ZXJcIiA9PT0gdGFyZ2V0RXZlbnQuc3BsaXQoXCIuXCIpWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0V2ZW50c1t0YXJnZXRFdmVudF0uZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoc2NvcGVfU2VsZiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGVzIGtleWRvd24gb24gZm9jdXNlZCBoYW5kbGVzXG4gICAgICAgIC8vIERvbid0IG1vdmUgdGhlIGRvY3VtZW50IHdoZW4gcHJlc3NpbmcgYXJyb3cga2V5cyBvbiBmb2N1c2VkIGhhbmRsZXNcbiAgICAgICAgZnVuY3Rpb24gZXZlbnRLZXlkb3duKGV2ZW50LCBoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChpc1NsaWRlckRpc2FibGVkKCkgfHwgaXNIYW5kbGVEaXNhYmxlZChoYW5kbGVOdW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhvcml6b250YWxLZXlzID0gW1wiTGVmdFwiLCBcIlJpZ2h0XCJdO1xuICAgICAgICAgICAgdmFyIHZlcnRpY2FsS2V5cyA9IFtcIkRvd25cIiwgXCJVcFwiXTtcbiAgICAgICAgICAgIHZhciBsYXJnZVN0ZXBLZXlzID0gW1wiUGFnZURvd25cIiwgXCJQYWdlVXBcIl07XG4gICAgICAgICAgICB2YXIgZWRnZUtleXMgPSBbXCJIb21lXCIsIFwiRW5kXCJdO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGlyICYmICFvcHRpb25zLm9ydCkge1xuICAgICAgICAgICAgICAgIC8vIE9uIGFuIHJpZ2h0LXRvLWxlZnQgc2xpZGVyLCB0aGUgbGVmdCBhbmQgcmlnaHQga2V5cyBhY3QgaW52ZXJ0ZWRcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsS2V5cy5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvcHRpb25zLm9ydCAmJiAhb3B0aW9ucy5kaXIpIHtcbiAgICAgICAgICAgICAgICAvLyBPbiBhIHRvcC10by1ib3R0b20gc2xpZGVyLCB0aGUgdXAgYW5kIGRvd24ga2V5cyBhY3QgaW52ZXJ0ZWRcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbEtleXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIGxhcmdlU3RlcEtleXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU3RyaXAgXCJBcnJvd1wiIGZvciBJRSBjb21wYXRpYmlsaXR5LiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlcbiAgICAgICAgICAgIHZhciBrZXkgPSBldmVudC5rZXkucmVwbGFjZShcIkFycm93XCIsIFwiXCIpO1xuICAgICAgICAgICAgdmFyIGlzTGFyZ2VEb3duID0ga2V5ID09PSBsYXJnZVN0ZXBLZXlzWzBdO1xuICAgICAgICAgICAgdmFyIGlzTGFyZ2VVcCA9IGtleSA9PT0gbGFyZ2VTdGVwS2V5c1sxXTtcbiAgICAgICAgICAgIHZhciBpc0Rvd24gPSBrZXkgPT09IHZlcnRpY2FsS2V5c1swXSB8fCBrZXkgPT09IGhvcml6b250YWxLZXlzWzBdIHx8IGlzTGFyZ2VEb3duO1xuICAgICAgICAgICAgdmFyIGlzVXAgPSBrZXkgPT09IHZlcnRpY2FsS2V5c1sxXSB8fCBrZXkgPT09IGhvcml6b250YWxLZXlzWzFdIHx8IGlzTGFyZ2VVcDtcbiAgICAgICAgICAgIHZhciBpc01pbiA9IGtleSA9PT0gZWRnZUtleXNbMF07XG4gICAgICAgICAgICB2YXIgaXNNYXggPSBrZXkgPT09IGVkZ2VLZXlzWzFdO1xuICAgICAgICAgICAgaWYgKCFpc0Rvd24gJiYgIWlzVXAgJiYgIWlzTWluICYmICFpc01heCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHZhciB0bztcbiAgICAgICAgICAgIGlmIChpc1VwIHx8IGlzRG93bikge1xuICAgICAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBpc0Rvd24gPyAwIDogMTtcbiAgICAgICAgICAgICAgICB2YXIgc3RlcHMgPSBnZXROZXh0U3RlcHNGb3JIYW5kbGUoaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RlcCA9IHN0ZXBzW2RpcmVjdGlvbl07XG4gICAgICAgICAgICAgICAgLy8gQXQgdGhlIGVkZ2Ugb2YgYSBzbGlkZXIsIGRvIG5vdGhpbmdcbiAgICAgICAgICAgICAgICBpZiAoc3RlcCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIE5vIHN0ZXAgc2V0LCB1c2UgdGhlIGRlZmF1bHQgb2YgMTAlIG9mIHRoZSBzdWItcmFuZ2VcbiAgICAgICAgICAgICAgICBpZiAoc3RlcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCA9IHNjb3BlX1NwZWN0cnVtLmdldERlZmF1bHRTdGVwKHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdLCBpc0Rvd24sIG9wdGlvbnMua2V5Ym9hcmREZWZhdWx0U3RlcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0xhcmdlVXAgfHwgaXNMYXJnZURvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCAqPSBvcHRpb25zLmtleWJvYXJkUGFnZU11bHRpcGxpZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdGVwICo9IG9wdGlvbnMua2V5Ym9hcmRNdWx0aXBsaWVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBTdGVwIG92ZXIgemVyby1sZW5ndGggcmFuZ2VzICgjOTQ4KTtcbiAgICAgICAgICAgICAgICBzdGVwID0gTWF0aC5tYXgoc3RlcCwgMC4wMDAwMDAxKTtcbiAgICAgICAgICAgICAgICAvLyBEZWNyZW1lbnQgZm9yIGRvd24gc3RlcHNcbiAgICAgICAgICAgICAgICBzdGVwID0gKGlzRG93biA/IC0xIDogMSkgKiBzdGVwO1xuICAgICAgICAgICAgICAgIHRvID0gc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl0gKyBzdGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNNYXgpIHtcbiAgICAgICAgICAgICAgICAvLyBFbmQga2V5XG4gICAgICAgICAgICAgICAgdG8gPSBvcHRpb25zLnNwZWN0cnVtLnhWYWxbb3B0aW9ucy5zcGVjdHJ1bS54VmFsLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSG9tZSBrZXlcbiAgICAgICAgICAgICAgICB0byA9IG9wdGlvbnMuc3BlY3RydW0ueFZhbFswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHNjb3BlX1NwZWN0cnVtLnRvU3RlcHBpbmcodG8pLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQXR0YWNoIGV2ZW50cyB0byBzZXZlcmFsIHNsaWRlciBwYXJ0cy5cbiAgICAgICAgZnVuY3Rpb24gYmluZFNsaWRlckV2ZW50cyhiZWhhdmlvdXIpIHtcbiAgICAgICAgICAgIC8vIEF0dGFjaCB0aGUgc3RhbmRhcmQgZHJhZyBldmVudCB0byB0aGUgaGFuZGxlcy5cbiAgICAgICAgICAgIGlmICghYmVoYXZpb3VyLmZpeGVkKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIGV2ZW50cyBhcmUgb25seSBib3VuZCB0byB0aGUgdmlzdWFsIGhhbmRsZVxuICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50LCBub3QgdGhlICdyZWFsJyBvcmlnaW4gZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5zdGFydCwgaGFuZGxlLmNoaWxkcmVuWzBdLCBldmVudFN0YXJ0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBbaW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEF0dGFjaCB0aGUgdGFwIGV2ZW50IHRvIHRoZSBzbGlkZXIgYmFzZS5cbiAgICAgICAgICAgIGlmIChiZWhhdmlvdXIudGFwKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5zdGFydCwgc2NvcGVfQmFzZSwgZXZlbnRUYXAsIHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZpcmUgaG92ZXIgZXZlbnRzXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmhvdmVyKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5tb3ZlLCBzY29wZV9CYXNlLCBldmVudEhvdmVyLCB7XG4gICAgICAgICAgICAgICAgICAgIGhvdmVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFrZSB0aGUgcmFuZ2UgZHJhZ2dhYmxlLlxuICAgICAgICAgICAgaWYgKGJlaGF2aW91ci5kcmFnKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMuZm9yRWFjaChmdW5jdGlvbiAoY29ubmVjdCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3QgPT09IGZhbHNlIHx8IGluZGV4ID09PSAwIHx8IGluZGV4ID09PSBzY29wZV9Db25uZWN0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZUJlZm9yZSA9IHNjb3BlX0hhbmRsZXNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZUFmdGVyID0gc2NvcGVfSGFuZGxlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudEhvbGRlcnMgPSBbY29ubmVjdF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVzVG9EcmFnID0gW2hhbmRsZUJlZm9yZSwgaGFuZGxlQWZ0ZXJdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlTnVtYmVyc1RvRHJhZyA9IFtpbmRleCAtIDEsIGluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoY29ubmVjdCwgb3B0aW9ucy5jc3NDbGFzc2VzLmRyYWdnYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIHJhbmdlIGlzIGZpeGVkLCB0aGUgZW50aXJlIHJhbmdlIGNhblxuICAgICAgICAgICAgICAgICAgICAvLyBiZSBkcmFnZ2VkIGJ5IHRoZSBoYW5kbGVzLiBUaGUgaGFuZGxlIGluIHRoZSBmaXJzdFxuICAgICAgICAgICAgICAgICAgICAvLyBvcmlnaW4gd2lsbCBwcm9wYWdhdGUgdGhlIHN0YXJ0IGV2ZW50IHVwd2FyZCxcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGl0IG5lZWRzIHRvIGJlIGJvdW5kIG1hbnVhbGx5IG9uIHRoZSBvdGhlci5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlaGF2aW91ci5maXhlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRIb2xkZXJzLnB1c2goaGFuZGxlQmVmb3JlLmNoaWxkcmVuWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SG9sZGVycy5wdXNoKGhhbmRsZUFmdGVyLmNoaWxkcmVuWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmRyYWdBbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXNUb0RyYWcgPSBzY29wZV9IYW5kbGVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyc1RvRHJhZyA9IHNjb3BlX0hhbmRsZU51bWJlcnM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXZlbnRIb2xkZXJzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2hFdmVudChhY3Rpb25zLnN0YXJ0LCBldmVudEhvbGRlciwgZXZlbnRTdGFydCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IGhhbmRsZXNUb0RyYWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogaGFuZGxlTnVtYmVyc1RvRHJhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0OiBjb25uZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEF0dGFjaCBhbiBldmVudCB0byB0aGlzIHNsaWRlciwgcG9zc2libHkgaW5jbHVkaW5nIGEgbmFtZXNwYWNlXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRFdmVudChuYW1lc3BhY2VkRXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzY29wZV9FdmVudHNbbmFtZXNwYWNlZEV2ZW50XSA9IHNjb3BlX0V2ZW50c1tuYW1lc3BhY2VkRXZlbnRdIHx8IFtdO1xuICAgICAgICAgICAgc2NvcGVfRXZlbnRzW25hbWVzcGFjZWRFdmVudF0ucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgYm91bmQgaXMgJ3VwZGF0ZSwnIGZpcmUgaXQgaW1tZWRpYXRlbHkgZm9yIGFsbCBoYW5kbGVzLlxuICAgICAgICAgICAgaWYgKG5hbWVzcGFjZWRFdmVudC5zcGxpdChcIi5cIilbMF0gPT09IFwidXBkYXRlXCIpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24gKGEsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaXNJbnRlcm5hbE5hbWVzcGFjZShuYW1lc3BhY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lc3BhY2UgPT09IElOVEVSTkFMX0VWRU5UX05TLmFyaWEgfHwgbmFtZXNwYWNlID09PSBJTlRFUk5BTF9FVkVOVF9OUy50b29sdGlwcztcbiAgICAgICAgfVxuICAgICAgICAvLyBVbmRvIGF0dGFjaG1lbnQgb2YgZXZlbnRcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlRXZlbnQobmFtZXNwYWNlZEV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnQgPSBuYW1lc3BhY2VkRXZlbnQgJiYgbmFtZXNwYWNlZEV2ZW50LnNwbGl0KFwiLlwiKVswXTtcbiAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBldmVudCA/IG5hbWVzcGFjZWRFdmVudC5zdWJzdHJpbmcoZXZlbnQubGVuZ3RoKSA6IG5hbWVzcGFjZWRFdmVudDtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjb3BlX0V2ZW50cykuZm9yRWFjaChmdW5jdGlvbiAoYmluZCkge1xuICAgICAgICAgICAgICAgIHZhciB0RXZlbnQgPSBiaW5kLnNwbGl0KFwiLlwiKVswXTtcbiAgICAgICAgICAgICAgICB2YXIgdE5hbWVzcGFjZSA9IGJpbmQuc3Vic3RyaW5nKHRFdmVudC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmICgoIWV2ZW50IHx8IGV2ZW50ID09PSB0RXZlbnQpICYmICghbmFtZXNwYWNlIHx8IG5hbWVzcGFjZSA9PT0gdE5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb25seSBkZWxldGUgcHJvdGVjdGVkIGludGVybmFsIGV2ZW50IGlmIGludGVudGlvbmFsXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNJbnRlcm5hbE5hbWVzcGFjZSh0TmFtZXNwYWNlKSB8fCBuYW1lc3BhY2UgPT09IHROYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzY29wZV9FdmVudHNbYmluZF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFeHRlcm5hbCBldmVudCBoYW5kbGluZ1xuICAgICAgICBmdW5jdGlvbiBmaXJlRXZlbnQoZXZlbnROYW1lLCBoYW5kbGVOdW1iZXIsIHRhcCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGVfRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXRFdmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFR5cGUgPSB0YXJnZXRFdmVudC5zcGxpdChcIi5cIilbMF07XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gZXZlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0V2ZW50c1t0YXJnZXRFdmVudF0uZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIHNsaWRlciBwdWJsaWMgQVBJIGFzIHRoZSBzY29wZSAoJ3RoaXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfU2VsZiwgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdmFsdWVzIGFzIGFycmF5LCBzbyBhcmdfMVthcmdfMl0gaXMgYWx3YXlzIHZhbGlkLlxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfVmFsdWVzLm1hcChvcHRpb25zLmZvcm1hdC50byksIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIGluZGV4LCAwIG9yIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlciwgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVbi1mb3JtYXR0ZWQgc2xpZGVyIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfVmFsdWVzLnNsaWNlKCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXZlbnQgaXMgZmlyZWQgYnkgdGFwLCB0cnVlIG9yIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXAgfHwgZmFsc2UsIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGVmdCBvZmZzZXQgb2YgdGhlIGhhbmRsZSwgaW4gcmVsYXRpb24gdG8gdGhlIHNsaWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zLnNsaWNlKCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRoZSBzbGlkZXIgcHVibGljIEFQSSB0byBhbiBhY2Nlc3NpYmxlIHBhcmFtZXRlciB3aGVuIHRoaXMgaXMgdW5hdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1NlbGYpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTcGxpdCBvdXQgdGhlIGhhbmRsZSBwb3NpdGlvbmluZyBsb2dpYyBzbyB0aGUgTW92ZSBldmVudCBjYW4gdXNlIGl0LCB0b29cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tIYW5kbGVQb3NpdGlvbihyZWZlcmVuY2UsIGhhbmRsZU51bWJlciwgdG8sIGxvb2tCYWNrd2FyZCwgbG9va0ZvcndhcmQsIGdldFZhbHVlLCBzbW9vdGhTdGVwcykge1xuICAgICAgICAgICAgdmFyIGRpc3RhbmNlO1xuICAgICAgICAgICAgLy8gRm9yIHNsaWRlcnMgd2l0aCBtdWx0aXBsZSBoYW5kbGVzLCBsaW1pdCBtb3ZlbWVudCB0byB0aGUgb3RoZXIgaGFuZGxlLlxuICAgICAgICAgICAgLy8gQXBwbHkgdGhlIG1hcmdpbiBvcHRpb24gYnkgYWRkaW5nIGl0IHRvIHRoZSBoYW5kbGUgcG9zaXRpb25zLlxuICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSAmJiAhb3B0aW9ucy5ldmVudHMudW5jb25zdHJhaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChsb29rQmFja3dhcmQgJiYgaGFuZGxlTnVtYmVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UocmVmZXJlbmNlW2hhbmRsZU51bWJlciAtIDFdLCBvcHRpb25zLm1hcmdpbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsb29rRm9yd2FyZCAmJiBoYW5kbGVOdW1iZXIgPCBzY29wZV9IYW5kbGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgKyAxXSwgb3B0aW9ucy5tYXJnaW4sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhlIGxpbWl0IG9wdGlvbiBoYXMgdGhlIG9wcG9zaXRlIGVmZmVjdCwgbGltaXRpbmcgaGFuZGxlcyB0byBhXG4gICAgICAgICAgICAvLyBtYXhpbXVtIGRpc3RhbmNlIGZyb20gYW5vdGhlci4gTGltaXQgbXVzdCBiZSA+IDAsIGFzIG90aGVyd2lzZVxuICAgICAgICAgICAgLy8gaGFuZGxlcyB3b3VsZCBiZSB1bm1vdmFibGUuXG4gICAgICAgICAgICBpZiAoc2NvcGVfSGFuZGxlcy5sZW5ndGggPiAxICYmIG9wdGlvbnMubGltaXQpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9va0JhY2t3YXJkICYmIGhhbmRsZU51bWJlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgLSAxXSwgb3B0aW9ucy5saW1pdCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsb29rRm9yd2FyZCAmJiBoYW5kbGVOdW1iZXIgPCBzY29wZV9IYW5kbGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgKyAxXSwgb3B0aW9ucy5saW1pdCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGUgcGFkZGluZyBvcHRpb24ga2VlcHMgdGhlIGhhbmRsZXMgYSBjZXJ0YWluIGRpc3RhbmNlIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBlZGdlcyBvZiB0aGUgc2xpZGVyLiBQYWRkaW5nIG11c3QgYmUgPiAwLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFkZGluZykge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKDAsIG9wdGlvbnMucGFkZGluZ1swXSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IHNjb3BlX0hhbmRsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UoMTAwLCBvcHRpb25zLnBhZGRpbmdbMV0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzbW9vdGhTdGVwcykge1xuICAgICAgICAgICAgICAgIHRvID0gc2NvcGVfU3BlY3RydW0uZ2V0U3RlcCh0byk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBMaW1pdCBwZXJjZW50YWdlIHRvIHRoZSAwIC0gMTAwIHJhbmdlXG4gICAgICAgICAgICB0byA9IGxpbWl0KHRvKTtcbiAgICAgICAgICAgIC8vIFJldHVybiBmYWxzZSBpZiBoYW5kbGUgY2FuJ3QgbW92ZVxuICAgICAgICAgICAgaWYgKHRvID09PSByZWZlcmVuY2VbaGFuZGxlTnVtYmVyXSAmJiAhZ2V0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdG87XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXNlcyBzbGlkZXIgb3JpZW50YXRpb24gdG8gY3JlYXRlIENTUyBydWxlcy4gYSA9IGJhc2UgdmFsdWU7XG4gICAgICAgIGZ1bmN0aW9uIGluUnVsZU9yZGVyKHYsIGEpIHtcbiAgICAgICAgICAgIHZhciBvID0gb3B0aW9ucy5vcnQ7XG4gICAgICAgICAgICByZXR1cm4gKG8gPyBhIDogdikgKyBcIiwgXCIgKyAobyA/IHYgOiBhKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBNb3ZlcyBoYW5kbGUocykgYnkgYSBwZXJjZW50YWdlXG4gICAgICAgIC8vIChib29sLCAlIHRvIG1vdmUsIFslIHdoZXJlIGhhbmRsZSBzdGFydGVkLCAuLi5dLCBbaW5kZXggaW4gc2NvcGVfSGFuZGxlcywgLi4uXSlcbiAgICAgICAgZnVuY3Rpb24gbW92ZUhhbmRsZXModXB3YXJkLCBwcm9wb3NhbCwgbG9jYXRpb25zLCBoYW5kbGVOdW1iZXJzLCBjb25uZWN0KSB7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWxzID0gbG9jYXRpb25zLnNsaWNlKCk7XG4gICAgICAgICAgICAvLyBTdG9yZSBmaXJzdCBoYW5kbGUgbm93LCBzbyB3ZSBzdGlsbCBoYXZlIGl0IGluIGNhc2UgaGFuZGxlTnVtYmVycyBpcyByZXZlcnNlZFxuICAgICAgICAgICAgdmFyIGZpcnN0SGFuZGxlID0gaGFuZGxlTnVtYmVyc1swXTtcbiAgICAgICAgICAgIHZhciBzbW9vdGhTdGVwcyA9IG9wdGlvbnMuZXZlbnRzLnNtb290aFN0ZXBzO1xuICAgICAgICAgICAgdmFyIGIgPSBbIXVwd2FyZCwgdXB3YXJkXTtcbiAgICAgICAgICAgIHZhciBmID0gW3Vwd2FyZCwgIXVwd2FyZF07XG4gICAgICAgICAgICAvLyBDb3B5IGhhbmRsZU51bWJlcnMgc28gd2UgZG9uJ3QgY2hhbmdlIHRoZSBkYXRhc2V0XG4gICAgICAgICAgICBoYW5kbGVOdW1iZXJzID0gaGFuZGxlTnVtYmVycy5zbGljZSgpO1xuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIHdoaWNoIGhhbmRsZSBpcyAnbGVhZGluZycuXG4gICAgICAgICAgICAvLyBJZiB0aGF0IG9uZSBjYW4ndCBtb3ZlIHRoZSBzZWNvbmQgY2FuJ3QgZWl0aGVyLlxuICAgICAgICAgICAgaWYgKHVwd2FyZCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU3RlcCAxOiBnZXQgdGhlIG1heGltdW0gcGVyY2VudGFnZSB0aGF0IGFueSBvZiB0aGUgaGFuZGxlcyBjYW4gbW92ZVxuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlTnVtYmVyLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9IGNoZWNrSGFuZGxlUG9zaXRpb24ocHJvcG9zYWxzLCBoYW5kbGVOdW1iZXIsIHByb3Bvc2Fsc1toYW5kbGVOdW1iZXJdICsgcHJvcG9zYWwsIGJbb10sIGZbb10sIGZhbHNlLCBzbW9vdGhTdGVwcyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3AgaWYgb25lIG9mIHRoZSBoYW5kbGVzIGNhbid0IG1vdmUuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0byA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2FsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2FsID0gdG8gLSBwcm9wb3NhbHNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2Fsc1toYW5kbGVOdW1iZXJdID0gdG87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHVzaW5nIG9uZSBoYW5kbGUsIGNoZWNrIGJhY2t3YXJkIEFORCBmb3J3YXJkXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBiID0gZiA9IFt0cnVlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gU3RlcCAyOiBUcnkgdG8gc2V0IHRoZSBoYW5kbGVzIHdpdGggdGhlIGZvdW5kIHBlcmNlbnRhZ2VcbiAgICAgICAgICAgIGhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlTnVtYmVyLCBvKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUgPVxuICAgICAgICAgICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBsb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSArIHByb3Bvc2FsLCBiW29dLCBmW29dLCBmYWxzZSwgc21vb3RoU3RlcHMpIHx8IHN0YXRlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBTdGVwIDM6IElmIGEgaGFuZGxlIG1vdmVkLCBmaXJlIGV2ZW50c1xuICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIGEgY29ubmVjdCwgdGhlbiBmaXJlIGRyYWcgZXZlbnRcbiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwiZHJhZ1wiLCBmaXJzdEhhbmRsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRha2VzIGEgYmFzZSB2YWx1ZSBhbmQgYW4gb2Zmc2V0LiBUaGlzIG9mZnNldCBpcyB1c2VkIGZvciB0aGUgY29ubmVjdCBiYXIgc2l6ZS5cbiAgICAgICAgLy8gSW4gdGhlIGluaXRpYWwgZGVzaWduIGZvciB0aGlzIGZlYXR1cmUsIHRoZSBvcmlnaW4gZWxlbWVudCB3YXMgMSUgd2lkZS5cbiAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgYSByb3VuZGluZyBidWcgaW4gQ2hyb21lIG1ha2VzIGl0IGltcG9zc2libGUgdG8gaW1wbGVtZW50IHRoaXMgZmVhdHVyZVxuICAgICAgICAvLyBpbiB0aGlzIG1hbm5lcjogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Nzk4MjIzXG4gICAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybURpcmVjdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kaXIgPyAxMDAgLSBhIC0gYiA6IGE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRlcyBzY29wZV9Mb2NhdGlvbnMgYW5kIHNjb3BlX1ZhbHVlcywgdXBkYXRlcyB2aXN1YWwgc3RhdGVcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlSGFuZGxlUG9zaXRpb24oaGFuZGxlTnVtYmVyLCB0bykge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGxvY2F0aW9ucy5cbiAgICAgICAgICAgIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdID0gdG87XG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSB2YWx1ZSB0byB0aGUgc2xpZGVyIHN0ZXBwaW5nL3JhbmdlLlxuICAgICAgICAgICAgc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl0gPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcodG8pO1xuICAgICAgICAgICAgdmFyIHRyYW5zbGF0aW9uID0gdHJhbnNmb3JtRGlyZWN0aW9uKHRvLCAwKSAtIHNjb3BlX0Rpck9mZnNldDtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVSdWxlID0gXCJ0cmFuc2xhdGUoXCIgKyBpblJ1bGVPcmRlcih0cmFuc2xhdGlvbiArIFwiJVwiLCBcIjBcIikgKyBcIilcIjtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZVtvcHRpb25zLnRyYW5zZm9ybVJ1bGVdID0gdHJhbnNsYXRlUnVsZTtcbiAgICAgICAgICAgIHVwZGF0ZUNvbm5lY3QoaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIHVwZGF0ZUNvbm5lY3QoaGFuZGxlTnVtYmVyICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSGFuZGxlcyBiZWZvcmUgdGhlIHNsaWRlciBtaWRkbGUgYXJlIHN0YWNrZWQgbGF0ZXIgPSBoaWdoZXIsXG4gICAgICAgIC8vIEhhbmRsZXMgYWZ0ZXIgdGhlIG1pZGRsZSBsYXRlciBpcyBsb3dlclxuICAgICAgICAvLyBbWzddIFs4XSAuLi4uLi4uLi4uIHwgLi4uLi4uLi4uLiBbNV0gWzRdXG4gICAgICAgIGZ1bmN0aW9uIHNldFppbmRleCgpIHtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpciA9IHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdID4gNTAgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgdmFyIHpJbmRleCA9IDMgKyAoc2NvcGVfSGFuZGxlcy5sZW5ndGggKyBkaXIgKiBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZS56SW5kZXggPSBTdHJpbmcoekluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRlc3Qgc3VnZ2VzdGVkIHZhbHVlcyBhbmQgYXBwbHkgbWFyZ2luLCBzdGVwLlxuICAgICAgICAvLyBpZiBleGFjdElucHV0IGlzIHRydWUsIGRvbid0IHJ1biBjaGVja0hhbmRsZVBvc2l0aW9uLCB0aGVuIHRoZSBoYW5kbGUgY2FuIGJlIHBsYWNlZCBpbiBiZXR3ZWVuIHN0ZXBzICgjNDM2KVxuICAgICAgICBmdW5jdGlvbiBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCwgZXhhY3RJbnB1dCwgc21vb3RoU3RlcHMpIHtcbiAgICAgICAgICAgIGlmICghZXhhY3RJbnB1dCkge1xuICAgICAgICAgICAgICAgIHRvID0gY2hlY2tIYW5kbGVQb3NpdGlvbihzY29wZV9Mb2NhdGlvbnMsIGhhbmRsZU51bWJlciwgdG8sIGxvb2tCYWNrd2FyZCwgbG9va0ZvcndhcmQsIGZhbHNlLCBzbW9vdGhTdGVwcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlSGFuZGxlUG9zaXRpb24oaGFuZGxlTnVtYmVyLCB0byk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBVcGRhdGVzIHN0eWxlIGF0dHJpYnV0ZSBmb3IgY29ubmVjdCBub2Rlc1xuICAgICAgICBmdW5jdGlvbiB1cGRhdGVDb25uZWN0KGluZGV4KSB7XG4gICAgICAgICAgICAvLyBTa2lwIGNvbm5lY3RzIHNldCB0byBmYWxzZVxuICAgICAgICAgICAgaWYgKCFzY29wZV9Db25uZWN0c1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbCA9IDA7XG4gICAgICAgICAgICB2YXIgaCA9IDEwMDtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGwgPSBzY29wZV9Mb2NhdGlvbnNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gc2NvcGVfQ29ubmVjdHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGggPSBzY29wZV9Mb2NhdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gV2UgdXNlIHR3byBydWxlczpcbiAgICAgICAgICAgIC8vICd0cmFuc2xhdGUnIHRvIGNoYW5nZSB0aGUgbGVmdC90b3Agb2Zmc2V0O1xuICAgICAgICAgICAgLy8gJ3NjYWxlJyB0byBjaGFuZ2UgdGhlIHdpZHRoIG9mIHRoZSBlbGVtZW50O1xuICAgICAgICAgICAgLy8gQXMgdGhlIGVsZW1lbnQgaGFzIGEgd2lkdGggb2YgMTAwJSwgYSB0cmFuc2xhdGlvbiBvZiAxMDAlIGlzIGVxdWFsIHRvIDEwMCUgb2YgdGhlIHBhcmVudCAoLm5vVWktYmFzZSlcbiAgICAgICAgICAgIHZhciBjb25uZWN0V2lkdGggPSBoIC0gbDtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVSdWxlID0gXCJ0cmFuc2xhdGUoXCIgKyBpblJ1bGVPcmRlcih0cmFuc2Zvcm1EaXJlY3Rpb24obCwgY29ubmVjdFdpZHRoKSArIFwiJVwiLCBcIjBcIikgKyBcIilcIjtcbiAgICAgICAgICAgIHZhciBzY2FsZVJ1bGUgPSBcInNjYWxlKFwiICsgaW5SdWxlT3JkZXIoY29ubmVjdFdpZHRoIC8gMTAwLCBcIjFcIikgKyBcIilcIjtcbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzW2luZGV4XS5zdHlsZVtvcHRpb25zLnRyYW5zZm9ybVJ1bGVdID1cbiAgICAgICAgICAgICAgICB0cmFuc2xhdGVSdWxlICsgXCIgXCIgKyBzY2FsZVJ1bGU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUGFyc2VzIHZhbHVlIHBhc3NlZCB0byAuc2V0IG1ldGhvZC4gUmV0dXJucyBjdXJyZW50IHZhbHVlIGlmIG5vdCBwYXJzZS1hYmxlLlxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlVG9WYWx1ZSh0bywgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAvLyBTZXR0aW5nIHdpdGggbnVsbCBpbmRpY2F0ZXMgYW4gJ2lnbm9yZScuXG4gICAgICAgICAgICAvLyBJbnB1dHRpbmcgJ2ZhbHNlJyBpcyBpbnZhbGlkLlxuICAgICAgICAgICAgaWYgKHRvID09PSBudWxsIHx8IHRvID09PSBmYWxzZSB8fCB0byA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgYSBmb3JtYXR0ZWQgbnVtYmVyIHdhcyBwYXNzZWQsIGF0dGVtcHQgdG8gZGVjb2RlIGl0LlxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRvID0gU3RyaW5nKHRvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvID0gb3B0aW9ucy5mb3JtYXQuZnJvbSh0byk7XG4gICAgICAgICAgICBpZiAodG8gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdG8gPSBzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKHRvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHBhcnNpbmcgdGhlIG51bWJlciBmYWlsZWQsIHVzZSB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICAgICAgICAgIGlmICh0byA9PT0gZmFsc2UgfHwgaXNOYU4odG8pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRvO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCB0aGUgc2xpZGVyIHZhbHVlLlxuICAgICAgICBmdW5jdGlvbiB2YWx1ZVNldChpbnB1dCwgZmlyZVNldEV2ZW50LCBleGFjdElucHV0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gYXNBcnJheShpbnB1dCk7XG4gICAgICAgICAgICB2YXIgaXNJbml0ID0gc2NvcGVfTG9jYXRpb25zWzBdID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAvLyBFdmVudCBmaXJlcyBieSBkZWZhdWx0XG4gICAgICAgICAgICBmaXJlU2V0RXZlbnQgPSBmaXJlU2V0RXZlbnQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBmaXJlU2V0RXZlbnQ7XG4gICAgICAgICAgICAvLyBBbmltYXRpb24gaXMgb3B0aW9uYWwuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGluaXRpYWwgdmFsdWVzIHdlcmUgc2V0IGJlZm9yZSB1c2luZyBhbmltYXRlZCBwbGFjZW1lbnQuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRlICYmICFpc0luaXQpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzc0ZvcihzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXAsIG9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRmlyc3QgcGFzcywgd2l0aG91dCBsb29rQWhlYWQgYnV0IHdpdGggbG9va0JhY2t3YXJkLiBWYWx1ZXMgYXJlIHNldCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHJlc29sdmVUb1ZhbHVlKHZhbHVlc1toYW5kbGVOdW1iZXJdLCBoYW5kbGVOdW1iZXIpLCB0cnVlLCBmYWxzZSwgZXhhY3RJbnB1dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBpID0gc2NvcGVfSGFuZGxlTnVtYmVycy5sZW5ndGggPT09IDEgPyAwIDogMTtcbiAgICAgICAgICAgIC8vIFNwcmVhZCBoYW5kbGVzIGV2ZW5seSBhY3Jvc3MgdGhlIHNsaWRlciBpZiB0aGUgcmFuZ2UgaGFzIG5vIHNpemUgKG1pbj1tYXgpXG4gICAgICAgICAgICBpZiAoaXNJbml0ICYmIHNjb3BlX1NwZWN0cnVtLmhhc05vU2l6ZSgpKSB7XG4gICAgICAgICAgICAgICAgZXhhY3RJbnB1dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zWzBdID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoc2NvcGVfSGFuZGxlTnVtYmVycy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGFjZV8xID0gMTAwIC8gKHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSA9IGhhbmRsZU51bWJlciAqIHNwYWNlXzE7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNlY29uZGFyeSBwYXNzZXMuIE5vdyB0aGF0IGFsbCBiYXNlIHZhbHVlcyBhcmUgc2V0LCBhcHBseSBjb25zdHJhaW50cy5cbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgYWxsIGhhbmRsZXMgdG8gZW5zdXJlIGNvbnN0cmFpbnRzIGFyZSBhcHBsaWVkIGZvciB0aGUgZW50aXJlIHNsaWRlciAoSXNzdWUgIzEwMDkpXG4gICAgICAgICAgICBmb3IgKDsgaSA8IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSwgdHJ1ZSwgdHJ1ZSwgZXhhY3RJbnB1dCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRaaW5kZXgoKTtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgLy8gRmlyZSB0aGUgZXZlbnQgb25seSBmb3IgaGFuZGxlcyB0aGF0IHJlY2VpdmVkIGEgbmV3IHZhbHVlLCBhcyBwZXIgIzU3OVxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbaGFuZGxlTnVtYmVyXSAhPT0gbnVsbCAmJiBmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVzZXQgc2xpZGVyIHRvIGluaXRpYWwgdmFsdWVzXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlUmVzZXQoZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICB2YWx1ZVNldChvcHRpb25zLnN0YXJ0LCBmaXJlU2V0RXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNldCB2YWx1ZSBmb3IgYSBzaW5nbGUgaGFuZGxlXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlU2V0SGFuZGxlKGhhbmRsZU51bWJlciwgdmFsdWUsIGZpcmVTZXRFdmVudCwgZXhhY3RJbnB1dCkge1xuICAgICAgICAgICAgLy8gRW5zdXJlIG51bWVyaWMgaW5wdXRcbiAgICAgICAgICAgIGhhbmRsZU51bWJlciA9IE51bWJlcihoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgaWYgKCEoaGFuZGxlTnVtYmVyID49IDAgJiYgaGFuZGxlTnVtYmVyIDwgc2NvcGVfSGFuZGxlTnVtYmVycy5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlcjogaW52YWxpZCBoYW5kbGUgbnVtYmVyLCBnb3Q6IFwiICsgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIExvb2sgYm90aCBiYWNrd2FyZCBhbmQgZm9yd2FyZCwgc2luY2Ugd2UgZG9uJ3Qgd2FudCB0aGlzIGhhbmRsZSB0byBcInB1c2hcIiBvdGhlciBoYW5kbGVzICgjOTYwKTtcbiAgICAgICAgICAgIC8vIFRoZSBleGFjdElucHV0IGFyZ3VtZW50IGNhbiBiZSB1c2VkIHRvIGlnbm9yZSBzbGlkZXIgc3RlcHBpbmcgKCM0MzYpXG4gICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCByZXNvbHZlVG9WYWx1ZSh2YWx1ZSwgaGFuZGxlTnVtYmVyKSwgdHJ1ZSwgdHJ1ZSwgZXhhY3RJbnB1dCk7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIGlmIChmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBHZXQgdGhlIHNsaWRlciB2YWx1ZS5cbiAgICAgICAgZnVuY3Rpb24gdmFsdWVHZXQodW5lbmNvZGVkKSB7XG4gICAgICAgICAgICBpZiAodW5lbmNvZGVkID09PSB2b2lkIDApIHsgdW5lbmNvZGVkID0gZmFsc2U7IH1cbiAgICAgICAgICAgIGlmICh1bmVuY29kZWQpIHtcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gYSBjb3B5IG9mIHRoZSByYXcgdmFsdWVzXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1ZhbHVlcy5sZW5ndGggPT09IDEgPyBzY29wZV9WYWx1ZXNbMF0gOiBzY29wZV9WYWx1ZXMuc2xpY2UoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gc2NvcGVfVmFsdWVzLm1hcChvcHRpb25zLmZvcm1hdC50byk7XG4gICAgICAgICAgICAvLyBJZiBvbmx5IG9uZSBoYW5kbGUgaXMgdXNlZCwgcmV0dXJuIGEgc2luZ2xlIHZhbHVlLlxuICAgICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZW1vdmVzIGNsYXNzZXMgZnJvbSB0aGUgcm9vdCBhbmQgZW1wdGllcyBpdC5cbiAgICAgICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBwcm90ZWN0ZWQgaW50ZXJuYWwgbGlzdGVuZXJzXG4gICAgICAgICAgICByZW1vdmVFdmVudChJTlRFUk5BTF9FVkVOVF9OUy5hcmlhKTtcbiAgICAgICAgICAgIHJlbW92ZUV2ZW50KElOVEVSTkFMX0VWRU5UX05TLnRvb2x0aXBzKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMuY3NzQ2xhc3NlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXNba2V5XSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdoaWxlIChzY29wZV9UYXJnZXQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIHNjb3BlX1RhcmdldC5yZW1vdmVDaGlsZChzY29wZV9UYXJnZXQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgc2NvcGVfVGFyZ2V0Lm5vVWlTbGlkZXI7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB2YXIgbmVhcmJ5U3RlcHMgPSBzY29wZV9TcGVjdHJ1bS5nZXROZWFyYnlTdGVwcyhsb2NhdGlvbik7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBzY29wZV9WYWx1ZXNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIHZhciBpbmNyZW1lbnQgPSBuZWFyYnlTdGVwcy50aGlzU3RlcC5zdGVwO1xuICAgICAgICAgICAgdmFyIGRlY3JlbWVudCA9IG51bGw7XG4gICAgICAgICAgICAvLyBJZiBzbmFwcGVkLCBkaXJlY3RseSB1c2UgZGVmaW5lZCBzdGVwIHZhbHVlXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zbmFwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgLSBuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLnN0YXJ0VmFsdWUgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbmVhcmJ5U3RlcHMuc3RlcEFmdGVyLnN0YXJ0VmFsdWUgLSB2YWx1ZSB8fCBudWxsLFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB0aGUgbmV4dCB2YWx1ZSBpbiB0aGlzIHN0ZXAgbW92ZXMgaW50byB0aGUgbmV4dCBzdGVwLFxuICAgICAgICAgICAgLy8gdGhlIGluY3JlbWVudCBpcyB0aGUgc3RhcnQgb2YgdGhlIG5leHQgc3RlcCAtIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSArIGluY3JlbWVudCA+IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlIC0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGJleW9uZCB0aGUgc3RhcnRpbmcgcG9pbnRcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IG5lYXJieVN0ZXBzLnRoaXNTdGVwLnN0YXJ0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBuZWFyYnlTdGVwcy50aGlzU3RlcC5zdGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmVhcmJ5U3RlcHMuc3RlcEJlZm9yZS5zdGVwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgYSBoYW5kbGUgaXMgYXQgdGhlIHN0YXJ0IG9mIGEgc3RlcCwgaXQgYWx3YXlzIHN0ZXBzIGJhY2sgaW50byB0aGUgcHJldmlvdXMgc3RlcCBmaXJzdFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gdmFsdWUgLSBuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLmhpZ2hlc3RTdGVwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTm93LCBpZiBhdCB0aGUgc2xpZGVyIGVkZ2VzLCB0aGVyZSBpcyBubyBpbi9kZWNyZW1lbnRcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGxvY2F0aW9uID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFzIHBlciAjMzkxLCB0aGUgY29tcGFyaXNvbiBmb3IgdGhlIGRlY3JlbWVudCBzdGVwIGNhbiBoYXZlIHNvbWUgcm91bmRpbmcgaXNzdWVzLlxuICAgICAgICAgICAgdmFyIHN0ZXBEZWNpbWFscyA9IHNjb3BlX1NwZWN0cnVtLmNvdW50U3RlcERlY2ltYWxzKCk7XG4gICAgICAgICAgICAvLyBSb3VuZCBwZXIgIzM5MVxuICAgICAgICAgICAgaWYgKGluY3JlbWVudCAhPT0gbnVsbCAmJiBpbmNyZW1lbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gTnVtYmVyKGluY3JlbWVudC50b0ZpeGVkKHN0ZXBEZWNpbWFscykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlY3JlbWVudCAhPT0gbnVsbCAmJiBkZWNyZW1lbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gTnVtYmVyKGRlY3JlbWVudC50b0ZpeGVkKHN0ZXBEZWNpbWFscykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtkZWNyZW1lbnQsIGluY3JlbWVudF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0ZXAgc2l6ZSBmb3IgdGhlIHNsaWRlci5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFN0ZXBzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0hhbmRsZU51bWJlcnMubWFwKGdldE5leHRTdGVwc0ZvckhhbmRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVXBkYXRhYmxlOiBtYXJnaW4sIGxpbWl0LCBwYWRkaW5nLCBzdGVwLCByYW5nZSwgYW5pbWF0ZSwgc25hcFxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKG9wdGlvbnNUb1VwZGF0ZSwgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAvLyBTcGVjdHJ1bSBpcyBjcmVhdGVkIHVzaW5nIHRoZSByYW5nZSwgc25hcCwgZGlyZWN0aW9uIGFuZCBzdGVwIG9wdGlvbnMuXG4gICAgICAgICAgICAvLyAnc25hcCcgYW5kICdzdGVwJyBjYW4gYmUgdXBkYXRlZC5cbiAgICAgICAgICAgIC8vIElmICdzbmFwJyBhbmQgJ3N0ZXAnIGFyZSBub3QgcGFzc2VkLCB0aGV5IHNob3VsZCByZW1haW4gdW5jaGFuZ2VkLlxuICAgICAgICAgICAgdmFyIHYgPSB2YWx1ZUdldCgpO1xuICAgICAgICAgICAgdmFyIHVwZGF0ZUFibGUgPSBbXG4gICAgICAgICAgICAgICAgXCJtYXJnaW5cIixcbiAgICAgICAgICAgICAgICBcImxpbWl0XCIsXG4gICAgICAgICAgICAgICAgXCJwYWRkaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJyYW5nZVwiLFxuICAgICAgICAgICAgICAgIFwiYW5pbWF0ZVwiLFxuICAgICAgICAgICAgICAgIFwic25hcFwiLFxuICAgICAgICAgICAgICAgIFwic3RlcFwiLFxuICAgICAgICAgICAgICAgIFwiZm9ybWF0XCIsXG4gICAgICAgICAgICAgICAgXCJwaXBzXCIsXG4gICAgICAgICAgICAgICAgXCJ0b29sdGlwc1wiLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIC8vIE9ubHkgY2hhbmdlIG9wdGlvbnMgdGhhdCB3ZSdyZSBhY3R1YWxseSBwYXNzZWQgdG8gdXBkYXRlLlxuICAgICAgICAgICAgdXBkYXRlQWJsZS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHVuZGVmaW5lZC4gbnVsbCByZW1vdmVzIHRoZSB2YWx1ZS5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uc1RvVXBkYXRlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxPcHRpb25zW25hbWVdID0gb3B0aW9uc1RvVXBkYXRlW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIG5ld09wdGlvbnMgPSB0ZXN0T3B0aW9ucyhvcmlnaW5hbE9wdGlvbnMpO1xuICAgICAgICAgICAgLy8gTG9hZCBuZXcgb3B0aW9ucyBpbnRvIHRoZSBzbGlkZXIgc3RhdGVcbiAgICAgICAgICAgIHVwZGF0ZUFibGUuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zVG9VcGRhdGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zW25hbWVdID0gbmV3T3B0aW9uc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNjb3BlX1NwZWN0cnVtID0gbmV3T3B0aW9ucy5zcGVjdHJ1bTtcbiAgICAgICAgICAgIC8vIExpbWl0LCBtYXJnaW4gYW5kIHBhZGRpbmcgZGVwZW5kIG9uIHRoZSBzcGVjdHJ1bSBidXQgYXJlIHN0b3JlZCBvdXRzaWRlIG9mIGl0LiAoIzY3NylcbiAgICAgICAgICAgIG9wdGlvbnMubWFyZ2luID0gbmV3T3B0aW9ucy5tYXJnaW47XG4gICAgICAgICAgICBvcHRpb25zLmxpbWl0ID0gbmV3T3B0aW9ucy5saW1pdDtcbiAgICAgICAgICAgIG9wdGlvbnMucGFkZGluZyA9IG5ld09wdGlvbnMucGFkZGluZztcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBwaXBzLCByZW1vdmVzIGV4aXN0aW5nLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGlwcykge1xuICAgICAgICAgICAgICAgIHBpcHMob3B0aW9ucy5waXBzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbW92ZVBpcHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwcywgcmVtb3ZlcyBleGlzdGluZy5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbW92ZVRvb2x0aXBzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJbnZhbGlkYXRlIHRoZSBjdXJyZW50IHBvc2l0aW9uaW5nIHNvIHZhbHVlU2V0IGZvcmNlcyBhbiB1cGRhdGUuXG4gICAgICAgICAgICBzY29wZV9Mb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIHZhbHVlU2V0KGlzU2V0KG9wdGlvbnNUb1VwZGF0ZS5zdGFydCkgPyBvcHRpb25zVG9VcGRhdGUuc3RhcnQgOiB2LCBmaXJlU2V0RXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluaXRpYWxpemF0aW9uIHN0ZXBzXG4gICAgICAgIGZ1bmN0aW9uIHNldHVwU2xpZGVyKCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBiYXNlIGVsZW1lbnQsIGluaXRpYWxpemUgSFRNTCBhbmQgc2V0IGNsYXNzZXMuXG4gICAgICAgICAgICAvLyBBZGQgaGFuZGxlcyBhbmQgY29ubmVjdCBlbGVtZW50cy5cbiAgICAgICAgICAgIHNjb3BlX0Jhc2UgPSBhZGRTbGlkZXIoc2NvcGVfVGFyZ2V0KTtcbiAgICAgICAgICAgIGFkZEVsZW1lbnRzKG9wdGlvbnMuY29ubmVjdCwgc2NvcGVfQmFzZSk7XG4gICAgICAgICAgICAvLyBBdHRhY2ggdXNlciBldmVudHMuXG4gICAgICAgICAgICBiaW5kU2xpZGVyRXZlbnRzKG9wdGlvbnMuZXZlbnRzKTtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgcHVibGljIHZhbHVlIG1ldGhvZCB0byBzZXQgdGhlIHN0YXJ0IHZhbHVlcy5cbiAgICAgICAgICAgIHZhbHVlU2V0KG9wdGlvbnMuc3RhcnQpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGlwcykge1xuICAgICAgICAgICAgICAgIHBpcHMob3B0aW9ucy5waXBzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFyaWEoKTtcbiAgICAgICAgfVxuICAgICAgICBzZXR1cFNsaWRlcigpO1xuICAgICAgICB2YXIgc2NvcGVfU2VsZiA9IHtcbiAgICAgICAgICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgICAgICAgICBzdGVwczogZ2V0TmV4dFN0ZXBzLFxuICAgICAgICAgICAgb246IGJpbmRFdmVudCxcbiAgICAgICAgICAgIG9mZjogcmVtb3ZlRXZlbnQsXG4gICAgICAgICAgICBnZXQ6IHZhbHVlR2V0LFxuICAgICAgICAgICAgc2V0OiB2YWx1ZVNldCxcbiAgICAgICAgICAgIHNldEhhbmRsZTogdmFsdWVTZXRIYW5kbGUsXG4gICAgICAgICAgICByZXNldDogdmFsdWVSZXNldCxcbiAgICAgICAgICAgIC8vIEV4cG9zZWQgZm9yIHVuaXQgdGVzdGluZywgZG9uJ3QgdXNlIHRoaXMgaW4geW91ciBhcHBsaWNhdGlvbi5cbiAgICAgICAgICAgIF9fbW92ZUhhbmRsZXM6IGZ1bmN0aW9uICh1cHdhcmQsIHByb3Bvc2FsLCBoYW5kbGVOdW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgbW92ZUhhbmRsZXModXB3YXJkLCBwcm9wb3NhbCwgc2NvcGVfTG9jYXRpb25zLCBoYW5kbGVOdW1iZXJzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb25zOiBvcmlnaW5hbE9wdGlvbnMsXG4gICAgICAgICAgICB1cGRhdGVPcHRpb25zOiB1cGRhdGVPcHRpb25zLFxuICAgICAgICAgICAgdGFyZ2V0OiBzY29wZV9UYXJnZXQsXG4gICAgICAgICAgICByZW1vdmVQaXBzOiByZW1vdmVQaXBzLFxuICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcHM6IHJlbW92ZVRvb2x0aXBzLFxuICAgICAgICAgICAgZ2V0UG9zaXRpb25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0xvY2F0aW9ucy5zbGljZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFRvb2x0aXBzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1Rvb2x0aXBzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE9yaWdpbnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfSGFuZGxlcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwaXBzOiBwaXBzLCAvLyBJc3N1ZSAjNTk0XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBzY29wZV9TZWxmO1xuICAgIH1cbiAgICAvLyBSdW4gdGhlIHN0YW5kYXJkIGluaXRpYWxpemVyXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSh0YXJnZXQsIG9yaWdpbmFsT3B0aW9ucykge1xuICAgICAgICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0Lm5vZGVOYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiBjcmVhdGUgcmVxdWlyZXMgYSBzaW5nbGUgZWxlbWVudCwgZ290OiBcIiArIHRhcmdldCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgdGhlIHNsaWRlciB3YXMgYWxyZWFkeSBpbml0aWFsaXplZC5cbiAgICAgICAgaWYgKHRhcmdldC5ub1VpU2xpZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyOiBTbGlkZXIgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRlc3QgdGhlIG9wdGlvbnMgYW5kIGNyZWF0ZSB0aGUgc2xpZGVyIGVudmlyb25tZW50O1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRlc3RPcHRpb25zKG9yaWdpbmFsT3B0aW9ucyk7XG4gICAgICAgIHZhciBhcGkgPSBzY29wZSh0YXJnZXQsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucyk7XG4gICAgICAgIHRhcmdldC5ub1VpU2xpZGVyID0gYXBpO1xuICAgICAgICByZXR1cm4gYXBpO1xuICAgIH1cbiAgICB2YXIgbm91aXNsaWRlciA9IHtcbiAgICAgICAgLy8gRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLCBkb24ndCB1c2UgdGhpcyBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAgICBfX3NwZWN0cnVtOiBTcGVjdHJ1bSxcbiAgICAgICAgLy8gQSByZWZlcmVuY2UgdG8gdGhlIGRlZmF1bHQgY2xhc3NlcywgYWxsb3dzIGdsb2JhbCBjaGFuZ2VzLlxuICAgICAgICAvLyBVc2UgdGhlIGNzc0NsYXNzZXMgb3B0aW9uIGZvciBjaGFuZ2VzIHRvIG9uZSBzbGlkZXIuXG4gICAgICAgIGNzc0NsYXNzZXM6IGNzc0NsYXNzZXMsXG4gICAgICAgIGNyZWF0ZTogaW5pdGlhbGl6ZSxcbiAgICB9O1xuXG4gICAgZXhwb3J0cy5jcmVhdGUgPSBpbml0aWFsaXplO1xuICAgIGV4cG9ydHMuY3NzQ2xhc3NlcyA9IGNzc0NsYXNzZXM7XG4gICAgZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBub3Vpc2xpZGVyO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYXJ0KGV2ZW50OiBFdmVudCk6dm9pZCB7XHJcbiAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEVsZW1lbnQ7XHJcbiAgY29uc3QgZ29vZHM6IEhUTUxEaXZFbGVtZW50IHwgbnVsbCA9IHRhcmdldC5jbG9zZXN0KCdkaXYnKSE7XHJcbiAgY29uc3QgY291bnRDYXJ0OiBIVE1MVGVtcGxhdGVFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2NvdW50Jyk7XHJcblxyXG4gIGlmIChnb29kcy5jbGFzc0xpc3QuY29udGFpbnMoJ2dvb2RzJykpIHtcclxuICAgIGdvb2RzLmNsYXNzTGlzdC50b2dnbGUoJ2FkZENhcnQnKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNvdW50R29vZHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhZGRDYXJ0JylcclxuXHJcbiAgaWYgKGNvdW50Q2FydCkge1xyXG4gICAgaWYgKCtjb3VudEdvb2RzLmxlbmd0aCA+IDIwKSB7XHJcbiAgICAgIGFsZXJ0KCdTb3JyeSwgdGhlIGNhcnQgaXMgZnVsbCcpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY291bnRDYXJ0LnRleHRDb250ZW50ID0gU3RyaW5nKCtjb3VudEdvb2RzLmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufSIsImltcG9ydCB7SUZpbHRlciwgSUxhcHRvcH0gZnJvbSBcIi4uL3R5cGVzL3R5cGVzXCI7XHJcbmltcG9ydCB7Y3JlYXRlR29vZHN9IGZyb20gXCIuL2dvb2RzXCI7XHJcbmltcG9ydCB7ZGF0YX0gZnJvbSBcIi4uL2RhdGFcIjtcclxuXHJcbmNvbnN0IG9iakRhdGE6IElGaWx0ZXIgPSB7XHJcbiAgJ2JyYW5kJzogW10sXHJcbiAgJ2NvbG9yJzogW10sXHJcbiAgJ3Jlc29sdXRpb24nOiBbXSxcclxuICAnY29uZGl0aW9uJzogW11cclxufVxyXG5cclxuY29uc3QgZmlsdGVyQnJhbmRIcDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpbHRlcl9fYnJhbmQtaHAnKTtcclxuY29uc3QgZmlsdGVyQnJhbmREZWxsOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyX19icmFuZC1kZWxsJyk7XHJcbmNvbnN0IGZpbHRlckJyYW5kTGVub3ZvOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyX19icmFuZC1sZW5vdm8nKTtcclxuY29uc3QgZmlsdGVyQ29sb3JCbGFjazogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpbHRlcl9fY29sb3ItYmxhY2snKTtcclxuY29uc3QgZmlsdGVyQ29sb3JTaWx2ZXI6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXJfX2NvbG9yLXNpbHZlcicpO1xyXG5jb25zdCBmaWx0ZXJDb2xvcldoaXRlOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyX19jb2xvci13aGl0ZScpO1xyXG5jb25zdCBmaWx0ZXJSZXNvbHV0aW9uU21hbGw6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXJfX3Jlc29sdXRpb24tc21hbGwnKTtcclxuY29uc3QgZmlsdGVyUmVzb2x1dGlvbk1pZGRsZTogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpbHRlcl9fcmVzb2x1dGlvbi1taWRkbGUnKTtcclxuY29uc3QgZmlsdGVyUmVzb2x1dGlvbkxhcmdlOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyX19yZXNvbHV0aW9uLWxhcmdlJyk7XHJcbmNvbnN0IGZpbHRlcmNvbmRpdGlvbjogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpbHRlcl9fY29uZGl0aW9uJyk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVycyhldmVudDogRXZlbnQpOiB2b2lkIHtcclxuICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgRWxlbWVudDtcclxuICBpZiAodGFyZ2V0ID09PSBmaWx0ZXJCcmFuZEhwKSBmaWx0ZXJBZGQoZmlsdGVyQnJhbmRIcCwgJ2JyYW5kJywgJ0hQJywgJ2FjdGl2ZScpO1xyXG4gIGlmICh0YXJnZXQgPT09IGZpbHRlckJyYW5kRGVsbCkgZmlsdGVyQWRkKGZpbHRlckJyYW5kRGVsbCwgJ2JyYW5kJywgJ0RlbGwnLCAnYWN0aXZlJyk7XHJcbiAgaWYgKHRhcmdldCA9PT0gZmlsdGVyQnJhbmRMZW5vdm8pIGZpbHRlckFkZChmaWx0ZXJCcmFuZExlbm92bywgJ2JyYW5kJywgJ0xlbm92bycsICdhY3RpdmUnKTtcclxuICBpZiAodGFyZ2V0ID09PSBmaWx0ZXJDb2xvckJsYWNrKSBmaWx0ZXJBZGQoZmlsdGVyQ29sb3JCbGFjaywgJ2NvbG9yJywgJ2JsYWNrJywgJ2FjdGl2ZScpO1xyXG4gIGlmICh0YXJnZXQgPT09IGZpbHRlckNvbG9yU2lsdmVyKSBmaWx0ZXJBZGQoZmlsdGVyQ29sb3JTaWx2ZXIsICdjb2xvcicsICdzaWx2ZXInLCAnYWN0aXZlJyk7XHJcbiAgaWYgKHRhcmdldCA9PT0gZmlsdGVyQ29sb3JXaGl0ZSkgZmlsdGVyQWRkKGZpbHRlckNvbG9yV2hpdGUsICdjb2xvcicsICd3aGl0ZScsICdhY3RpdmUnKTtcclxuICBpZiAodGFyZ2V0ID09PSBmaWx0ZXJSZXNvbHV0aW9uU21hbGwpIGZpbHRlckFkZChmaWx0ZXJSZXNvbHV0aW9uU21hbGwsICdyZXNvbHV0aW9uJywgJzEzNjbRhTc2OCcsICdhY3RpdmUnKTtcclxuICBpZiAodGFyZ2V0ID09PSBmaWx0ZXJSZXNvbHV0aW9uTWlkZGxlKSBmaWx0ZXJBZGQoZmlsdGVyUmVzb2x1dGlvbk1pZGRsZSwgJ3Jlc29sdXRpb24nLCAnMTkyMMOXMTA4MCcsICdhY3RpdmUnKTtcclxuICBpZiAodGFyZ2V0ID09PSBmaWx0ZXJSZXNvbHV0aW9uTGFyZ2UpIGZpbHRlckFkZChmaWx0ZXJSZXNvbHV0aW9uTGFyZ2UsICdyZXNvbHV0aW9uJywgJzI1NjDDlzE0NDAnLCAnYWN0aXZlJyk7XHJcbiAgaWYgKHRhcmdldCA9PT0gZmlsdGVyY29uZGl0aW9uKSBmaWx0ZXJBZGQoZmlsdGVyY29uZGl0aW9uLCAnY29uZGl0aW9uJywgJ3VzZWQnLCAnYWN0aXZlJyk7XHJcblxyXG4gIGNvbnN0IGNoYW5nZURhdGE6IElMYXB0b3BbXSA9IGRhdGEuZmlsdGVyKGlzQ2hhbmdlRmlsdGVyKTtcclxuICBjcmVhdGVHb29kcyhjaGFuZ2VEYXRhKTtcclxuXHJcbiAgaWYgKGNoYW5nZURhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICBhbGVydCgnU29ycnksIHRoZSBnb29kcyBub3QgZm91bmQhJyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0NoYW5nZUZpbHRlcihpdGVtOiBJTGFwdG9wKSB7XHJcbiAgcmV0dXJuICghb2JqRGF0YS5icmFuZC5sZW5ndGggfHwgb2JqRGF0YS5icmFuZC5pbmNsdWRlcyhpdGVtLmJyYW5kKSlcclxuICAgICYmICghb2JqRGF0YS5jb2xvci5sZW5ndGggfHwgb2JqRGF0YS5jb2xvci5pbmNsdWRlcyhpdGVtLmNvbG9yKSlcclxuICAgICYmICghb2JqRGF0YS5yZXNvbHV0aW9uLmxlbmd0aCB8fCBvYmpEYXRhLnJlc29sdXRpb24uaW5jbHVkZXMoaXRlbS5yZXNvbHV0aW9uKSlcclxuICAgICYmICghb2JqRGF0YS5jb25kaXRpb24ubGVuZ3RoIHx8IG9iakRhdGEuY29uZGl0aW9uLmluY2x1ZGVzKGl0ZW0uY29uZGl0aW9uKSlcclxufVxyXG5cclxuZnVuY3Rpb24gZmlsdGVyQWRkKGN1cnJlbnRGaWx0ZXI6IEhUTUxFbGVtZW50LCBzb3J0S2V5OiBzdHJpbmcsIHNvcnROYW1lOiBzdHJpbmcsIGNsYXNzVG9nZ2xlOiBzdHJpbmcpOiB2b2lkIHtcclxuICBjdXJyZW50RmlsdGVyLmNsYXNzTGlzdC50b2dnbGUoY2xhc3NUb2dnbGUpO1xyXG4gIGN1cnJlbnRGaWx0ZXIuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzVG9nZ2xlKVxyXG4gICAgPyBvYmpEYXRhW3NvcnRLZXldLnB1c2goc29ydE5hbWUpXHJcbiAgICA6IG9iakRhdGFbc29ydEtleV0gPSBvYmpEYXRhW3NvcnRLZXldLmZpbHRlcigoaXRlbTogc3RyaW5nKSA9PiBpdGVtICE9PSBzb3J0TmFtZSk7XHJcbn0iLCJpbXBvcnQge0lMYXB0b3B9IGZyb20gXCIuLi90eXBlcy90eXBlc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUdvb2RzKGRhdGE6IElMYXB0b3BbXSk6IHZvaWQge1xyXG4gIGNvbnN0IGdvb2RzOiBFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tYWluX19nb29kcycpO1xyXG5cclxuICBpZiAoZ29vZHMpIHtcclxuICAgIGdvb2RzLmlubmVySFRNTCA9ICcnO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSAxKSB7XHJcbiAgICAgIGdvb2RzLmlubmVySFRNTCArPSBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImdvb2RzXCI+XHJcbiAgICAgICAgICA8aDIgY2xhc3M9XCJnb29kcy1uYW1lXCI+JHtkYXRhW2ldLm5hbWV9PC9oMj5cclxuICAgICAgICAgIDxpbWcgY2xhc3M9XCJnb29kcy1waG90b1wiIHNyYz1cIi4vYXNzZXRzL2ltZy8ke2RhdGFbaV0ubnVtfS5qcGdcIiBhbHQ9XCJsYXB0b3BcIiBoZWlnaHQ9XCIxMTBcIj5cclxuICAgICAgICAgIDxwIGNsYXNzPVwiZ29vZHMtYnJhbmRcIj5CcmFuZDogJHtkYXRhW2ldLmJyYW5kfTwvcD5cclxuICAgICAgICAgIDxwIGNsYXNzPVwiZ29vZHMteWVhclwiPlllYXI6ICR7ZGF0YVtpXS55ZWFyfTwvcD5cclxuICAgICAgICAgIDxwIGNsYXNzPVwiZ29vZHMtY291bnRcIj5Db3VudDogJHtkYXRhW2ldLmNvdW50fTwvcD5cclxuICAgICAgICAgIDxwIGNsYXNzPVwiZ29vZHMtY291bnRyeVwiPkNvbG9yOiAke2RhdGFbaV0uY29sb3J9PC9wPlxyXG4gICAgICAgICAgPHAgY2xhc3M9XCJnb29kcy1pbmNoXCI+SW5jaDogJHtkYXRhW2ldLmluY2h9XCI8L3A+XHJcbiAgICAgICAgICA8cCBjbGFzcz1cImdvb2RzLXJlc29sdXRpb25cIj5SZXNvbHV0aW9uOiAke2RhdGFbaV0ucmVzb2x1dGlvbn08L3A+XHJcbiAgICAgICAgICA8cCBjbGFzcz1cImdvb2RzLXllYXJcIj5Db25kaXRpb246ICR7ZGF0YVtpXS5jb25kaXRpb259PC9wPlxyXG4gICAgICAgICAgPHAgY2xhc3M9XCJnb29kcy1wcmljZVwiPlByaWNlOiAkJHtkYXRhW2ldLnByaWNlfTwvcD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICBgO1xyXG4gICAgfVxyXG4gIH1cclxufSIsImltcG9ydCB7ZGF0YX0gZnJvbSBcIi4uL2RhdGFcIjtcclxuaW1wb3J0IHtJTGFwdG9wfSBmcm9tIFwiLi4vdHlwZXMvdHlwZXNcIjtcclxuaW1wb3J0IHtjcmVhdGVHb29kc30gZnJvbSBcIi4vZ29vZHNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTb3J0RmlsdGVyICgpOnZvaWQge1xyXG4gIGNvbnN0IHNvcnRCeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzb3J0Jyk7XHJcblxyXG4gIGNvbnN0IGNoYW5nZURhdGE6IElMYXB0b3BbXSA9IFsuLi5kYXRhXTtcclxuICBpZiAoKHNvcnRCeSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSA9PT0gJ3NvcnQtYnktbmFtZS1kb3duJykge1xyXG4gICAgY2hhbmdlRGF0YS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgIGlmIChhLm5hbWUudG9Mb3dlckNhc2UoKSA8IGIubmFtZS50b0xvd2VyQ2FzZSgpKSByZXR1cm4gLTE7XHJcbiAgICAgIGlmIChhLm5hbWUudG9Mb3dlckNhc2UoKSA+IGIubmFtZS50b0xvd2VyQ2FzZSgpKSByZXR1cm4gMTtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgaWYgKChzb3J0QnkgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUgPT09ICdzb3J0LWJ5LW5hbWUtdXAnKSB7XHJcbiAgICBjaGFuZ2VEYXRhLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgaWYgKGIubmFtZS50b0xvd2VyQ2FzZSgpIDwgYS5uYW1lLnRvTG93ZXJDYXNlKCkpIHJldHVybiAtMTtcclxuICAgICAgaWYgKGIubmFtZS50b0xvd2VyQ2FzZSgpID4gYS5uYW1lLnRvTG93ZXJDYXNlKCkpIHJldHVybiAxO1xyXG4gICAgICByZXR1cm4gMDtcclxuICAgIH0pO1xyXG4gIH1cclxuICBpZiAoKHNvcnRCeSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSA9PT0gJ3NvcnQtYnkteWVhci11cCcpIHtcclxuICAgIGNoYW5nZURhdGEuc29ydCgoYSwgYikgPT4gK2EueWVhciAtICtiLnllYXIpO1xyXG4gIH1cclxuICBpZiAoKHNvcnRCeSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSA9PT0gJ3NvcnQtYnkteWVhci1kb3duJykge1xyXG4gICAgY2hhbmdlRGF0YS5zb3J0KChhLCBiKSA9PiArYi55ZWFyIC0gK2EueWVhcik7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVHb29kcyhjaGFuZ2VEYXRhKTtcclxuXHJcbn0iLCJpbXBvcnQge0lMYXB0b3B9IGZyb20gXCIuL3R5cGVzL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgZGF0YTogQXJyYXk8SUxhcHRvcD4gPSBbXHJcbiAgICB7XHJcbiAgICAgICAgbnVtOiAnMScsXHJcbiAgICAgICAgbmFtZTogJ0RlbGwgTGF0aXR1ZGUgRTcyODAnLFxyXG4gICAgICAgIGNvdW50OiAnNScsXHJcbiAgICAgICAgeWVhcjogJzIwMTYnLFxyXG4gICAgICAgIGNvbG9yOiAnYmxhY2snLFxyXG4gICAgICAgIHJlc29sdXRpb246ICcxOTIww5cxMDgwJyxcclxuICAgICAgICBpbmNoOiAnMTIuNScsXHJcbiAgICAgICAgYnJhbmQ6ICdEZWxsJyxcclxuICAgICAgICBjb25kaXRpb246ICd1c2VkJyxcclxuICAgICAgICBwcmljZTogJzQwMCcsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG51bTogJzInLFxyXG4gICAgICAgIG5hbWU6ICdIUCBYMzYwIEcyJyxcclxuICAgICAgICBjb3VudDogJzInLFxyXG4gICAgICAgIHllYXI6ICcyMDE1JyxcclxuICAgICAgICBjb2xvcjogJ3NpbHZlcicsXHJcbiAgICAgICAgcmVzb2x1dGlvbjogJzE5MjDDlzEwODAnLFxyXG4gICAgICAgIGluY2g6ICcxMy4zJyxcclxuICAgICAgICBicmFuZDogJ0hQJyxcclxuICAgICAgICBjb25kaXRpb246ICd1c2VkJyxcclxuICAgICAgICBwcmljZTogJzQ1MCcsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG51bTogJzMnLFxyXG4gICAgICAgIG5hbWU6ICdIUCBQcm9Cb29rIDY0NSBHNCcsXHJcbiAgICAgICAgY291bnQ6ICczJyxcclxuICAgICAgICB5ZWFyOiAnMjAxNycsXHJcbiAgICAgICAgY29sb3I6ICdzaWx2ZXInLFxyXG4gICAgICAgIHJlc29sdXRpb246ICcxOTIww5cxMDgwJyxcclxuICAgICAgICBpbmNoOiAnMTQnLFxyXG4gICAgICAgIGJyYW5kOiAnSFAnLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ3VzZWQnLFxyXG4gICAgICAgIHByaWNlOiAnNTAwJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbnVtOiAnNCcsXHJcbiAgICAgICAgbmFtZTogJ0xlbm92byBUaGlua1BhZCBUNTcwJyxcclxuICAgICAgICBjb3VudDogJzYnLFxyXG4gICAgICAgIHllYXI6ICcyMDE2JyxcclxuICAgICAgICBjb2xvcjogJ2JsYWNrJyxcclxuICAgICAgICByZXNvbHV0aW9uOiAnMTkyMMOXMTA4MCcsXHJcbiAgICAgICAgaW5jaDogJzE1LjYnLFxyXG4gICAgICAgIGJyYW5kOiAnTGVub3ZvJyxcclxuICAgICAgICBjb25kaXRpb246ICd1c2VkJyxcclxuICAgICAgICBwcmljZTogJzU1MCcsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG51bTogJzUnLFxyXG4gICAgICAgIG5hbWU6ICdEZWxsIE00ODAwJyxcclxuICAgICAgICBjb3VudDogJzInLFxyXG4gICAgICAgIHllYXI6ICcyMDE1JyxcclxuICAgICAgICBjb2xvcjogJ2JsYWNrJyxcclxuICAgICAgICByZXNvbHV0aW9uOiAnMTkyMMOXMTA4MCcsXHJcbiAgICAgICAgaW5jaDogJzE1LjYnLFxyXG4gICAgICAgIGJyYW5kOiAnRGVsbCcsXHJcbiAgICAgICAgY29uZGl0aW9uOiAndXNlZCcsXHJcbiAgICAgICAgcHJpY2U6ICc1NjAnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBudW06ICc2JyxcclxuICAgICAgICBuYW1lOiAnTGVub3ZvIFRoaW5rUGFkIFQ1MzAnLFxyXG4gICAgICAgIGNvdW50OiAnMicsXHJcbiAgICAgICAgeWVhcjogJzIwMTInLFxyXG4gICAgICAgIGNvbG9yOiAnYmxhY2snLFxyXG4gICAgICAgIHJlc29sdXRpb246ICcxMzY20YU3NjgnLFxyXG4gICAgICAgIGluY2g6ICcxNS42JyxcclxuICAgICAgICBicmFuZDogJ0xlbm92bycsXHJcbiAgICAgICAgY29uZGl0aW9uOiAndXNlZCcsXHJcbiAgICAgICAgcHJpY2U6ICcyODAnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBudW06ICc3JyxcclxuICAgICAgICBuYW1lOiAnRGVsbCBMYXRpdHVkZSBFNzI3MCcsXHJcbiAgICAgICAgY291bnQ6ICc1JyxcclxuICAgICAgICB5ZWFyOiAnMjAxMycsXHJcbiAgICAgICAgY29sb3I6ICdibGFjaycsXHJcbiAgICAgICAgcmVzb2x1dGlvbjogJzEzNjbRhTc2OCcsXHJcbiAgICAgICAgaW5jaDogJzEyLjUnLFxyXG4gICAgICAgIGJyYW5kOiAnRGVsbCcsXHJcbiAgICAgICAgY29uZGl0aW9uOiAndXNlZCcsXHJcbiAgICAgICAgcHJpY2U6ICc0MjAnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBudW06ICc4JyxcclxuICAgICAgICBuYW1lOiAnRGVsbCBMYXRpdHVkZSBFNTQzMCcsXHJcbiAgICAgICAgY291bnQ6ICcyJyxcclxuICAgICAgICB5ZWFyOiAnMjAxMicsXHJcbiAgICAgICAgY29sb3I6ICdibGFjaycsXHJcbiAgICAgICAgcmVzb2x1dGlvbjogJzEzNjbRhTc2OCcsXHJcbiAgICAgICAgaW5jaDogJzE0JyxcclxuICAgICAgICBicmFuZDogJ0RlbGwnLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ3VzZWQnLFxyXG4gICAgICAgIHByaWNlOiAnMjUwJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbnVtOiAnOScsXHJcbiAgICAgICAgbmFtZTogJ0xlbm92byBMZWdpb24gNSBQcm8nLFxyXG4gICAgICAgIGNvdW50OiAnMTInLFxyXG4gICAgICAgIHllYXI6ICcyMDIwJyxcclxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcclxuICAgICAgICByZXNvbHV0aW9uOiAnMjU2MMOXMTQ0MCcsXHJcbiAgICAgICAgaW5jaDogJzE2JyxcclxuICAgICAgICBicmFuZDogJ0xlbm92bycsXHJcbiAgICAgICAgY29uZGl0aW9uOiAnbmV3JyxcclxuICAgICAgICBwcmljZTogJzE0MDAnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBudW06ICcxMCcsXHJcbiAgICAgICAgbmFtZTogJ0xlbm92byBJZGVhUGFkIDMnLFxyXG4gICAgICAgIGNvdW50OiAnNycsXHJcbiAgICAgICAgeWVhcjogJzIwMTknLFxyXG4gICAgICAgIGNvbG9yOiAnc2lsdmVyJyxcclxuICAgICAgICByZXNvbHV0aW9uOiAnMTkyMMOXMTA4MCcsXHJcbiAgICAgICAgaW5jaDogJzE1LjYnLFxyXG4gICAgICAgIGJyYW5kOiAnTGVub3ZvJyxcclxuICAgICAgICBjb25kaXRpb246ICduZXcnLFxyXG4gICAgICAgIHByaWNlOiAnNjAwJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbnVtOiAnMTEnLFxyXG4gICAgICAgIG5hbWU6ICdEZWxsIExhdGl0dWRlIEU1NDMwJyxcclxuICAgICAgICBjb3VudDogJzInLFxyXG4gICAgICAgIHllYXI6ICcyMDEyJyxcclxuICAgICAgICBjb2xvcjogJ2JsYWNrJyxcclxuICAgICAgICByZXNvbHV0aW9uOiAnMTM2NtGFNzY4JyxcclxuICAgICAgICBpbmNoOiAnMTQnLFxyXG4gICAgICAgIGJyYW5kOiAnRGVsbCcsXHJcbiAgICAgICAgY29uZGl0aW9uOiAndXNlZCcsXHJcbiAgICAgICAgcHJpY2U6ICcyMDAnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBudW06ICcxMicsXHJcbiAgICAgICAgbmFtZTogJ0xlbm92byBUNTIwJyxcclxuICAgICAgICBjb3VudDogJzcnLFxyXG4gICAgICAgIHllYXI6ICcyMDE5JyxcclxuICAgICAgICBjb2xvcjogJ2JsYWNrJyxcclxuICAgICAgICByZXNvbHV0aW9uOiAnMTM2NtGFNzY4JyxcclxuICAgICAgICBpbmNoOiAnMTUuNicsXHJcbiAgICAgICAgYnJhbmQ6ICdMZW5vdm8nLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ3VzZWQnLFxyXG4gICAgICAgIHByaWNlOiAnMjUwJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbnVtOiAnMTMnLFxyXG4gICAgICAgIG5hbWU6ICdIUCBQcm9Cb29rIDQ1MCBHMicsXHJcbiAgICAgICAgY291bnQ6ICc0JyxcclxuICAgICAgICB5ZWFyOiAnMjAxNCcsXHJcbiAgICAgICAgY29sb3I6ICdzaWx2ZXInLFxyXG4gICAgICAgIHJlc29sdXRpb246ICcxMzY20YU3NjgnLFxyXG4gICAgICAgIGluY2g6ICcxNS42JyxcclxuICAgICAgICBicmFuZDogJ0hQJyxcclxuICAgICAgICBjb25kaXRpb246ICd1c2VkJyxcclxuICAgICAgICBwcmljZTogJzI3MCcsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIG51bTogJzE0JyxcclxuICAgICAgICBuYW1lOiAnSFAgODUwIEcxJyxcclxuICAgICAgICBjb3VudDogJzcnLFxyXG4gICAgICAgIHllYXI6ICcyMDE1JyxcclxuICAgICAgICBjb2xvcjogJ3NpbHZlcicsXHJcbiAgICAgICAgcmVzb2x1dGlvbjogJzEzNjbRhTc2OCcsXHJcbiAgICAgICAgaW5jaDogJzE1LjYnLFxyXG4gICAgICAgIGJyYW5kOiAnSFAnLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ3VzZWQnLFxyXG4gICAgICAgIHByaWNlOiAnMzAwJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbnVtOiAnMTUnLFxyXG4gICAgICAgIG5hbWU6ICdMZW5vdm8gVDU0MHAnLFxyXG4gICAgICAgIGNvdW50OiAnMycsXHJcbiAgICAgICAgeWVhcjogJzIwMTQnLFxyXG4gICAgICAgIGNvbG9yOiAnYmxhY2snLFxyXG4gICAgICAgIHJlc29sdXRpb246ICcxMzY20YU3NjgnLFxyXG4gICAgICAgIGluY2g6ICcxNS42JyxcclxuICAgICAgICBicmFuZDogJ0xlbm92bycsXHJcbiAgICAgICAgY29uZGl0aW9uOiAndXNlZCcsXHJcbiAgICAgICAgcHJpY2U6ICc0MDAnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBudW06ICcxNicsXHJcbiAgICAgICAgbmFtZTogJ0hQIEVsaXRlQm9vayA4NTAgRzInLFxyXG4gICAgICAgIGNvdW50OiAnMycsXHJcbiAgICAgICAgeWVhcjogJzIwMTYnLFxyXG4gICAgICAgIGNvbG9yOiAnc2lsdmVyJyxcclxuICAgICAgICByZXNvbHV0aW9uOiAnMTkyMNGFMTA4MCcsXHJcbiAgICAgICAgaW5jaDogJzE1LjYnLFxyXG4gICAgICAgIGJyYW5kOiAnSFAnLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ3VzZWQnLFxyXG4gICAgICAgIHByaWNlOiAnNDIwJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbnVtOiAnMTcnLFxyXG4gICAgICAgIG5hbWU6ICdIUCBQcm9Cb29rIDY0NSBHNCcsXHJcbiAgICAgICAgY291bnQ6ICc0JyxcclxuICAgICAgICB5ZWFyOiAnMjAxNycsXHJcbiAgICAgICAgY29sb3I6ICdzaWx2ZXInLFxyXG4gICAgICAgIHJlc29sdXRpb246ICcxOTIw0YUxMDgwJyxcclxuICAgICAgICBpbmNoOiAnMTQnLFxyXG4gICAgICAgIGJyYW5kOiAnSFAnLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ3VzZWQnLFxyXG4gICAgICAgIHByaWNlOiAnNDAwJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbnVtOiAnMTgnLFxyXG4gICAgICAgIG5hbWU6ICdIUCA3NDUgRzUnLFxyXG4gICAgICAgIGNvdW50OiAnMycsXHJcbiAgICAgICAgeWVhcjogJzIwMTcnLFxyXG4gICAgICAgIGNvbG9yOiAnc2lsdmVyJyxcclxuICAgICAgICByZXNvbHV0aW9uOiAnMTM2NtGFNzY4JyxcclxuICAgICAgICBpbmNoOiAnMTQnLFxyXG4gICAgICAgIGJyYW5kOiAnSFAnLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ3VzZWQnLFxyXG4gICAgICAgIHByaWNlOiAnNDUwJyxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbnVtOiAnMTknLFxyXG4gICAgICAgIG5hbWU6ICdMZW5vdm8gVDU2MCcsXHJcbiAgICAgICAgY291bnQ6ICc0JyxcclxuICAgICAgICB5ZWFyOiAnMjAxNycsXHJcbiAgICAgICAgY29sb3I6ICdibGFjaycsXHJcbiAgICAgICAgcmVzb2x1dGlvbjogJzE5MjDRhTEwODAnLFxyXG4gICAgICAgIGluY2g6ICcxNS42JyxcclxuICAgICAgICBicmFuZDogJ0xlbm92bycsXHJcbiAgICAgICAgY29uZGl0aW9uOiAndXNlZCcsXHJcbiAgICAgICAgcHJpY2U6ICc1MDAnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBudW06ICcyMCcsXHJcbiAgICAgICAgbmFtZTogJ0xlbm92byBZb2dhIFgxMycsXHJcbiAgICAgICAgY291bnQ6ICc1JyxcclxuICAgICAgICB5ZWFyOiAnMjAxOScsXHJcbiAgICAgICAgY29sb3I6ICdibGFjaycsXHJcbiAgICAgICAgcmVzb2x1dGlvbjogJzE5MjDRhTEwODAnLFxyXG4gICAgICAgIGluY2g6ICcxMy4zJyxcclxuICAgICAgICBicmFuZDogJ0xlbm92bycsXHJcbiAgICAgICAgY29uZGl0aW9uOiAndXNlZCcsXHJcbiAgICAgICAgcHJpY2U6ICc3NTAnLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBudW06ICcyMScsXHJcbiAgICAgICAgbmFtZTogJ0xlbm92byBQNTAnLFxyXG4gICAgICAgIGNvdW50OiAnMycsXHJcbiAgICAgICAgeWVhcjogJzIwMTcnLFxyXG4gICAgICAgIGNvbG9yOiAnYmxhY2snLFxyXG4gICAgICAgIHJlc29sdXRpb246ICcxOTIw0YUxMDgwJyxcclxuICAgICAgICBpbmNoOiAnMTUuNicsXHJcbiAgICAgICAgYnJhbmQ6ICdMZW5vdm8nLFxyXG4gICAgICAgIGNvbmRpdGlvbjogJ3VzZWQnLFxyXG4gICAgICAgIHByaWNlOiAnNzUwJyxcclxuICAgIH0sXHJcbl07IiwiaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuaW1wb3J0IHtjcmVhdGVHb29kc30gZnJvbSBcIi4vY29tcG9uZW50cy9nb29kc1wiO1xuaW1wb3J0IHtkYXRhfSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQge2ZpbHRlcnN9IGZyb20gXCIuL2NvbXBvbmVudHMvZmxsdGVyc1wiO1xuaW1wb3J0IHtjYXJ0fSBmcm9tIFwiLi9jb21wb25lbnRzL2NhcnRcIjtcbmltcG9ydCB7U29ydEZpbHRlcn0gZnJvbSBcIi4vY29tcG9uZW50cy9zb3J0RmlsdGVyXCI7XG5cbmNvbnN0IHNvcnRGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NvcnQnKTtcbmNvbnN0IGZpbHRlcnNXcmFwcGVyOiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyc19fd3JhcHBlcicpO1xuY29uc3Qgc2VhcmNoRm9ybTogSFRNTElucHV0RWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoX19pbnB1dCcpO1xuY29uc3QgZmlsdGVyUmVzZXQ6IEhUTUxFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXJfX3Jlc2V0Jyk7XG5cbmNyZWF0ZUdvb2RzKGRhdGEpO1xuXG5pZiAoc2VhcmNoRm9ybSkge1xuICBzZWFyY2hGb3JtLm9uaW5wdXQgPSBmdW5jdGlvbihldmVudCk6dm9pZCB7XG4gICAgY29uc3QgZ29vZHM6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmdvb2RzJyk7XG4gICAgY29uc3QgZ29vZHNOYW1lOiBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5nb29kcy1uYW1lJyk7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgY29uc3QgdmFsdWU6c3RyaW5nID0gdGFyZ2V0LnZhbHVlXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdvb2RzTmFtZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGdvb2RzTmFtZVtpXS5pbm5lclRleHQudG9Mb3dlckNhc2UoKS5zZWFyY2godmFsdWUudG9Mb3dlckNhc2UoKSkgPT0gLTEpIHtcbiAgICAgICAgZ29vZHNbaV0uY2xhc3NMaXN0LmFkZCgnZ29vZHMtaGlkZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ29vZHNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnZ29vZHMtaGlkZScpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5pbXBvcnQgKiBhcyBub1VpU2xpZGVyIGZyb20gJ25vdWlzbGlkZXInO1xuaW1wb3J0IHtJTGFwdG9wfSBmcm9tIFwiLi90eXBlcy90eXBlc1wiO1xuXG5jb25zdCBzbGlkZXJZZWFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NsaWRlci15ZWFyJykgYXMgbm9VaVNsaWRlci50YXJnZXQ7XG5jb25zdCBzbGlkZXJTY3JlZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2xpZGVyLXNjcmVlbicpIGFzIG5vVWlTbGlkZXIudGFyZ2V0O1xuXG5pZihzbGlkZXJZZWFyKSB7XG4gIG5vVWlTbGlkZXIuY3JlYXRlKHNsaWRlclllYXIsIHtcbiAgICBzdGFydDogWzIwMTIsIDIwMjBdLFxuICAgIGNvbm5lY3Q6IHRydWUsXG4gICAgc3RlcDogMSxcbiAgICByYW5nZToge1xuICAgICAgJ21pbic6IDIwMTIsXG4gICAgICAnbWF4JzogMjAyMFxuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgaW5wdXRZZWFyRnJvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC15ZWFyLWZyb20nKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICBjb25zdCBpbnB1dFllYXJUbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dC15ZWFyLXRvJykgYXMgSFRNTElucHV0RWxlbWVudDtcblxuICBjb25zdCBpbnB1dHMgPSBbaW5wdXRZZWFyRnJvbSwgaW5wdXRZZWFyVG9dO1xuXG4gIHNsaWRlclllYXIubm9VaVNsaWRlcj8ub24oJ3VwZGF0ZScsIGZ1bmN0aW9uKHZhbHVlczogKHN0cmluZyB8IG51bWJlcilbXSwgaGFuZGxlOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpbnB1dHNbaGFuZGxlXS52YWx1ZSA9IFN0cmluZyhNYXRoLnJvdW5kKE51bWJlcih2YWx1ZXNbaGFuZGxlXSkpKTtcblxuICAgIGNvbnN0IGNoYW5nZURhdGE6IElMYXB0b3BbXSA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoK2RhdGFbaV0ueWVhciA+ICtpbnB1dFllYXJGcm9tLnZhbHVlICYmICtkYXRhW2ldLnllYXIgPCAraW5wdXRZZWFyVG8udmFsdWUpIHtcbiAgICAgICAgY2hhbmdlRGF0YS5wdXNoKGRhdGFbaV0pXG4gICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZUdvb2RzKGNoYW5nZURhdGEpO1xuICB9KTtcbn1cblxuaWYoc2xpZGVyU2NyZWVuKSB7XG4gIG5vVWlTbGlkZXIuY3JlYXRlKHNsaWRlclNjcmVlbiwge1xuICAgIHN0YXJ0OiBbMTIsIDE3XSxcbiAgICBjb25uZWN0OiB0cnVlLFxuICAgIHN0ZXA6IDAuNSxcbiAgICByYW5nZToge1xuICAgICAgJ21pbic6IDEyLFxuICAgICAgJ21heCc6IDE3XG4gICAgfVxuICB9KTtcblxuICBjb25zdCBpbnB1dFNjcmVlbkZyb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXQtc2NyZWVuLWZyb20nKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICBjb25zdCBpbnB1dFNjcmVlblRvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0LXNjcmVlbi10bycpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgY29uc3QgaW5wdXRzID0gW2lucHV0U2NyZWVuRnJvbSwgaW5wdXRTY3JlZW5Ub107XG5cbiAgc2xpZGVyU2NyZWVuLm5vVWlTbGlkZXI/Lm9uKCd1cGRhdGUnLCBmdW5jdGlvbih2YWx1ZXM6IChzdHJpbmcgfCBudW1iZXIpW10sIGhhbmRsZTogbnVtYmVyKTogdm9pZCB7XG4gICAgaW5wdXRzW2hhbmRsZV0udmFsdWUgPSBTdHJpbmcoTWF0aC5yb3VuZChOdW1iZXIodmFsdWVzW2hhbmRsZV0pKSk7XG5cbiAgICBjb25zdCBjaGFuZ2VEYXRhOiBJTGFwdG9wW10gPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCtkYXRhW2ldLmluY2ggPiAraW5wdXRTY3JlZW5Gcm9tLnZhbHVlICYmICtkYXRhW2ldLmluY2ggPCAraW5wdXRTY3JlZW5Uby52YWx1ZSkge1xuICAgICAgICBjaGFuZ2VEYXRhLnB1c2goZGF0YVtpXSlcbiAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlR29vZHMoY2hhbmdlRGF0YSk7XG4gIH0pO1xufVxuXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FydCk7XG5maWx0ZXJSZXNldD8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgbG9jYXRpb24ucmVsb2FkKCk7XG59KTtcbnNvcnRGb3JtPy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBTb3J0RmlsdGVyKTtcbmZpbHRlcnNXcmFwcGVyPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZpbHRlcnMpO1xuXG5cblxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwNyk7XG4iXSwibmFtZXMiOlsiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJpIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibGVuZ3RoIiwiX2kiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImxlbiIsImFycjIiLCJBcnJheSIsIl9pdGVtIiwiaXNBcnJheSIsIl9hcnJheVdpdGhIb2xlcyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwiY2FsbCIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsInNsaWNlIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiZnJvbSIsInRlc3QiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImlzVmFsaWRQYXJ0aWFsRm9ybWF0dGVyIiwiZW50cnkiLCJ0byIsInJlbW92ZUVsZW1lbnQiLCJlbCIsInBhcmVudEVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsImlzU2V0IiwicHJldmVudERlZmF1bHQiLCJlIiwiaXNOdW1lcmljIiwiYSIsImlzTmFOIiwiaXNGaW5pdGUiLCJhZGRDbGFzc0ZvciIsImVsZW1lbnQiLCJjbGFzc05hbWUiLCJkdXJhdGlvbiIsImFkZENsYXNzIiwic2V0VGltZW91dCIsInJlbW92ZUNsYXNzIiwibGltaXQiLCJNYXRoIiwibWF4IiwibWluIiwiYXNBcnJheSIsImNvdW50RGVjaW1hbHMiLCJudW1TdHIiLCJwaWVjZXMiLCJTdHJpbmciLCJzcGxpdCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsInJlcGxhY2UiLCJSZWdFeHAiLCJnZXRQYWdlT2Zmc2V0IiwiZG9jIiwic3VwcG9ydFBhZ2VPZmZzZXQiLCJ1bmRlZmluZWQiLCJ3aW5kb3ciLCJwYWdlWE9mZnNldCIsImlzQ1NTMUNvbXBhdCIsImNvbXBhdE1vZGUiLCJ4IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsTGVmdCIsImJvZHkiLCJ5IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLCJzdWJSYW5nZVJhdGlvIiwicGEiLCJwYiIsImZyb21QZXJjZW50YWdlIiwicmFuZ2UiLCJzdGFydFJhbmdlIiwiZ2V0SiIsImoiLCJ0b1N0ZXBwaW5nIiwieFZhbCIsInhQY3QiLCJ2YSIsInZiIiwiYWJzIiwidG9QZXJjZW50YWdlIiwiZ2V0U3RlcCIsInhTdGVwcyIsInNuYXAiLCJiIiwicm91bmQiLCJjbG9zZXN0IiwiUGlwc1R5cGUiLCJQaXBzTW9kZSIsIlNwZWN0cnVtIiwic2luZ2xlU3RlcCIsImluZGV4IiwieE51bVN0ZXBzIiwieEhpZ2hlc3RDb21wbGV0ZVN0ZXAiLCJvcmRlcmVkIiwia2V5cyIsImZvckVhY2giLCJzb3J0IiwiaGFuZGxlRW50cnlQb2ludCIsImhhbmRsZVN0ZXBQb2ludCIsImdldERpc3RhbmNlIiwiZGlzdGFuY2VzIiwiZ2V0QWJzb2x1dGVEaXN0YW5jZSIsImRpcmVjdGlvbiIsInN0YXJ0X2ZhY3RvciIsInhQY3RfaW5kZXgiLCJyZXN0X2ZhY3RvciIsInJlc3RfcmVsX2Rpc3RhbmNlIiwicmFuZ2VfcGN0IiwicmVsX3JhbmdlX2Rpc3RhbmNlIiwiYWJzX2Rpc3RhbmNlX2NvdW50ZXIiLCJyYW5nZV9jb3VudGVyIiwiZnJvbVN0ZXBwaW5nIiwiaXNQZXJjZW50YWdlIiwiZ2V0RGVmYXVsdFN0ZXAiLCJpc0Rvd24iLCJzaXplIiwiZ2V0TmVhcmJ5U3RlcHMiLCJzdGVwQmVmb3JlIiwic3RhcnRWYWx1ZSIsInN0ZXAiLCJoaWdoZXN0U3RlcCIsInRoaXNTdGVwIiwic3RlcEFmdGVyIiwiY291bnRTdGVwRGVjaW1hbHMiLCJzdGVwRGVjaW1hbHMiLCJhcHBseSIsImhhc05vU2l6ZSIsImNvbnZlcnQiLCJwZXJjZW50YWdlIiwicGFyc2VGbG9hdCIsIkVycm9yIiwidmFsdWUxIiwiTnVtYmVyIiwidG90YWxTdGVwcyIsImNlaWwiLCJ0b0ZpeGVkIiwiZGVmYXVsdEZvcm1hdHRlciIsImNzc0NsYXNzZXMiLCJ0YXJnZXQiLCJiYXNlIiwib3JpZ2luIiwiaGFuZGxlIiwiaGFuZGxlTG93ZXIiLCJoYW5kbGVVcHBlciIsInRvdWNoQXJlYSIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsImJhY2tncm91bmQiLCJjb25uZWN0IiwiY29ubmVjdHMiLCJsdHIiLCJydGwiLCJ0ZXh0RGlyZWN0aW9uTHRyIiwidGV4dERpcmVjdGlvblJ0bCIsImRyYWdnYWJsZSIsImRyYWciLCJ0YXAiLCJhY3RpdmUiLCJ0b29sdGlwIiwicGlwcyIsInBpcHNIb3Jpem9udGFsIiwicGlwc1ZlcnRpY2FsIiwibWFya2VyIiwibWFya2VySG9yaXpvbnRhbCIsIm1hcmtlclZlcnRpY2FsIiwibWFya2VyTm9ybWFsIiwibWFya2VyTGFyZ2UiLCJtYXJrZXJTdWIiLCJ2YWx1ZUhvcml6b250YWwiLCJ2YWx1ZVZlcnRpY2FsIiwidmFsdWVOb3JtYWwiLCJ2YWx1ZUxhcmdlIiwidmFsdWVTdWIiLCJJTlRFUk5BTF9FVkVOVF9OUyIsInRlc3RTdGVwIiwicGFyc2VkIiwidGVzdEtleWJvYXJkUGFnZU11bHRpcGxpZXIiLCJrZXlib2FyZFBhZ2VNdWx0aXBsaWVyIiwidGVzdEtleWJvYXJkTXVsdGlwbGllciIsImtleWJvYXJkTXVsdGlwbGllciIsInRlc3RLZXlib2FyZERlZmF1bHRTdGVwIiwia2V5Ym9hcmREZWZhdWx0U3RlcCIsInRlc3RSYW5nZSIsInNwZWN0cnVtIiwidGVzdFN0YXJ0IiwiaGFuZGxlcyIsInN0YXJ0IiwidGVzdFNuYXAiLCJ0ZXN0QW5pbWF0ZSIsImFuaW1hdGUiLCJ0ZXN0QW5pbWF0aW9uRHVyYXRpb24iLCJhbmltYXRpb25EdXJhdGlvbiIsInRlc3RDb25uZWN0IiwidGVzdE9yaWVudGF0aW9uIiwib3J0IiwidGVzdE1hcmdpbiIsIm1hcmdpbiIsInRlc3RMaW1pdCIsInRlc3RQYWRkaW5nIiwicGFkZGluZyIsInRvdGFsUGFkZGluZyIsImZpcnN0VmFsdWUiLCJ0ZXN0RGlyZWN0aW9uIiwiZGlyIiwidGVzdEJlaGF2aW91ciIsImluZGV4T2YiLCJmaXhlZCIsImhvdmVyIiwidW5jb25zdHJhaW5lZCIsImRyYWdBbGwiLCJzbW9vdGhTdGVwcyIsImV2ZW50cyIsInRlc3RUb29sdGlwcyIsInRvb2x0aXBzIiwiZm9ybWF0dGVyIiwidGVzdEhhbmRsZUF0dHJpYnV0ZXMiLCJoYW5kbGVBdHRyaWJ1dGVzIiwidGVzdEFyaWFGb3JtYXQiLCJhcmlhRm9ybWF0IiwidGVzdEZvcm1hdCIsImlzVmFsaWRGb3JtYXR0ZXIiLCJmb3JtYXQiLCJ0ZXN0S2V5Ym9hcmRTdXBwb3J0Iiwia2V5Ym9hcmRTdXBwb3J0IiwidGVzdERvY3VtZW50RWxlbWVudCIsInRlc3RDc3NQcmVmaXgiLCJjc3NQcmVmaXgiLCJ0ZXN0Q3NzQ2xhc3NlcyIsImtleSIsInRlc3RPcHRpb25zIiwib3B0aW9ucyIsInRlc3RzIiwiciIsInQiLCJvcmllbnRhdGlvbiIsImJlaGF2aW91ciIsImRlZmF1bHRzIiwiZCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm1zUHJlZml4Iiwic3R5bGUiLCJtc1RyYW5zZm9ybSIsIm5vUHJlZml4IiwidHJhbnNmb3JtIiwidHJhbnNmb3JtUnVsZSIsInNjb3BlIiwib3JpZ2luYWxPcHRpb25zIiwic2NvcGVfQmFzZSIsInNjb3BlX0hhbmRsZXMiLCJzY29wZV9Db25uZWN0cyIsInNjb3BlX1BpcHMiLCJzY29wZV9Ub29sdGlwcyIsImFkZFRhcmdldCIsImFjdGlvbnMiLCJuYXZpZ2F0b3IiLCJwb2ludGVyRW5hYmxlZCIsIm1vdmUiLCJlbmQiLCJtc1BvaW50ZXJFbmFibGVkIiwic3VwcG9ydHNQYXNzaXZlIiwiQ1NTIiwic3VwcG9ydHMiLCJvcHRzIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0U3VwcG9ydHNQYXNzaXZlIiwic2NvcGVfVGFyZ2V0Iiwic2NvcGVfU3BlY3RydW0iLCJzY29wZV9WYWx1ZXMiLCJzY29wZV9Mb2NhdGlvbnMiLCJzY29wZV9IYW5kbGVOdW1iZXJzIiwic2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50Iiwic2NvcGVfRXZlbnRzIiwic2NvcGVfRG9jdW1lbnQiLCJvd25lckRvY3VtZW50Iiwic2NvcGVfRG9jdW1lbnRFbGVtZW50Iiwic2NvcGVfQm9keSIsInNjb3BlX0Rpck9mZnNldCIsImFkZE5vZGVUbyIsImRpdiIsImFwcGVuZENoaWxkIiwiYWRkT3JpZ2luIiwiaGFuZGxlTnVtYmVyIiwic2V0QXR0cmlidXRlIiwiZXZlbnQiLCJpc1NsaWRlckRpc2FibGVkIiwiaXNIYW5kbGVEaXNhYmxlZCIsImhvcml6b250YWxLZXlzIiwidmVydGljYWxLZXlzIiwibGFyZ2VTdGVwS2V5cyIsImVkZ2VLZXlzIiwicmV2ZXJzZSIsImlzTGFyZ2VEb3duIiwiaXNMYXJnZVVwIiwiaXNVcCIsImlzTWluIiwiaXNNYXgiLCJnZXROZXh0U3RlcHNGb3JIYW5kbGUiLCJzZXRIYW5kbGUiLCJmaXJlRXZlbnQiLCJldmVudEtleWRvd24iLCJhdHRyaWJ1dGVzXzEiLCJhdHRyaWJ1dGUiLCJhZGRDb25uZWN0IiwiYWRkVG9vbHRpcCIsImZpcnN0Q2hpbGQiLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVUb29sdGlwcyIsInJlbW92ZUV2ZW50IiwiYmluZEV2ZW50IiwidmFsdWVzIiwidW5lbmNvZGVkIiwiZm9ybWF0dGVkVmFsdWUiLCJpbm5lckhUTUwiLCJtYXBUb1JhbmdlIiwic3RlcHBlZCIsImdlbmVyYXRlU3ByZWFkIiwiYXJyYXkiLCJncm91cCIsIm1vZGUiLCJSYW5nZSIsIlN0ZXBzIiwiQ291bnQiLCJpbnRlcnZhbCIsInNwcmVhZCIsIlBvc2l0aW9ucyIsIlZhbHVlcyIsImdldEdyb3VwIiwiaW5kZXhlcyIsImZpcnN0SW5SYW5nZSIsImxhc3RJblJhbmdlIiwiaWdub3JlRmlyc3QiLCJpZ25vcmVMYXN0IiwicHJldlBjdCIsImZpbHRlciIsInVuc2hpZnQiLCJjdXJyZW50IiwicSIsIm5ld1BjdCIsInBjdERpZmZlcmVuY2UiLCJwY3RQb3MiLCJ0eXBlIiwic3RlcHMiLCJyZWFsU3RlcHMiLCJzdGVwU2l6ZSIsImxvdyIsImhpZ2giLCJpc1N0ZXBzIiwiZGVuc2l0eSIsIkxhcmdlVmFsdWUiLCJTbWFsbFZhbHVlIiwiTm9WYWx1ZSIsImFkZE1hcmtpbmciLCJmaWx0ZXJGdW5jIiwiX2EiLCJfYiIsInZhbHVlU2l6ZUNsYXNzZXMiLCJOb25lIiwibWFya2VyU2l6ZUNsYXNzZXMiLCJ2YWx1ZU9yaWVudGF0aW9uQ2xhc3NlcyIsIm1hcmtlck9yaWVudGF0aW9uQ2xhc3NlcyIsImdldENsYXNzZXMiLCJzaXplQ2xhc3NlcyIsIm9mZnNldCIsIm5vZGUiLCJhZGRTcHJlYWQiLCJyZW1vdmVQaXBzIiwiYmFzZVNpemUiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYWx0Iiwid2lkdGgiLCJoZWlnaHQiLCJhdHRhY2hFdmVudCIsImNhbGxiYWNrIiwibWV0aG9kIiwicGFnZU9mZnNldCIsImV2ZW50VGFyZ2V0IiwidG91Y2giLCJtb3VzZSIsInBvaW50ZXIiLCJidXR0b25zIiwidG91Y2hlcyIsImlzVG91Y2hPblRhcmdldCIsImNoZWNrVG91Y2giLCJjb250YWlucyIsImNvbXBvc2VkIiwiY29tcG9zZWRQYXRoIiwic2hpZnQiLCJ0YXJnZXRUb3VjaGVzIiwicGFnZVgiLCJwYWdlWSIsInRhcmdldFRvdWNoIiwiZmluZCIsImNoYW5nZWRUb3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJwb2ludHMiLCJjdXJzb3IiLCJmaXhFdmVudCIsImRvTm90UmVqZWN0IiwiY2FsY1BvaW50IiwibWV0aG9kcyIsImV2ZW50TmFtZSIsInBhc3NpdmUiLCJjYWxjUG9pbnRUb1BlcmNlbnRhZ2UiLCJlbGVtIiwiZG9jRWxlbSIsInByb3Bvc2FsIiwidXNlckFnZW50IiwidG9wIiwiY2xpZW50VG9wIiwibGVmdCIsImNsaWVudExlZnQiLCJkb2N1bWVudExlYXZlIiwibm9kZU5hbWUiLCJyZWxhdGVkVGFyZ2V0IiwiZXZlbnRFbmQiLCJldmVudE1vdmUiLCJhcHBWZXJzaW9uIiwiYnV0dG9uc1Byb3BlcnR5IiwibW92ZW1lbnQiLCJzdGFydENhbGNQb2ludCIsIm1vdmVIYW5kbGVzIiwibG9jYXRpb25zIiwiaGFuZGxlTnVtYmVycyIsImxpc3RlbmVycyIsImMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0WmluZGV4IiwiZXZlbnRTdGFydCIsInNvbWUiLCJjaGlsZHJlbiIsInN0b3BQcm9wYWdhdGlvbiIsIm1vdmVFdmVudCIsImVuZEV2ZW50Iiwib3V0RXZlbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZXZlbnRUYXAiLCJjbGlja2VkUG9zaXRpb24iLCJzbWFsbGVzdERpZmZlcmVuY2UiLCJoYW5kbGVQb3NpdGlvbiIsImRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSIsImdldENsb3Nlc3RIYW5kbGUiLCJldmVudEhvdmVyIiwidGFyZ2V0RXZlbnQiLCJzY29wZV9TZWxmIiwibmFtZXNwYWNlZEV2ZW50IiwibmFtZXNwYWNlIiwic3Vic3RyaW5nIiwiYmluZCIsInRFdmVudCIsInROYW1lc3BhY2UiLCJpc0ludGVybmFsTmFtZXNwYWNlIiwiZXZlbnRUeXBlIiwiY2hlY2tIYW5kbGVQb3NpdGlvbiIsInJlZmVyZW5jZSIsImxvb2tCYWNrd2FyZCIsImxvb2tGb3J3YXJkIiwiZ2V0VmFsdWUiLCJkaXN0YW5jZSIsImluUnVsZU9yZGVyIiwidiIsInVwd2FyZCIsInByb3Bvc2FscyIsImZpcnN0SGFuZGxlIiwiZiIsInN0YXRlIiwidHJhbnNmb3JtRGlyZWN0aW9uIiwiekluZGV4IiwiZXhhY3RJbnB1dCIsInRyYW5zbGF0ZVJ1bGUiLCJ1cGRhdGVDb25uZWN0IiwidXBkYXRlSGFuZGxlUG9zaXRpb24iLCJsIiwiaCIsImNvbm5lY3RXaWR0aCIsInNjYWxlUnVsZSIsInJlc29sdmVUb1ZhbHVlIiwidmFsdWVTZXQiLCJpbnB1dCIsImZpcmVTZXRFdmVudCIsImlzSW5pdCIsInNwYWNlXzEiLCJ2YWx1ZUdldCIsImxvY2F0aW9uIiwibmVhcmJ5U3RlcHMiLCJpbmNyZW1lbnQiLCJkZWNyZW1lbnQiLCJjb25uZWN0T3B0aW9ucyIsImNvbm5lY3RCYXNlIiwiYWRkRWxlbWVudHMiLCJoYW5kbGVCZWZvcmUiLCJoYW5kbGVBZnRlciIsImV2ZW50SG9sZGVycyIsImhhbmRsZXNUb0RyYWciLCJoYW5kbGVOdW1iZXJzVG9EcmFnIiwiZXZlbnRIb2xkZXIiLCJwb3NpdGlvbnMiLCJub3ciLCJ0ZXh0IiwiZGVzdHJveSIsIm5vVWlTbGlkZXIiLCJvbiIsIm9mZiIsInNldCIsInJlc2V0IiwiX19tb3ZlSGFuZGxlcyIsInVwZGF0ZU9wdGlvbnMiLCJvcHRpb25zVG9VcGRhdGUiLCJ1cGRhdGVBYmxlIiwibmV3T3B0aW9ucyIsImdldFBvc2l0aW9ucyIsImdldFRvb2x0aXBzIiwiZ2V0T3JpZ2lucyIsImluaXRpYWxpemUiLCJhcGkiLCJub3Vpc2xpZGVyIiwiX19zcGVjdHJ1bSIsImNyZWF0ZSIsImZhY3RvcnkiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInNldEF0dHJpYnV0ZXMiLCJpbnNlcnQiLCJkb21BUEkiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsImxheWVyIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwidXBkYXRlIiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsIm1lbW8iLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJhdHRyaWJ1dGVzIiwic3R5bGVFbGVtZW50Iiwibm9uY2UiLCJuZWVkTGF5ZXIiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJjcmVhdGVUZXh0Tm9kZSIsImdvb2RzIiwiY291bnRDYXJ0IiwidG9nZ2xlIiwiY291bnRHb29kcyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhbGVydCIsInRleHRDb250ZW50Iiwib2JqRGF0YSIsImZpbHRlckJyYW5kSHAiLCJmaWx0ZXJCcmFuZERlbGwiLCJmaWx0ZXJCcmFuZExlbm92byIsImZpbHRlckNvbG9yQmxhY2siLCJmaWx0ZXJDb2xvclNpbHZlciIsImZpbHRlckNvbG9yV2hpdGUiLCJmaWx0ZXJSZXNvbHV0aW9uU21hbGwiLCJmaWx0ZXJSZXNvbHV0aW9uTWlkZGxlIiwiZmlsdGVyUmVzb2x1dGlvbkxhcmdlIiwiZmlsdGVyY29uZGl0aW9uIiwiaXNDaGFuZ2VGaWx0ZXIiLCJicmFuZCIsImluY2x1ZGVzIiwiY29sb3IiLCJyZXNvbHV0aW9uIiwiY29uZGl0aW9uIiwiZmlsdGVyQWRkIiwiY3VycmVudEZpbHRlciIsInNvcnRLZXkiLCJzb3J0TmFtZSIsImNsYXNzVG9nZ2xlIiwiY2hhbmdlRGF0YSIsImNyZWF0ZUdvb2RzIiwibnVtIiwieWVhciIsImluY2giLCJwcmljZSIsInNvcnRCeSIsInRvTG93ZXJDYXNlIiwic29ydEZvcm0iLCJmaWx0ZXJzV3JhcHBlciIsInNlYXJjaEZvcm0iLCJmaWx0ZXJSZXNldCIsIm9uaW5wdXQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZ29vZHNOYW1lIiwiaW5uZXJUZXh0Iiwic2VhcmNoIiwic2xpZGVyWWVhciIsImdldEVsZW1lbnRCeUlkIiwic2xpZGVyU2NyZWVuIiwiaW5wdXRZZWFyRnJvbSIsImlucHV0WWVhclRvIiwiaW5wdXRzIiwiaW5wdXRTY3JlZW5Gcm9tIiwiaW5wdXRTY3JlZW5UbyIsImNhcnQiLCJyZWxvYWQiLCJTb3J0RmlsdGVyIiwiZmlsdGVycyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsImVudW1lcmFibGUiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJ0b1N0cmluZ1RhZyIsIm5jIl0sInNvdXJjZVJvb3QiOiIifQ==